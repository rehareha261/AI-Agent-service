═══════════════════════════════════════════════════════════════════════════════
🎯 CONCEPTION INTERFACE ADMIN - AI AGENT
═══════════════════════════════════════════════════════════════════════════════
Date: 14 Octobre 2025
Version: 1.0
Architecture: React + TypeScript + Tailwind CSS
Backend: FastAPI (port 8000) + PostgreSQL
Frontend: Vite (port 3000)

═══════════════════════════════════════════════════════════════════════════════
📋 STRUCTURE DE L'INTERFACE
═══════════════════════════════════════════════════════════════════════════════

┌─────────────────────────────────────────────────────────────────────────────┐
│  SIDEBAR (Navigation Principale)                                            │
├─────────────────────────────────────────────────────────────────────────────┤
│  🏠 Dashboard                    → Vue d'ensemble temps réel                │
│  ⚙️  Workflows                    → Monitoring LangGraph                    │
│  📝 Tâches                        → Gestion des tâches Monday.com           │
│  🤖 IA & Coûts                    → Performance et coûts IA                 │
│  ✅ Qualité Code                  → Tests, coverage, sécurité              │
│  🔀 Pull Requests                 → Suivi GitHub PRs                        │
│  👤 Validations                   → Interface validation humaine            │
│  🔗 Webhooks                      → Intégrations Monday.com                 │
│  📊 Logs                          → Logs système et debugging               │
│  🛠️  Configuration                → Paramètres et API keys                  │
└─────────────────────────────────────────────────────────────────────────────┘


═══════════════════════════════════════════════════════════════════════════════
📊 1. DASHBOARD PRINCIPAL (Vue d'ensemble)
═══════════════════════════════════════════════════════════════════════════════

DONNÉES SOURCE: mv_dashboard_summary, mv_realtime_monitoring, mv_executive_dashboard

┌──────────────────────────────────────────────────────────────┐
│  MÉTRIQUES CLÉS (KPI Cards - 4 colonnes)                    │
├──────────────────────────────────────────────────────────────┤
│  • Workflows Actifs       → COUNT(status='running')         │
│  • Tâches Complétées (24h) → COUNT(internal_status='completed') │
│  • Coûts IA Aujourd'hui   → SUM(total_ai_cost) WHERE today  │
│  • Taux de Succès         → completed / total * 100%        │
└──────────────────────────────────────────────────────────────┘

┌──────────────────────────────────────────────────────────────┐
│  GRAPHIQUE: Activité 7 Derniers Jours (Line Chart)          │
│  X-axis: Jours │ Y-axis: Nombre de tâches                   │
│  Lignes: Completed (vert), Failed (rouge), Pending (orange) │
└──────────────────────────────────────────────────────────────┘

┌──────────────────────────────────────────────────────────────┐
│  WORKFLOWS EN COURS (Real-time - auto-refresh 5s)           │
│  Colonnes: ID | Titre | Nœud Actuel | Progrès | Durée       │
│  Actions: Voir Détails | Annuler                            │
└──────────────────────────────────────────────────────────────┘

┌──────────────────────────────────────────────────────────────┐
│  ALERTES & NOTIFICATIONS                                     │
│  • Tâches en attente > 1h → WARNING                         │
│  • Taux succès < 80% → CRITICAL                             │
│  • Coûts IA > budget → INFO                                 │
└──────────────────────────────────────────────────────────────┘


═══════════════════════════════════════════════════════════════════════════════
⚙️ 2. WORKFLOWS (Monitoring LangGraph)
═══════════════════════════════════════════════════════════════════════════════

DONNÉES SOURCE: mv_workflow_status, task_runs, run_steps

┌──────────────────────────────────────────────────────────────┐
│  FILTRES                                                     │
│  [Status: Tous ▼] [Provider: Tous ▼] [Date: 7j ▼] [🔍]     │
└──────────────────────────────────────────────────────────────┘

┌──────────────────────────────────────────────────────────────┐
│  TABLE: Liste des Workflows                                 │
├──────────────────────────────────────────────────────────────┤
│  ID | Tâche | Status | Nœud | Progrès | IA | Durée | Actions│
│  1234 │ Fix bug auth │ Running │ implement_task │ 45% │      │
│       Claude Sonnet │ 5m 23s │ [Détails] [Logs]             │
└──────────────────────────────────────────────────────────────┘

┌──────────────────────────────────────────────────────────────┐
│  DÉTAILS WORKFLOW (Modal/Drawer)                            │
├──────────────────────────────────────────────────────────────┤
│  Timeline des Nœuds LangGraph:                              │
│  ✅ prepare_environment (2m 15s)                            │
│  ✅ analyze_requirements (1m 30s)                           │
│  🔄 implement_task (en cours... 3m 12s)                     │
│  ⏳ run_tests (en attente)                                  │
│  ⏳ debug_code                                              │
│  ⏳ quality_assurance_automation                            │
│  ⏳ finalize_pr                                             │
│  ⏳ monday_validation                                        │
│                                                              │
│  Métriques:                                                  │
│  • Tokens utilisés: 15,234                                  │
│  • Coût estimé: $0.32                                       │
│  • Fichiers modifiés: 3                                     │
│  • Tentatives: 1/3                                          │
└──────────────────────────────────────────────────────────────┘


═══════════════════════════════════════════════════════════════════════════════
📝 3. GESTION DES TÂCHES
═══════════════════════════════════════════════════════════════════════════════

DONNÉES SOURCE: tasks, mv_dashboard_summary

┌──────────────────────────────────────────────────────────────┐
│  ACTIONS                                                     │
│  [+ Nouvelle Tâche] [📥 Import Monday] [⚙️ Config]          │
└──────────────────────────────────────────────────────────────┘

┌──────────────────────────────────────────────────────────────┐
│  TABLE: Tâches                                              │
├──────────────────────────────────────────────────────────────┤
│  ID | Titre | Status | Priorité | Repo | Date | Actions     │
│  #5678 │ Add login API │ completed │ High │ backend-api │   │
│  14/10/25 │ [Voir] [Relancer] [Delete]                      │
└──────────────────────────────────────────────────────────────┘

┌──────────────────────────────────────────────────────────────┐
│  STATISTIQUES PAR STATUS                                     │
│  Pending: 12 │ Processing: 5 │ Testing: 3 │ Completed: 234  │
└──────────────────────────────────────────────────────────────┘


═══════════════════════════════════════════════════════════════════════════════
🤖 4. IA & COÛTS
═══════════════════════════════════════════════════════════════════════════════

DONNÉES SOURCE: mv_ai_efficiency, mv_cost_analysis, ai_interactions

┌──────────────────────────────────────────────────────────────┐
│  COÛTS PAR PROVIDER (Pie Chart)                             │
│  Claude: $125.50 (65%) │ OpenAI: $67.20 (35%)              │
└──────────────────────────────────────────────────────────────┘

┌──────────────────────────────────────────────────────────────┐
│  TENDANCE COÛTS 30 JOURS (Area Chart)                       │
│  X: Jours │ Y: Coût USD                                     │
└──────────────────────────────────────────────────────────────┘

┌──────────────────────────────────────────────────────────────┐
│  PERFORMANCE PAR MODÈLE                                      │
├──────────────────────────────────────────────────────────────┤
│  Modèle | Appels | Tokens | Coût | Latence | Succès        │
│  claude-sonnet-3.5 │ 1,234 │ 2.5M │ $45.60 │ 2.3s │ 98.5% │
│  gpt-4o │ 567 │ 890K │ $12.30 │ 1.8s │ 99.1%              │
└──────────────────────────────────────────────────────────────┘

┌──────────────────────────────────────────────────────────────┐
│  COÛTS PAR NŒUD LANGGRAPH (Bar Chart)                       │
│  implement_task: $78.90 (41%)                                │
│  debug_code: $45.20 (23%)                                    │
│  analyze_requirements: $34.10 (18%)                          │
└──────────────────────────────────────────────────────────────┘


═══════════════════════════════════════════════════════════════════════════════
✅ 5. QUALITÉ CODE
═══════════════════════════════════════════════════════════════════════════════

DONNÉES SOURCE: mv_code_quality, test_results

┌──────────────────────────────────────────────────────────────┐
│  MÉTRIQUES GLOBALES                                          │
│  Coverage Moyen: 78.5% │ Tests Passés: 892/923 │ Issues: 12 │
└──────────────────────────────────────────────────────────────┘

┌──────────────────────────────────────────────────────────────┐
│  DISTRIBUTION COVERAGE (Donut Chart)                         │
│  Excellent (>80%): 45% │ Good (60-80%): 35% │ Fair: 15%     │
└──────────────────────────────────────────────────────────────┘

┌──────────────────────────────────────────────────────────────┐
│  TÂCHES PAR GRADE                                           │
├──────────────────────────────────────────────────────────────┤
│  Tâche | Repo | Tests | Coverage | Grade | Sécurité         │
│  Fix auth │ backend │ 45/47 │ 85.2% │ ✅ Excellent │ 0 issues │
│  Add API │ backend │ 12/15 │ 62.3% │ 🟡 Good │ 2 issues     │
└──────────────────────────────────────────────────────────────┘


═══════════════════════════════════════════════════════════════════════════════
🔀 6. PULL REQUESTS
═══════════════════════════════════════════════════════════════════════════════

DONNÉES SOURCE: pull_requests

┌──────────────────────────────────────────────────────────────┐
│  STATISTIQUES                                                │
│  Ouvertes: 8 │ Merged: 234 │ Fermées: 12 │ Taux: 95%       │
└──────────────────────────────────────────────────────────────┘

┌──────────────────────────────────────────────────────────────┐
│  TABLE: Pull Requests                                        │
├──────────────────────────────────────────────────────────────┤
│  PR# | Titre | Status | Repo | Branch | Date | Actions      │
│  #456 │ feat: add auth │ Open │ backend │ feature/auth │    │
│  14/10 │ [🔗 GitHub] [Merge] [Close]                         │
└──────────────────────────────────────────────────────────────┘


═══════════════════════════════════════════════════════════════════════════════
👤 7. VALIDATIONS HUMAINES
═══════════════════════════════════════════════════════════════════════════════

DONNÉES SOURCE: human_validations, human_validation_responses

┌──────────────────────────────────────────────────────────────┐
│  DEMANDES EN ATTENTE (Badge rouge avec compteur)            │
│  5 validations nécessitent votre attention                   │
└──────────────────────────────────────────────────────────────┘

┌──────────────────────────────────────────────────────────────┐
│  CARTE VALIDATION (Material Card Design)                    │
├──────────────────────────────────────────────────────────────┤
│  📋 Tâche #1234: "Implement user authentication"            │
│  🤖 IA: Claude Sonnet 3.5                                   │
│  📅 Soumis: 14/10/2025 15:30                                │
│                                                              │
│  ℹ️ Raison: Code généré nécessite validation avant PR       │
│                                                              │
│  📝 Changements:                                             │
│  • src/auth/login.py (+89 -12)                              │
│  • tests/test_auth.py (+45 -0)                              │
│  • requirements.txt (+1 -0)                                  │
│                                                              │
│  ✅ Tests: 45/45 passés (100%)                              │
│  📊 Coverage: 92.3%                                          │
│                                                              │
│  [✅ Approuver] [❌ Rejeter] [💬 Commenter] [📄 Diff]        │
└──────────────────────────────────────────────────────────────┘


═══════════════════════════════════════════════════════════════════════════════
🔗 8. WEBHOOKS & INTÉGRATIONS
═══════════════════════════════════════════════════════════════════════════════

DONNÉES SOURCE: mv_integration_health, webhook_events

┌──────────────────────────────────────────────────────────────┐
│  SANTÉ DES INTÉGRATIONS                                      │
│  Monday.com: 🟢 99.8% │ GitHub: 🟢 99.5% │ Celery: 🟢 100%  │
└──────────────────────────────────────────────────────────────┘

┌──────────────────────────────────────────────────────────────┐
│  GRAPHIQUE: Webhooks Reçus (Bar Chart par heure)            │
│  Dernières 24h │ Processed: 456 │ Failed: 3                 │
└──────────────────────────────────────────────────────────────┘

┌──────────────────────────────────────────────────────────────┐
│  LOG WEBHOOKS (Derniers événements)                         │
├──────────────────────────────────────────────────────────────┤
│  Timestamp | Source | Type | Status | Durée | Actions       │
│  15:45:23 │ Monday │ item_created │ ✅ Success │ 0.5s │ [Voir]│
│  15:44:12 │ Monday │ status_updated │ ✅ Success │ 0.3s │     │
└──────────────────────────────────────────────────────────────┘


═══════════════════════════════════════════════════════════════════════════════
📊 9. LOGS & DEBUGGING
═══════════════════════════════════════════════════════════════════════════════

DONNÉES SOURCE: application_logs

┌──────────────────────────────────────────────────────────────┐
│  FILTRES                                                     │
│  [Level: Tous ▼] [Component: Tous ▼] [🔍 Search...]        │
│  [📅 Date Range] [⬇️ Export CSV]                            │
└──────────────────────────────────────────────────────────────┘

┌──────────────────────────────────────────────────────────────┐
│  TABLE: Logs (Real-time avec WebSocket)                     │
├──────────────────────────────────────────────────────────────┤
│  Time | Level | Component | Action | Message                │
│  15:45:23 │ 🔵 INFO │ workflow │ step_completed │ Node...   │
│  15:45:20 │ 🟡 WARN │ celery │ retry │ Task retrying...     │
│  15:44:58 │ 🔴 ERROR │ ai_claude │ api_error │ Timeout...   │
└──────────────────────────────────────────────────────────────┘


═══════════════════════════════════════════════════════════════════════════════
🛠️ 10. CONFIGURATION SYSTÈME
═══════════════════════════════════════════════════════════════════════════════

DONNÉES SOURCE: system_config, api_keys

┌──────────────────────────────────────────────────────────────┐
│  ONGLETS: [⚙️ Général] [🔑 API Keys] [🤖 IA] [🔔 Alertes]  │
└──────────────────────────────────────────────────────────────┘

┌──────────────────────────────────────────────────────────────┐
│  ⚙️ PARAMÈTRES GÉNÉRAUX                                      │
├──────────────────────────────────────────────────────────────┤
│  Timeout Workflow: [3600] secondes                           │
│  Max Retry: [3] tentatives                                   │
│  Auto-merge PR: [✓] Activé                                   │
│  Debug Mode: [□] Désactivé                                   │
│  [💾 Sauvegarder]                                            │
└──────────────────────────────────────────────────────────────┘

┌──────────────────────────────────────────────────────────────┐
│  🔑 API KEYS                                                 │
├──────────────────────────────────────────────────────────────┤
│  Monday.com: ••••••••••••3kL9 [🔄 Rotate] [✏️ Edit]         │
│  GitHub: ••••••••••••m2Aq [🔄 Rotate] [✏️ Edit]             │
│  Claude: ••••••••••••7pZx [🔄 Rotate] [✏️ Edit]             │
│  OpenAI: ••••••••••••nR4k [🔄 Rotate] [✏️ Edit]             │
└──────────────────────────────────────────────────────────────┘

┌──────────────────────────────────────────────────────────────┐
│  🤖 CONFIGURATION IA                                         │
├──────────────────────────────────────────────────────────────┤
│  Provider par défaut: [Claude ▼]                             │
│  Modèle: [claude-sonnet-3.5 ▼]                              │
│  Fallback: [OpenAI GPT-4o ▼]                                │
│  Budget journalier: [$50.00]                                 │
│  [💾 Sauvegarder]                                            │
└──────────────────────────────────────────────────────────────┘


═══════════════════════════════════════════════════════════════════════════════
🎨 DESIGN SYSTEM
═══════════════════════════════════════════════════════════════════════════════

COULEURS:
- Primary: Blue (#3B82F6)
- Success: Green (#10B981)
- Warning: Orange (#F59E0B)
- Error: Red (#EF4444)
- Info: Purple (#8B5CF6)

COMPOSANTS:
- Cards: Shadow-md, rounded-lg, padding 1.5rem
- Buttons: rounded-md, shadow-sm, hover:shadow
- Tables: Stripe rows, hover effect, sortable headers
- Charts: Recharts library (responsive)
- Icons: Lucide React
- Toasts: Radix UI Toast

AUTO-REFRESH:
- Dashboard: 5 secondes
- Workflows: 5 secondes
- Logs: Real-time WebSocket
- Autres: 30 secondes


═══════════════════════════════════════════════════════════════════════════════
🔌 API ENDPOINTS (Backend FastAPI)
═══════════════════════════════════════════════════════════════════════════════

GET  /api/dashboard/stats              → Statistiques dashboard
GET  /api/workflows                     → Liste workflows
GET  /api/workflows/{id}                → Détails workflow
POST /api/workflows/{id}/cancel         → Annuler workflow
GET  /api/tasks                         → Liste tâches
POST /api/tasks                         → Créer tâche
PUT  /api/tasks/{id}                    → Modifier tâche
GET  /api/ai/costs                      → Coûts IA
GET  /api/ai/performance                → Performance IA
GET  /api/quality/summary               → Résumé qualité
GET  /api/prs                           → Pull requests
GET  /api/validations/pending           → Validations en attente
POST /api/validations/{id}/approve      → Approuver validation
POST /api/validations/{id}/reject       → Rejeter validation
GET  /api/webhooks/health               → Santé webhooks
GET  /api/logs                          → Logs système
GET  /api/config                        → Configuration
PUT  /api/config                        → Update config
WS   /monitoring/ws                     → WebSocket temps réel


═══════════════════════════════════════════════════════════════════════════════
🚀 DÉMARRAGE RAPIDE
═══════════════════════════════════════════════════════════════════════════════

1. BACKEND (déjà existant):
   cd /Users/rehareharanaivo/Desktop/AI-Agent
   source venv/bin/activate
   uvicorn main:app --reload --port 8000

2. FRONTEND (à créer):
   cd admin-interface
   npm install
   npm run dev
   → Interface accessible sur http://localhost:3000

3. BASE DE DONNÉES:
   Utilise les vues matérialisées déjà créées dans view2.sql
   Refresh automatique via cron ou triggers


═══════════════════════════════════════════════════════════════════════════════
📦 STRUCTURE FICHIERS INTERFACE
═══════════════════════════════════════════════════════════════════════════════

admin-interface/
├── src/
│   ├── components/
│   │   ├── Dashboard/
│   │   │   ├── MetricsCards.tsx
│   │   │   ├── ActivityChart.tsx
│   │   │   └── ActiveWorkflows.tsx
│   │   ├── Workflows/
│   │   │   ├── WorkflowList.tsx
│   │   │   └── WorkflowDetails.tsx
│   │   ├── Tasks/
│   │   │   ├── TaskList.tsx
│   │   │   └── TaskForm.tsx
│   │   ├── AI/
│   │   │   ├── CostAnalysis.tsx
│   │   │   └── PerformanceMetrics.tsx
│   │   ├── Quality/
│   │   │   └── QualityDashboard.tsx
│   │   ├── PRs/
│   │   │   └── PullRequestList.tsx
│   │   ├── Validations/
│   │   │   └── ValidationCard.tsx
│   │   ├── Webhooks/
│   │   │   └── WebhookHealth.tsx
│   │   ├── Logs/
│   │   │   └── LogViewer.tsx
│   │   ├── Config/
│   │   │   └── ConfigPanel.tsx
│   │   ├── Layout/
│   │   │   ├── Sidebar.tsx
│   │   │   ├── Header.tsx
│   │   │   └── Layout.tsx
│   │   └── ui/
│   │       ├── Button.tsx
│   │       ├── Card.tsx
│   │       ├── Table.tsx
│   │       └── ...shadcn components
│   ├── pages/
│   │   ├── Dashboard.tsx
│   │   ├── Workflows.tsx
│   │   ├── Tasks.tsx
│   │   ├── AI.tsx
│   │   ├── Quality.tsx
│   │   ├── PullRequests.tsx
│   │   ├── Validations.tsx
│   │   ├── Webhooks.tsx
│   │   ├── Logs.tsx
│   │   └── Config.tsx
│   ├── hooks/
│   │   ├── useWebSocket.ts
│   │   ├── useStats.ts
│   │   └── useApi.ts
│   ├── services/
│   │   └── api.ts
│   ├── types/
│   │   └── index.ts
│   └── App.tsx

═══════════════════════════════════════════════════════════════════════════════
✅ FONCTIONNALITÉS PRINCIPALES PAR PAGE
═══════════════════════════════════════════════════════════════════════════════

✓ Dashboard: Vue temps réel, KPIs, graphiques, alertes
✓ Workflows: Monitoring LangGraph, timeline nœuds, métriques détaillées
✓ Tâches: CRUD complet, import Monday, statistiques par status
✓ IA & Coûts: Analyse coûts par provider/modèle/nœud, performance
✓ Qualité: Coverage, tests, sécurité, grades
✓ PRs: Liste, stats, liens GitHub, actions merge/close
✓ Validations: Cards interactives, approve/reject, diff viewer
✓ Webhooks: Santé intégrations, logs événements, graphiques
✓ Logs: Filtrage avancé, real-time, export CSV
✓ Config: Paramètres système, API keys, IA, alertes

═══════════════════════════════════════════════════════════════════════════════
FIN DU DOCUMENT
═══════════════════════════════════════════════════════════════════════════════
