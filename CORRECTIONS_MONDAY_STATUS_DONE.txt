================================================================================
CORRECTIONS - MISE √Ä JOUR STATUT MONDAY.COM "DONE" APR√àS MERGE
================================================================================
Date: 5 octobre 2025
Probl√®me: Le statut "Done" n'est pas toujours mis √† jour dans Monday.com apr√®s 
          un merge r√©ussi de la Pull Request.

================================================================================
√âTAPE 1 : CORRIGER LA PRIORIT√â DU STATUT
================================================================================
Fichier: nodes/update_node.py
Fonction: _determine_final_status()
Ligne: ~205

Action:
1. D√©placer la v√©rification de "merge_successful" EN PREMIER (avant tout)
2. Forcer le retour de ("Done", "success") si merge_successful=True
3. Supprimer la v√©rification redondante de merge_successful plus bas

Code √† modifier:
```python
def _determine_final_status(state: GraphState) -> tuple[str, str]:
    # AJOUT EN PREMIER (avant toute autre v√©rification)
    if state["results"] and state["results"].get("merge_successful", False):
        logger.info("üéâ Merge r√©ussi d√©tect√© - Statut forc√© √† 'Done'")
        return "Done", "success"
    
    # V√©rifier si un statut explicite a √©t√© d√©fini
    if state["results"] and "monday_final_status" in state["results"]:
        explicit_status = state["results"]["monday_final_status"]
        logger.info(f"üìå Utilisation du statut explicite: {explicit_status}")
        
        if explicit_status == "Done":
            return "Done", "success"
        # ... reste du code ...
```

================================================================================
√âTAPE 2 : GARANTIR LA PERSISTANCE APR√àS MERGE
================================================================================
Fichier: nodes/merge_node.py
Fonction: merge_after_validation()
Ligne: ~175

Action:
1. Ajouter "workflow_success": True
2. D√©finir explicitement state["status"] = WorkflowStatus.COMPLETED
3. Ajouter log de debug pour tra√ßabilit√©

Code √† ajouter dans le bloc "if merge_result.get("success", False)":
```python
# APR√àS les lignes existantes:
state["results"]["merge_successful"] = True
state["results"]["merge_commit"] = merge_commit
state["results"]["monday_final_status"] = "Done"

# AJOUTER CES LIGNES:
state["results"]["workflow_success"] = True
state["status"] = WorkflowStatus.COMPLETED

# Log pour debug
logger.info(f"üìä √âtat apr√®s merge - merge_successful={state['results']['merge_successful']}, final_status={state['results']['monday_final_status']}")
```

================================================================================
√âTAPE 3 : V√âRIFIER LE MAPPING DES STATUTS
================================================================================
Fichier: tools/monday_tool.py
Classe: MondayTool
Variable: STATUS_MAPPING

Action:
V√©rifier que ces mappings existent (ajouter si manquants):

```python
STATUS_MAPPING = {
    # ... mappings existants ...
    "done": "Done",
    "Done": "Done",  # Mapping identit√© important
    "completed": "Done",
}
```

================================================================================
√âTAPE 4 : AJOUTER VALIDATION CRITIQUE
================================================================================
Fichier: nodes/update_node.py
Fonction: update_monday()
Ligne: ~95 (apr√®s _determine_final_status)

Action:
Ajouter une v√©rification de coh√©rence avec correction automatique

Code √† ins√©rer:
```python
# APR√àS cette ligne:
final_status, success_level = _determine_final_status(state)

# AJOUTER CE BLOC:
# Validation critique: v√©rifier coh√©rence
if state["results"].get("merge_successful", False) and final_status != "Done":
    logger.error(f"‚ùå INCOH√âRENCE: merge_successful=True mais final_status='{final_status}'")
    logger.warning("üîß Correction automatique - For√ßage √† 'Done'")
    final_status = "Done"
    success_level = "success"
    state["results"]["status_corrected"] = True
```

================================================================================
√âTAPE 5 : ENRICHIR LE COMMENTAIRE MONDAY
================================================================================
Fichier: nodes/update_node.py
Fonction: update_monday()
Ligne: ~105 (apr√®s g√©n√©ration du commentaire)

Action:
Ajouter info de merge dans le commentaire Monday.com

Code √† ins√©rer:
```python
# APR√àS:
completion_comment = await _generate_completion_comment(state, success_level)

# AJOUTER:
if state["results"].get("merge_successful", False):
    merge_info = f"\n\n‚úÖ **Pull Request merg√©e avec succ√®s**\n"
    if state["results"].get("merge_commit"):
        merge_info += f"- **Commit de merge**: `{state['results']['merge_commit']}`\n"
    if state["results"].get("merge_commit_url"):
        merge_info += f"- **Lien**: {state['results']['merge_commit_url']}\n"
    completion_comment += merge_info
```

================================================================================
√âTAPE 6 : AJOUTER V√âRIFICATION POST-UPDATE
================================================================================
Fichier: nodes/update_node.py
Fonction: update_monday()
Ligne: ~140 (dans le bloc if update_result.get("success"))

Action:
V√©rifier que le statut "Done" a bien √©t√© appliqu√©

Code √† ajouter:
```python
if update_result.get("success", False):
    logger.info("‚úÖ Monday.com mis √† jour avec succ√®s")
    
    # AJOUTER CE BLOC:
    if state["results"].get("merge_successful", False):
        if final_status != "Done":
            logger.error(f"‚ùå ERREUR: Merge r√©ussi mais statut='{final_status}'")
            state["results"]["ai_messages"].append(
                f"‚ö†Ô∏è Avertissement: Statut Monday='{final_status}' (attendu 'Done')"
            )
        else:
            logger.info("‚úÖ V√©rification: Statut 'Done' correctement appliqu√©")
            state["results"]["ai_messages"].append(
                "‚úÖ Statut Monday.com mis √† jour : Done"
            )
```

================================================================================
√âTAPE 7 : CR√âER TEST DE R√âGRESSION
================================================================================
Fichier: tests/test_monday_status_after_merge.py (NOUVEAU)

Action:
Cr√©er un nouveau fichier de test

Code complet:
```python
"""Test de r√©gression pour statut Monday apr√®s merge."""
import pytest
from models.state import GraphState
from models.schemas import TaskRequest, WorkflowStatus
from nodes.update_node import _determine_final_status

@pytest.mark.asyncio
async def test_status_done_after_successful_merge():
    """V√©rifie que le statut est 'Done' apr√®s merge r√©ussi."""
    state = GraphState(
        task=TaskRequest(
            task_id="test_merge_123",
            title="Test merge status",
            task_type="feature",
            priority="normal"
        ),
        status=WorkflowStatus.COMPLETED,
        results={
            "merge_successful": True,
            "merge_commit": "abc123",
            "monday_final_status": "Done"
        }
    )
    
    final_status, success_level = _determine_final_status(state)
    
    assert final_status == "Done", f"Attendu 'Done', re√ßu '{final_status}'"
    assert success_level == "success"
    print("‚úÖ Test r√©ussi: Statut 'Done' apr√®s merge")

@pytest.mark.asyncio
async def test_merge_priority_over_explicit_status():
    """V√©rifie que merge_successful a priorit√© absolue."""
    state = GraphState(
        task=TaskRequest(
            task_id="test_priority_456",
            title="Test priority",
            task_type="feature",
            priority="normal"
        ),
        status=WorkflowStatus.COMPLETED,
        results={
            "merge_successful": True,
            "monday_final_status": "Working on it"  # Conflit intentionnel
        }
    )
    
    final_status, _ = _determine_final_status(state)
    
    assert final_status == "Done", "merge_successful doit avoir priorit√©"
    print("‚úÖ Test r√©ussi: Priorit√© de merge_successful")
```

================================================================================
√âTAPE 8 : TESTER LES CORRECTIONS
================================================================================

1. Lancer le test de r√©gression:
   ```bash
   pytest tests/test_monday_status_after_merge.py -v
   ```

2. V√©rifier les logs lors d'un merge r√©el:
   - Chercher: "üéâ Merge r√©ussi d√©tect√© - Statut forc√© √† 'Done'"
   - Chercher: "‚úÖ V√©rification: Statut 'Done' correctement appliqu√©"

3. V√©rifier dans Monday.com que le statut est bien "Done"

================================================================================
√âTAPE 9 : CHECKLIST DE VALIDATION
================================================================================

Avant de consid√©rer la correction termin√©e, v√©rifier:

‚ñ° merge_successful=True ‚Üí Statut forc√© √† "Done" (prioritaire)
‚ñ° Log "Merge r√©ussi d√©tect√© - Statut forc√© √† 'Done'" pr√©sent
‚ñ° Commentaire Monday enrichi avec infos de merge
‚ñ° V√©rification post-update dans les logs
‚ñ° Tests de r√©gression passent (2/2)
‚ñ° Aucune incoh√©rence entre merge_successful et final_status
‚ñ° Statut "Done" visible dans Monday.com apr√®s merge

================================================================================
ORDRE D'APPLICATION DES CORRECTIONS
================================================================================

1. √âTAPE 1 (update_node.py - priorit√©) ‚Üê CRITIQUE
2. √âTAPE 2 (merge_node.py - persistance)
3. √âTAPE 4 (update_node.py - validation) ‚Üê CRITIQUE
4. √âTAPE 3 (monday_tool.py - mapping)
5. √âTAPE 5 (update_node.py - commentaire)
6. √âTAPE 6 (update_node.py - v√©rification)
7. √âTAPE 7 (cr√©er fichier de test)
8. √âTAPE 8 (tester)
9. √âTAPE 9 (valider)

================================================================================
NOTES IMPORTANTES
================================================================================

‚Ä¢ Les √âTAPES 1 et 4 sont CRITIQUES - √† faire en priorit√©
‚Ä¢ Tester apr√®s chaque √©tape critique
‚Ä¢ Backup des fichiers avant modification
‚Ä¢ V√©rifier les imports en haut des fichiers (logger, WorkflowStatus, etc.)
‚Ä¢ Relancer Celery apr√®s modifications pour appliquer les changements

================================================================================
COMMANDES UTILES
================================================================================

# Red√©marrer Celery apr√®s modifications
./restart_celery_clean.py

# Tester les corrections
pytest tests/test_monday_status_after_merge.py -v -s

# V√©rifier les logs en temps r√©el
tail -f logs/workflow.log | grep -E "(merge|Done|monday)"

# Chercher les incoh√©rences dans les logs existants
grep -E "merge_successful.*True" logs/*.log | grep -v "Done"

================================================================================
FIN DU DOCUMENT
================================================================================
