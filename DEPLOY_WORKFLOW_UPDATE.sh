#!/bin/bash

# Script de d√©ploiement - Nouveau Workflow depuis Updates Monday
# Date: 11 octobre 2025

set -e  # Arr√™ter en cas d'erreur

# Couleurs
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}============================================${NC}"
echo -e "${BLUE}üöÄ D√âPLOIEMENT WORKFLOW UPDATE SYSTEM${NC}"
echo -e "${BLUE}============================================${NC}"
echo ""

# ============================================================================
# √âTAPE 1: V√©rifications pr√©-d√©ploiement
# ============================================================================

echo -e "${YELLOW}[1/6] V√©rifications pr√©-d√©ploiement...${NC}"

# V√©rifier que nous sommes dans le bon r√©pertoire
if [ ! -f "main.py" ]; then
    echo -e "${RED}‚ùå Erreur: Ex√©cutez ce script depuis la racine du projet${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ R√©pertoire correct${NC}"

# V√©rifier Python
if ! command -v python3 &> /dev/null; then
    echo -e "${RED}‚ùå Python 3 n'est pas install√©${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Python 3 disponible${NC}"

# V√©rifier que les nouveaux fichiers existent
FILES_TO_CHECK=(
    "services/update_analyzer_service.py"
    "services/workflow_trigger_service.py"
    "data/migration_task_update_triggers.sql"
    "tests/test_update_workflow_trigger.py"
    "validate_update_workflow.py"
)

for file in "${FILES_TO_CHECK[@]}"; do
    if [ ! -f "$file" ]; then
        echo -e "${RED}‚ùå Fichier manquant: $file${NC}"
        exit 1
    fi
done

echo -e "${GREEN}‚úÖ Tous les fichiers pr√©sents${NC}"
echo ""

# ============================================================================
# √âTAPE 2: Appliquer la migration SQL
# ============================================================================

echo -e "${YELLOW}[2/6] Application de la migration SQL...${NC}"

# Demander les informations de connexion DB
echo -e "${BLUE}Veuillez fournir les informations de connexion √† la base de donn√©es:${NC}"
read -p "H√¥te (localhost): " DB_HOST
DB_HOST=${DB_HOST:-localhost}

read -p "Port (5432): " DB_PORT
DB_PORT=${DB_PORT:-5432}

read -p "Nom de la base: " DB_NAME
read -p "Utilisateur: " DB_USER

# V√©rifier que psql est disponible
if ! command -v psql &> /dev/null; then
    echo -e "${RED}‚ùå psql n'est pas install√©${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è  Appliquez manuellement: psql -U $DB_USER -d $DB_NAME -f data/migration_task_update_triggers.sql${NC}"
    read -p "Appuyez sur Entr√©e quand c'est fait..."
else
    echo -e "${BLUE}Application de la migration...${NC}"
    PGPASSWORD="" psql -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USER" -d "$DB_NAME" -f data/migration_task_update_triggers.sql
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Migration SQL appliqu√©e avec succ√®s${NC}"
    else
        echo -e "${RED}‚ùå Erreur lors de l'application de la migration${NC}"
        echo -e "${YELLOW}‚ö†Ô∏è  V√©rifiez les erreurs ci-dessus et r√©essayez${NC}"
        exit 1
    fi
fi

echo ""

# ============================================================================
# √âTAPE 3: Installer les d√©pendances (si n√©cessaire)
# ============================================================================

echo -e "${YELLOW}[3/6] V√©rification des d√©pendances Python...${NC}"

# Les d√©pendances sont d√©j√† dans requirements.txt
echo -e "${BLUE}Les d√©pendances sont d√©j√† dans requirements.txt${NC}"
echo -e "${GREEN}‚úÖ Aucune nouvelle d√©pendance requise${NC}"
echo ""

# ============================================================================
# √âTAPE 4: Ex√©cuter les tests
# ============================================================================

echo -e "${YELLOW}[4/6] Ex√©cution des tests...${NC}"

# Tests unitaires
echo -e "${BLUE}Ex√©cution des tests unitaires...${NC}"
if command -v pytest &> /dev/null; then
    pytest tests/test_update_workflow_trigger.py -v
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Tests unitaires passent${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Certains tests ont √©chou√© (continuez uniquement si attendu)${NC}"
        read -p "Continuer malgr√© les erreurs? (y/N): " CONTINUE
        if [ "$CONTINUE" != "y" ] && [ "$CONTINUE" != "Y" ]; then
            exit 1
        fi
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  pytest n'est pas install√© - tests ignor√©s${NC}"
fi

echo ""

# Script de validation
echo -e "${BLUE}Ex√©cution du script de validation...${NC}"
python3 validate_update_workflow.py

if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Validation r√©ussie${NC}"
else
    echo -e "${RED}‚ùå Validation √©chou√©e${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è  Corrigez les erreurs avant de continuer${NC}"
    exit 1
fi

echo ""

# ============================================================================
# √âTAPE 5: V√©rifier les cl√©s API
# ============================================================================

echo -e "${YELLOW}[5/6] V√©rification des cl√©s API LLM...${NC}"

if [ -z "$ANTHROPIC_API_KEY" ] && [ -z "$OPENAI_API_KEY" ]; then
    echo -e "${RED}‚ùå Aucune cl√© API LLM configur√©e${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è  Configurez ANTHROPIC_API_KEY ou OPENAI_API_KEY${NC}"
    echo ""
    echo -e "${BLUE}Exemple:${NC}"
    echo "export ANTHROPIC_API_KEY='sk-ant-...'"
    echo ""
    read -p "Voulez-vous continuer sans cl√© API? (y/N): " CONTINUE
    if [ "$CONTINUE" != "y" ] && [ "$CONTINUE" != "Y" ]; then
        exit 1
    fi
else
    if [ -n "$ANTHROPIC_API_KEY" ]; then
        echo -e "${GREEN}‚úÖ ANTHROPIC_API_KEY configur√©e${NC}"
    fi
    if [ -n "$OPENAI_API_KEY" ]; then
        echo -e "${GREEN}‚úÖ OPENAI_API_KEY configur√©e${NC}"
    fi
fi

echo ""

# ============================================================================
# √âTAPE 6: Instructions de red√©marrage
# ============================================================================

echo -e "${YELLOW}[6/6] Instructions de red√©marrage des services${NC}"
echo ""
echo -e "${BLUE}Pour que les changements prennent effet, red√©marrez:${NC}"
echo ""
echo -e "1. ${YELLOW}FastAPI:${NC}"
echo "   - Si en mode dev: Le rechargement automatique devrait suffire"
echo "   - Si en prod: Red√©marrez le processus FastAPI"
echo ""
echo -e "2. ${YELLOW}Celery Workers:${NC}"
echo "   - Arr√™tez les workers actuels: Ctrl+C ou kill"
echo "   - Red√©marrez: celery -A services.celery_app worker --loglevel=info"
echo ""

read -p "Appuyez sur Entr√©e une fois les services red√©marr√©s..."

# ============================================================================
# FINALISATION
# ============================================================================

echo ""
echo -e "${BLUE}============================================${NC}"
echo -e "${GREEN}‚úÖ D√âPLOIEMENT TERMIN√â AVEC SUCC√àS${NC}"
echo -e "${BLUE}============================================${NC}"
echo ""
echo -e "${GREEN}Le syst√®me est maintenant op√©rationnel !${NC}"
echo ""
echo -e "${BLUE}üìö Prochaines √©tapes:${NC}"
echo ""
echo "1. Test manuel:"
echo "   - Aller sur Monday.com"
echo "   - Trouver une t√¢che termin√©e (statut 'Done')"
echo "   - Poster: 'Bonjour, pouvez-vous ajouter un export CSV ?'"
echo "   - V√©rifier les logs"
echo ""
echo "2. Monitoring:"
echo "   tail -f logs/application.log | grep -E '(analyse|trigger|workflow)'"
echo ""
echo "3. V√©rification DB:"
echo "   SELECT * FROM task_update_triggers ORDER BY created_at DESC LIMIT 5;"
echo ""
echo -e "${BLUE}üìñ Documentation:${NC}"
echo "   - GUIDE_TEST_NOUVEAU_WORKFLOW_UPDATE.md"
echo "   - RAPPORT_IMPLEMENTATION_WORKFLOW_UPDATE.md"
echo "   - IMPLEMENTATION_COMPLETE_RESUME.md"
echo ""
echo -e "${GREEN}üéâ Bon lancement !${NC}"
echo ""

