"""Router pour la validation humaine des codes g√©n√©r√©s."""

from typing import List, Optional
from datetime import datetime
from fastapi import APIRouter, HTTPException, status, Query
from pydantic import BaseModel

from models.schemas import (
    HumanValidationRequest,
    HumanValidationResponse, 
    HumanValidationStatus,
    HumanValidationSummary
)
from services.human_validation_service import validation_service
from utils.logger import get_logger
from config.langsmith_config import langsmith_config

logger = get_logger(__name__)

# Cr√©er le router
human_validation_router = APIRouter()


# Mod√®les de requ√™te/r√©ponse pour l'API
class ValidationApprovalRequest(BaseModel):
    """Requ√™te d'approbation de validation."""
    validation_id: str
    comments: Optional[str] = None
    approval_notes: Optional[str] = None
    validated_by: Optional[str] = None


class ValidationRejectionRequest(BaseModel):
    """Requ√™te de rejet de validation."""
    validation_id: str
    comments: str  # Obligatoire pour expliquer le rejet
    suggested_changes: Optional[str] = None
    validated_by: Optional[str] = None


class ValidationListResponse(BaseModel):
    """R√©ponse de liste des validations."""
    validations: List[HumanValidationSummary]
    total_count: int
    pending_count: int
    expired_count: int


@human_validation_router.get("/pending", response_model=ValidationListResponse)
async def get_pending_validations(
    limit: int = Query(50, ge=1, le=100, description="Nombre maximum de validations √† retourner"),
    offset: int = Query(0, ge=0, description="D√©calage pour la pagination"),
    include_expired: bool = Query(False, description="Inclure les validations expir√©es")
):
    """
    R√©cup√®re la liste des validations en attente.
    
    Args:
        limit: Nombre maximum de validations √† retourner
        offset: D√©calage pour la pagination
        include_expired: Inclure les validations expir√©es
        
    Returns:
        Liste des validations avec m√©tadonn√©es
    """
    logger.info(f"üìã R√©cup√©ration des validations en attente (limit={limit}, offset={offset})")
    
    try:
        # R√©cup√©rer les validations via le service
        all_validations = await validation_service.list_pending_validations(include_expired)
        
        # Pagination
        total_count = len(all_validations)
        pending_count = len([v for v in all_validations if v.status == HumanValidationStatus.PENDING])
        expired_count = len([v for v in all_validations if v.status == HumanValidationStatus.EXPIRED])
        
        paginated_validations = all_validations[offset:offset + limit]
        
        return ValidationListResponse(
            validations=paginated_validations,
            total_count=total_count,
            pending_count=pending_count,
            expired_count=expired_count
        )
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la r√©cup√©ration des validations: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Erreur lors de la r√©cup√©ration des validations: {str(e)}"
        )


@human_validation_router.get("/{validation_id}", response_model=HumanValidationRequest)
async def get_validation_details(validation_id: str):
    """
    R√©cup√®re les d√©tails d'une validation sp√©cifique.
    
    Args:
        validation_id: ID de la validation
        
    Returns:
        D√©tails complets de la validation
    """
    logger.info(f"üìÑ R√©cup√©ration d√©tails validation: {validation_id}")
    
    validation = await validation_service.get_validation_by_id(validation_id)
    
    if not validation:
        logger.warning(f"‚ö†Ô∏è Validation non trouv√©e: {validation_id}")
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail=f"Validation {validation_id} non trouv√©e"
        )
    
    # V√©rifier si expir√©e
    if validation.expires_at and validation.expires_at < datetime.now():
        logger.warning(f"‚è∞ Validation expir√©e: {validation_id}")
        raise HTTPException(
            status_code=status.HTTP_410_GONE,
            detail=f"Validation {validation_id} expir√©e"
        )
    
    return validation


@human_validation_router.post("/{validation_id}/approve", response_model=dict)
async def approve_validation(validation_id: str, request: ValidationApprovalRequest):
    """
    Approuve une validation humaine.
    
    Args:
        validation_id: ID de la validation
        request: Donn√©es d'approbation
        
    Returns:
        Confirmation de l'approbation
    """
    logger.info(f"‚úÖ Approbation validation: {validation_id}")
    
    # V√©rifier que la validation existe
    validation = await validation_service.get_validation_by_id(validation_id)
    if not validation:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail=f"Validation {validation_id} non trouv√©e"
        )
    
    # V√©rifier l'expiration
    if validation.expires_at and validation.expires_at < datetime.now():
        raise HTTPException(
            status_code=status.HTTP_410_GONE,
            detail=f"Validation {validation_id} expir√©e"
        )
    
    try:
        # Cr√©er la r√©ponse d'approbation
        response = HumanValidationResponse(
            validation_id=validation_id,
            status=HumanValidationStatus.APPROVED,
            comments=request.comments,
            approval_notes=request.approval_notes,
            validated_by=request.validated_by,
            should_merge=True,
            should_continue_workflow=True
        )
        
        # Soumettre la r√©ponse
        success = await validation_service.submit_validation_response(validation_id, response)
        
        if not success:
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail="Erreur lors de la soumission de l'approbation"
            )
        
        # Tracer avec LangSmith
        if langsmith_config.client:
            try:
                langsmith_config.client.create_run(
                    name="human_validation_approved",
                    run_type="tool",
                    inputs={
                        "validation_id": validation_id,
                        "task_title": validation.task_title,
                        "validated_by": request.validated_by
                    },
                    outputs={
                        "status": "approved",
                        "has_comments": bool(request.comments),
                        "should_merge": True
                    },
                    extra={
                        "workflow_id": validation.workflow_id,
                        "human_validation": True,
                        "action": "approve"
                    }
                )
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Erreur LangSmith tracing: {e}")
        
        logger.info(f"‚úÖ Validation {validation_id} approuv√©e par {request.validated_by}")
        
        return {
            "message": f"Validation {validation_id} approuv√©e avec succ√®s",
            "validation_id": validation_id,
            "status": "approved",
            "validated_by": request.validated_by,
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'approbation: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Erreur lors de l'approbation: {str(e)}"
        )


@human_validation_router.post("/{validation_id}/reject", response_model=dict)
async def reject_validation(validation_id: str, request: ValidationRejectionRequest):
    """
    Rejette une validation humaine.
    
    Args:
        validation_id: ID de la validation
        request: Donn√©es de rejet
        
    Returns:
        Confirmation du rejet
    """
    logger.info(f"‚ùå Rejet validation: {validation_id}")
    
    # V√©rifier que la validation existe
    validation = await validation_service.get_validation_by_id(validation_id)
    if not validation:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail=f"Validation {validation_id} non trouv√©e"
        )
    
    try:
        # Cr√©er la r√©ponse de rejet
        response = HumanValidationResponse(
            validation_id=validation_id,
            status=HumanValidationStatus.REJECTED,
            comments=request.comments,
            suggested_changes=request.suggested_changes,
            validated_by=request.validated_by,
            should_merge=False,
            should_continue_workflow=True  # Continuer pour update Monday
        )
        
        # Soumettre la r√©ponse
        success = await validation_service.submit_validation_response(validation_id, response)
        
        if not success:
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail="Erreur lors de la soumission du rejet"
            )
        
        # Tracer avec LangSmith
        if langsmith_config.client:
            try:
                langsmith_config.client.create_run(
                    name="human_validation_rejected",
                    run_type="tool",
                    inputs={
                        "validation_id": validation_id,
                        "task_title": validation.task_title,
                        "validated_by": request.validated_by,
                        "rejection_reason": request.comments
                    },
                    outputs={
                        "status": "rejected",
                        "has_suggestions": bool(request.suggested_changes),
                        "should_merge": False
                    },
                    extra={
                        "workflow_id": validation.workflow_id,
                        "human_validation": True,
                        "action": "reject"
                    }
                )
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Erreur LangSmith tracing: {e}")
        
        logger.info(f"‚ùå Validation {validation_id} rejet√©e par {request.validated_by}")
        
        return {
            "message": f"Validation {validation_id} rejet√©e",
            "validation_id": validation_id,
            "status": "rejected",
            "validated_by": request.validated_by,
            "comments": request.comments,
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du rejet: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Erreur lors du rejet: {str(e)}"
        )


@human_validation_router.get("/stats/summary", response_model=dict)
async def get_validation_stats():
    """
    R√©cup√®re les statistiques des validations.
    
    Returns:
        Statistiques globales des validations
    """
    logger.info("üìä R√©cup√©ration statistiques validations")
    
    try:
        # Utiliser la fonction de statistiques du service
        stats = await validation_service.get_validation_stats()
        return stats
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la r√©cup√©ration des statistiques: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Erreur lors de la r√©cup√©ration des statistiques: {str(e)}"
        ) 