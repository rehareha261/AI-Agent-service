# ================================
# RabbitMQ Configuration pour AI-Agent
# ================================

# Listeners (AMQP protocol)
listeners.tcp.default = 5672

# Management plugin
management.tcp.port = 15672
management.tcp.ip = 0.0.0.0

# Virtual hosts
default_vhost = ai_agent
default_user = ai_agent_user
default_pass = secure_password_123

# ================================
# PERFORMANCE TUNING
# ================================

# Memory and disk management
vm_memory_high_watermark.relative = 0.6
disk_free_limit.relative = 1.0

# Queue and message limits
default_user_tags.administrator = true

# Connection and channel limits
channel_max = 2047
frame_max = 131072
heartbeat = 60

# ================================
# LOGGING CONFIGURATION
# ================================

# Log levels
log.console = true
log.console.level = info
log.file = true
log.file.level = info
log.dir = /var/log/rabbitmq

# Connection logging
log.connection.level = info

# ================================
# CLUSTERING (pour production)
# ================================

# Node name
cluster_formation.peer_discovery_backend = classic_config

# ================================
# SECURITY
# ================================

# TLS (optionnel pour production)
# ssl_options.cacertfile = /path/to/ca_certificate.pem
# ssl_options.certfile = /path/to/server_certificate.pem
# ssl_options.keyfile = /path/to/server_key.pem
# ssl_options.verify = verify_peer
# ssl_options.fail_if_no_peer_cert = false

# ================================
# PLUGINS
# ================================

# Enable management plugin by default
# (déjà activé dans l'image Docker rabbitmq:management)

# ================================
# QUEUE DEFAULTS
# ================================

# Default queue arguments
default_queue_type = classic

# Message TTL defaults (en millisecondes)
# Ces valeurs peuvent être overridées par queue
default_ttl = 3600000  # 1 heure

# ================================
# OPTIMISATIONS AI-AGENT
# ================================

# Pour les tâches webhook rapides
queue_index_embed_msgs_below = 4096

# Garbage collection plus fréquent
collect_statistics_interval = 10000

# Optimisation pour les workers Celery
tcp_listen_options.backlog = 128
tcp_listen_options.nodelay = true
tcp_listen_options.keepalive = true

# ================================
# MONITORING ET MÉTRIQUES
# ================================

# Prometheus metrics (si plugin activé)
# prometheus.tcp.port = 15692
# prometheus.path = /metrics

# ================================
# DEAD LETTER QUEUES
# ================================

# Configuration automatique des DLQ
# (gérée par Celery dans notre cas)

# ================================
# NOTES DE CONFIGURATION
# ================================
#
# Ce fichier configure RabbitMQ pour optimiser les performances
# avec l'architecture AI-Agent qui utilise :
#
# - Queues spécialisées (webhooks, workflows, ai_generation, tests, dlq)
# - Priorités de messages
# - TTL par message et queue
# - Dead Letter Queues automatiques
# - Monitoring via Management UI
#
# Pour appliquer ces changements :
# 1. Redémarrer le container RabbitMQ
# 2. Vérifier la configuration via Management UI
# 3. Tester les connexions Celery
#
# Monitoring :
# - RabbitMQ Management: http://localhost:15672
# - Métriques via API: http://localhost:15672/api/
#
# Commandes utiles :
# docker exec ai_agent_rabbitmq rabbitmqctl status
# docker exec ai_agent_rabbitmq rabbitmqctl list_queues
# docker exec ai_agent_rabbitmq rabbitmqctl list_exchanges 