-- ========================================================================
-- SCRIPT DE SUPPRESSION DES DONN√âES (PR√âSERVATION DES TABLES IA)
-- ========================================================================
-- Ce script supprime les donn√©es du workflow (tasks, runs, tests, etc.)
-- MAIS PR√âSERVE TOUTES les donn√©es IA pour l'analyse et le suivi:
--   ‚Ä¢ ai_interactions - Interactions avec les mod√®les IA
--   ‚Ä¢ ai_code_generations - Code g√©n√©r√© par l'IA
--   ‚Ä¢ ai_usage_logs - Co√ªts et usage des APIs IA
--   ‚Ä¢ ai_cost_daily_summary - Vue des co√ªts quotidiens
--   ‚Ä¢ ai_cost_by_workflow - Vue des co√ªts par workflow
-- ========================================================================

DO $$ 
DECLARE
    ai_logs_count bigint;
BEGIN
    RAISE NOTICE '========================================';
    RAISE NOTICE 'üóëÔ∏è  SUPPRESSION DES DONN√âES DU WORKFLOW';
    RAISE NOTICE 'üìä PR√âSERVATION DE TOUTES LES TABLES IA';
    RAISE NOTICE '========================================';
    
    -- 1. Supprimer les donn√©es des tables enfants d'abord (ordre hi√©rarchique)
    
    -- Tables enfants li√©es aux runs
    DELETE FROM run_steps;
    RAISE NOTICE '‚úÖ run_steps supprim√©s';
    
    DELETE FROM test_results;
    RAISE NOTICE '‚úÖ test_results supprim√©s';
    
    DELETE FROM pull_requests;
    RAISE NOTICE '‚úÖ pull_requests supprim√©s';
    
    -- ‚ö†Ô∏è  IMPORTANT: Ne PAS supprimer les tables AI
    -- - ai_interactions (PR√âSERV√âE)
    -- - ai_code_generations (PR√âSERV√âE)
    -- - ai_usage_logs (PR√âSERV√âE)
    
    -- Tables de runs et tasks
    DELETE FROM task_runs;
    RAISE NOTICE '‚úÖ task_runs supprim√©s';
    
    DELETE FROM tasks;
    RAISE NOTICE '‚úÖ tasks supprim√©s';
    
    -- Tables de m√©triques (hors donn√©es AI)
    -- performance_metrics peut contenir total_ai_cost mais c'est un agr√©gat, pas le d√©tail
    DELETE FROM performance_metrics;
    RAISE NOTICE '‚úÖ performance_metrics supprim√©s';
    
    -- Tables syst√®me et √©v√©nements
    DELETE FROM webhook_events;
    RAISE NOTICE '‚úÖ webhook_events supprim√©s';
    
    DELETE FROM application_logs;
    RAISE NOTICE '‚úÖ application_logs supprim√©s';
    
    DELETE FROM system_config;
    RAISE NOTICE '‚úÖ system_config supprim√©s';
    
    RAISE NOTICE '========================================';
    RAISE NOTICE '‚úÖ PR√âSERVATION DE TOUTES LES DONN√âES IA';
    RAISE NOTICE '========================================';
    RAISE NOTICE 'Les tables AI suivantes sont CONSERV√âES:';
    RAISE NOTICE '- ai_interactions (interactions IA)';
    RAISE NOTICE '- ai_code_generations (code g√©n√©r√© par IA)';
    RAISE NOTICE '- ai_usage_logs (co√ªts et usage IA)';
    RAISE NOTICE '- ai_cost_daily_summary (vue des co√ªts)';
    RAISE NOTICE '- ai_cost_by_workflow (vue par workflow)';
    
    -- Compter les enregistrements AI pr√©serv√©s
    IF EXISTS (SELECT FROM information_schema.tables 
              WHERE table_schema = 'public' 
              AND table_name = 'ai_usage_logs') THEN
        SELECT COUNT(*) INTO ai_logs_count FROM ai_usage_logs;
        RAISE NOTICE 'üìä ai_usage_logs: % enregistrements PR√âSERV√âS', ai_logs_count;
    ELSE
        RAISE NOTICE '‚ÑπÔ∏è  Table ai_usage_logs pas encore cr√©√©e';
    END IF;
    
    IF EXISTS (SELECT FROM information_schema.tables 
              WHERE table_schema = 'public' 
              AND table_name = 'ai_interactions') THEN
        SELECT COUNT(*) INTO ai_logs_count FROM ai_interactions;
        RAISE NOTICE 'üìä ai_interactions: % enregistrements PR√âSERV√âS', ai_logs_count;
    ELSE
        RAISE NOTICE '‚ÑπÔ∏è  Table ai_interactions pas encore cr√©√©e';
    END IF;
    
    IF EXISTS (SELECT FROM information_schema.tables 
              WHERE table_schema = 'public' 
              AND table_name = 'ai_code_generations') THEN
        SELECT COUNT(*) INTO ai_logs_count FROM ai_code_generations;
        RAISE NOTICE 'üìä ai_code_generations: % enregistrements PR√âSERV√âS', ai_logs_count;
    ELSE
        RAISE NOTICE '‚ÑπÔ∏è  Table ai_code_generations pas encore cr√©√©e';
    END IF;
    
END $$;


-- ========================================================================
-- V√©rification finale des suppressions
-- ========================================================================
DO $$ 
DECLARE
    table_name text;
    row_count bigint;
    total_cost numeric;
    total_calls bigint;
BEGIN
    RAISE NOTICE '========================================';
    RAISE NOTICE 'üìã V√âRIFICATION DES TABLES SUPPRIM√âES';
    RAISE NOTICE '========================================';
    
    -- V√©rifier chaque table une par une (SAUF les tables AI)
    FOR table_name IN 
        SELECT tablename 
        FROM pg_tables 
        WHERE schemaname = 'public' 
        AND tablename IN (
            'tasks', 'task_runs', 'run_steps',
            'test_results', 'pull_requests',
            'webhook_events', 'application_logs', 'performance_metrics',
            'system_config'
        )
        ORDER BY tablename
    LOOP
        EXECUTE format('SELECT COUNT(*) FROM %I', table_name) INTO row_count;
        
        IF row_count = 0 THEN
            RAISE NOTICE '‚úÖ Table % : vide', table_name;
        ELSE
            RAISE WARNING '‚ö†Ô∏è  Table % : % lignes restantes!', table_name, row_count;
        END IF;
    END LOOP;
    
    RAISE NOTICE '========================================';
    RAISE NOTICE 'üìä V√âRIFICATION DES DONN√âES IA PR√âSERV√âES';
    RAISE NOTICE '========================================';
    
    -- 1. V√©rifier ai_usage_logs
    IF EXISTS (SELECT FROM information_schema.tables 
              WHERE table_schema = 'public' 
              AND table_name = 'ai_usage_logs') THEN
        
        SELECT COUNT(*) INTO row_count FROM ai_usage_logs;
        RAISE NOTICE '‚úÖ ai_usage_logs : % enregistrements PR√âSERV√âS', row_count;
        
        -- Calculer le co√ªt total
        SELECT COALESCE(SUM(estimated_cost), 0), COUNT(*) 
        INTO total_cost, total_calls 
        FROM ai_usage_logs;
        
        IF total_calls > 0 THEN
            RAISE NOTICE '   üìà Co√ªt total: $% (% appels)', ROUND(total_cost, 4), total_calls;
            
            -- D√©tails par provider
            FOR table_name IN 
                SELECT '      - ' || provider || ': $' || 
                       ROUND(SUM(estimated_cost)::numeric, 4) || 
                       ' (' || COUNT(*) || ' appels)'
                FROM ai_usage_logs 
                GROUP BY provider
                ORDER BY SUM(estimated_cost) DESC
            LOOP
                RAISE NOTICE '%', table_name;
            END LOOP;
        END IF;
    ELSE
        RAISE NOTICE '‚ÑπÔ∏è  ai_usage_logs pas encore cr√©√©e';
    END IF;
    
    -- 2. V√©rifier ai_interactions
    IF EXISTS (SELECT FROM information_schema.tables 
              WHERE table_schema = 'public' 
              AND table_name = 'ai_interactions') THEN
        SELECT COUNT(*) INTO row_count FROM ai_interactions;
        RAISE NOTICE '‚úÖ ai_interactions : % enregistrements PR√âSERV√âS', row_count;
    ELSE
        RAISE NOTICE '‚ÑπÔ∏è  ai_interactions pas encore cr√©√©e';
    END IF;
    
    -- 3. V√©rifier ai_code_generations
    IF EXISTS (SELECT FROM information_schema.tables 
              WHERE table_schema = 'public' 
              AND table_name = 'ai_code_generations') THEN
        SELECT COUNT(*) INTO row_count FROM ai_code_generations;
        RAISE NOTICE '‚úÖ ai_code_generations : % enregistrements PR√âSERV√âS', row_count;
    ELSE
        RAISE NOTICE '‚ÑπÔ∏è  ai_code_generations pas encore cr√©√©e';
    END IF;
    
    RAISE NOTICE '========================================';
    RAISE NOTICE '‚úÖ Suppression termin√©e avec succ√®s!';
    RAISE NOTICE 'üìä TOUTES les donn√©es IA pr√©serv√©es:';
    RAISE NOTICE '   - ai_interactions';
    RAISE NOTICE '   - ai_code_generations';
    RAISE NOTICE '   - ai_usage_logs';
    RAISE NOTICE '========================================';
END $$;