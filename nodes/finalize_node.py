"""N≈ìud de finalisation - pousse le code et cr√©e la Pull Request."""

from typing import Dict, Any
from models.state import GraphState
from models.schemas import PullRequestInfo
from tools.github_tool import GitHubTool
from utils.logger import get_logger
from utils.helpers import get_working_directory, validate_working_directory, ensure_working_directory
from utils.persistence_decorator import with_persistence
from services.database_persistence_service import db_persistence

logger = get_logger(__name__)


@with_persistence("finalize_pr")
async def finalize_pr(state: GraphState) -> GraphState:
    """
    N≈ìud de finalisation : pousse le code et cr√©e la Pull Request.

    Ce n≈ìud :
    1. Pousse les changements vers GitHub
    2. Cr√©e une Pull Request
    3. Ajoute des informations d√©taill√©es √† la PR
    4. Pr√©pare la mise √† jour Monday

    Args:
        state: √âtat actuel du graphe

    Returns:
        √âtat mis √† jour avec les informations de la PR
    """
    logger.info(f"üöÄ Finalisation pour: {state['task'].title}")

    # ‚úÖ CORRECTION CRITIQUE: Assurer l'int√©grit√© de l'√©tat d√®s le d√©but
    from utils.error_handling import ensure_state_integrity
    ensure_state_integrity(state)

    # ‚úÖ S√âCURIT√â: Initialiser les structures de donn√©es si n√©cessaire
    if "results" not in state or not isinstance(state["results"], dict):
        state["results"] = {}

    if "ai_messages" not in state["results"]:
        state["results"]["ai_messages"] = []

    if "error_logs" not in state["results"]:
        state["results"]["error_logs"] = []

    state["results"]["current_status"] = "FINALIZING".lower()
    state["results"]["ai_messages"].append("D√©but de la finalisation...")

    try:
        # ‚úÖ CORRECTION ROBUSTE: R√©cup√©rer le r√©pertoire de travail de mani√®re s√©curis√©e
        logger.info("üîç R√©cup√©ration du r√©pertoire de travail...")
        working_directory = get_working_directory(state)
        logger.info(f"üîç R√©pertoire de travail r√©cup√©r√©: {working_directory}")

        if not validate_working_directory(working_directory, "finalize_node"):
            logger.warning("‚ö†Ô∏è R√©pertoire de travail invalide, tentative de r√©cup√©ration...")
            try:
                working_directory = ensure_working_directory(state, "finalize_node_")
                logger.info(f"üìÅ R√©pertoire de travail de secours cr√©√©: {working_directory}")
            except Exception as e:
                error_msg = f"Impossible de cr√©er un r√©pertoire de travail pour la finalisation: {e}"
                logger.error(f"‚ùå {error_msg}")
                state["results"]["error_logs"].append(error_msg)
                state["results"]["ai_messages"].append(f"‚ùå {error_msg}")
                state["results"]["current_status"] = "failed"
                return state

        logger.info(f"üîç R√©pertoire de travail valid√©: {working_directory}")
        task = state["task"]
        
        # ‚úÖ CORRECTION: Rechercher les informations Git dans l'√©tat puis dans la t√¢che
        repo_url = (
            state["results"].get("repository_url") or 
            getattr(task, 'repository_url', None) or 
            ""
        )
        git_branch = (
            state["results"].get("git_branch") or 
            getattr(task, 'git_branch', None) or 
            getattr(task, 'branch_name', None) or 
            ""
        )
        
        # ‚úÖ CORRECTION: Nettoyer l'URL du repository si elle provient de Monday.com
        if repo_url and isinstance(repo_url, str):
            import re
            # Format Monday.com: "GitHub - user/repo - https://github.com/user/repo"
            https_match = re.search(r'(https://github\.com/[a-zA-Z0-9_.-]+/[a-zA-Z0-9_.-]+(?:\.git)?)', repo_url)
            if https_match:
                cleaned_url = https_match.group(1)
                if cleaned_url.endswith('.git'):
                    cleaned_url = cleaned_url[:-4]
                if cleaned_url != repo_url:
                    logger.info(f"üßπ URL repository nettoy√©e pour finalize: '{repo_url[:50]}...' ‚Üí '{cleaned_url}'")
                    repo_url = cleaned_url
                    # Mettre √† jour dans l'√©tat pour coh√©rence
                    state["results"]["repository_url"] = cleaned_url
        
        logger.info(f"üîç Repository URL: {repo_url}")
        logger.info(f"üîç Git branch: {git_branch}")

        # ‚úÖ VALIDATION CRITIQUE: V√©rifier les pr√©requis avant de continuer
        validation_errors = []
        
        if not repo_url or not repo_url.strip():
            validation_errors.append("URL du repository non d√©finie")
        
        if not git_branch or not git_branch.strip():
            validation_errors.append("Branche Git non d√©finie")
        
        if not working_directory:
            validation_errors.append("R√©pertoire de travail non d√©fini")
            
        # V√©rifier qu'il y a des fichiers modifi√©s
        modified_files = state["results"].get("modified_files", [])
        if not modified_files:
            logger.warning("‚ö†Ô∏è Aucun fichier modifi√© d√©tect√© dans results - tentative de d√©tection avec Git...")
            
            # Tentative de d√©tection avec Git comme fallback
            if working_directory:
                try:
                    import subprocess
                    import os
                    original_cwd = os.getcwd()
                    os.chdir(working_directory)
                    
                    # D√©tecter les fichiers modifi√©s avec git status
                    result = subprocess.run(
                        ["git", "status", "--porcelain"], 
                        capture_output=True, 
                        text=True, 
                        timeout=30
                    )
                    
                    if result.returncode == 0 and result.stdout.strip():
                        # Parser la sortie de git status
                        git_modified_files = []
                        for line in result.stdout.strip().split('\n'):
                            if line.strip():
                                # Format: "XY filename" o√π X et Y sont les statuts
                                status = line[:2]
                                filepath = line[3:]
                                git_modified_files.append(filepath)
                        
                        if git_modified_files:
                            logger.info(f"‚úÖ {len(git_modified_files)} fichiers modifi√©s d√©tect√©s avec Git: {git_modified_files[:3]}...")
                            state["results"]["modified_files"] = git_modified_files
                            modified_files = git_modified_files
                        else:
                            logger.warning("‚ö†Ô∏è Git status ne montre aucun fichier modifi√©")
                    else:
                        logger.warning("‚ö†Ô∏è Impossible d'ex√©cuter git status")
                        
                    os.chdir(original_cwd)
                    
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Erreur lors de la d√©tection Git: {e}")
                    if 'original_cwd' in locals():
                        os.chdir(original_cwd)
            
            if not modified_files:
                logger.warning("‚ö†Ô∏è Aucun fichier modifi√© d√©tect√© m√™me avec Git - continuons quand m√™me")
        
        if validation_errors:
            error_msg = f"Pr√©requis manquants pour la finalisation: {', '.join(validation_errors)}"
            logger.error(f"‚ùå {error_msg}")
            state["results"]["error_logs"].append(error_msg)
            state["results"]["ai_messages"].append(f"‚ùå {error_msg}")
            state["results"]["current_status"] = "failed_validation"
            
            # Continuer vers Monday pour signaler l'erreur mais ne pas essayer de cr√©er la PR
            state["results"]["should_continue"] = True
            state["results"]["skip_github"] = True
            return state

        # ‚úÖ CORRECTION: Cr√©er la PR maintenant pour permettre la validation humaine
        state["results"]["ai_messages"].append("üöÄ Cr√©ation de la Pull Request...")

        # 1. G√©n√©rer le contenu de la PR
        logger.info("üîç G√©n√©ration du contenu PR...")
        pr_title, pr_body = await _generate_pr_content(task, state)
        logger.info(f"üîç PR title g√©n√©r√©: {pr_title[:50]}...")

        # 2. Utiliser l'outil GitHub pour cr√©er la PR
        logger.info("üîç Initialisation GitHubTool...")
        github_tool = GitHubTool()

        # Pousser les changements et cr√©er la PR
        try:
            # 1. Pousser la branche d'abord
            try:
                import subprocess
                import os
                original_cwd = os.getcwd()
                os.chdir(working_directory)
                
                # V√©rifier la configuration Git
                config_result = subprocess.run(
                    ["git", "config", "--list"],
                    capture_output=True,
                    text=True,
                    timeout=30
                )
                
                if config_result.returncode == 0:
                    logger.info("‚úÖ Configuration Git v√©rifi√©e")
                
                os.chdir(original_cwd)
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Impossible de v√©rifier la config Git: {e}")
                if 'original_cwd' in locals():
                    os.chdir(original_cwd)

            # ‚úÖ CORRECTION: Passer repository_url pour g√©rer le cas o√π remote origin n'existe pas
            push_result = await github_tool._push_branch(
                working_directory=working_directory,
                branch=git_branch,
                repository_url=repo_url  # Ajout pour g√©rer le remote manquant
            )
            logger.info(f"ÔøΩÔøΩ R√©sultat push re√ßu: {type(push_result)} - {push_result}")

            # GitOperationResult ou dictionnaire de fallback
            push_success = False
            if hasattr(push_result, 'success'):
                # C'est un objet GitOperationResult
                push_success = push_result.success
                error_msg = getattr(push_result, 'error', push_result.message) if not push_success else None
            elif isinstance(push_result, dict):
                # C'est un dictionnaire de fallback
                push_success = push_result.get("success", False)
                error_msg = push_result.get("error", "Erreur lors du push") if not push_success else None
            else:
                error_msg = "R√©sultat push invalide"

            if not push_success:
                # ‚úÖ AM√âLIORATION: G√©rer le cas o√π les fichiers sont d√©j√† pouss√©s
                if error_msg and "Aucun changement d√©tect√©" in error_msg:
                    logger.warning("‚ö†Ô∏è Aucun changement local - v√©rification si la branche existe d√©j√† sur le remote...")
                    # V√©rifier si la branche existe d√©j√† sur GitHub
                    try:
                        import subprocess
                        original_cwd_check = os.getcwd()
                        os.chdir(working_directory)
                        
                        check_result = subprocess.run(
                            ["git", "ls-remote", "--heads", "origin", git_branch],
                            capture_output=True,
                            text=True,
                            timeout=10
                        )
                        
                        os.chdir(original_cwd_check)
                        
                        if check_result.returncode == 0 and check_result.stdout.strip():
                            logger.info(f"‚úÖ La branche {git_branch} existe d√©j√† sur le remote")
                            logger.info("üí° Les fichiers ont √©t√© pouss√©s pendant l'impl√©mentation - continuons avec la PR")
                            push_success = True  # Consid√©rer comme un succ√®s pour continuer
                        else:
                            logger.error(f"‚ùå La branche n'existe pas sur le remote et pas de changements locaux")
                            raise Exception(f"√âchec push: {error_msg}")
                    except Exception as check_error:
                        logger.error(f"‚ùå Impossible de v√©rifier l'existence de la branche: {check_error}")
                        if 'original_cwd_check' in locals():
                            os.chdir(original_cwd_check)
                        raise Exception(f"√âchec push: {error_msg}")
                else:
                    raise Exception(f"√âchec push: {error_msg}")

            if push_success:
                logger.info(f"‚úÖ Branche {git_branch} pouss√©e avec succ√®s (ou d√©j√† pr√©sente sur le remote)")

            # 2. Ensuite cr√©er la Pull Request
            pr_result = await github_tool._arun(
                action="create_pull_request",
                repo_url=repo_url,
                head_branch=git_branch,
                title=pr_title,
                body=pr_body
            )

            # ‚úÖ VALIDATION RENFORC√âE: V√©rification compl√®te du r√©sultat PR
            if pr_result and pr_result.get("success"):
                # V√©rifier que les donn√©es de la PR sont pr√©sentes
                pr_info_dict = pr_result.get("pr_info")
                
                if not pr_info_dict:
                    raise ValueError("Donn√©es PR manquantes dans la r√©ponse")
                
                # Validation des champs obligatoires
                required_fields = ["number", "url"]
                missing_fields = [field for field in required_fields if field not in pr_info_dict]
                
                if missing_fields:
                    raise ValueError(f"Champs PR manquants: {missing_fields}")
                
                # Validation des types et valeurs
                if not isinstance(pr_info_dict["number"], int) or pr_info_dict["number"] <= 0:
                    raise ValueError(f"Num√©ro PR invalide: {pr_info_dict['number']}")
                
                if not isinstance(pr_info_dict["url"], str) or not pr_info_dict["url"].startswith('http'):
                    raise ValueError(f"URL PR invalide: {pr_info_dict['url']}")

                # ‚úÖ CR√âATION: Cr√©er l'objet PullRequestInfo valid√©
                try:
                    pr_info = PullRequestInfo(**pr_info_dict)
                except Exception as schema_error:
                    raise ValueError(f"Erreur cr√©ation objet PullRequestInfo: {schema_error}")

                state["results"]["pr_info"] = pr_info
                state["results"]["pr_url"] = pr_info.url
                state["results"]["pr_number"] = pr_info.number
                state["results"]["ai_messages"].append(f"‚úÖ PR cr√©√©e: #{pr_info.number} - {pr_info.url}")
                state["results"]["last_operation_result"] = f"PR cr√©√©e: {pr_info.url}"

                logger.info(f"‚úÖ PR cr√©√©e avec succ√®s - #{pr_info.number}: {pr_info.url}")
                
                # ‚úÖ PERSISTENCE: Sauvegarder la PR en base de donn√©es
                try:
                    # ‚úÖ CORRECTION: Utiliser db_task_id (ID base de donn√©es) au lieu de task_id (monday_item_id)
                    task_id = state.get("db_task_id")
                    task_run_id = state.get("db_run_id")
                    
                    if task_id and task_run_id:
                        await db_persistence.create_pull_request(
                            task_id=int(task_id),  # S'assurer que c'est un entier
                            task_run_id=int(task_run_id),  # S'assurer que c'est un entier
                            github_pr_number=pr_info.number,
                            github_pr_url=pr_info.url,
                            pr_title=pr_title,
                            pr_description=pr_body,
                            head_sha=None,  # Sera rempli plus tard si n√©cessaire
                            base_branch="main",
                            feature_branch=git_branch
                        )
                        logger.info(f"üíæ Pull request sauvegard√©e en base de donn√©es")
                    else:
                        logger.warning(f"‚ö†Ô∏è Impossible de sauvegarder la PR en base: task_id={task_id}, task_run_id={task_run_id}")
                except Exception as db_error:
                    logger.error(f"‚ùå Erreur sauvegarde PR en base: {db_error}")
                    # Ne pas faire √©chouer le workflow pour un probl√®me de persistence
                
            elif pr_result and not pr_result.get("success"):
                # Erreur avec message sp√©cifique
                error_msg = pr_result.get("error", "Erreur lors de la cr√©ation de PR")
                raise Exception(f"GitHub API error: {error_msg}")
            else:
                # Pas de r√©sultat du tout
                raise Exception("Aucune r√©ponse de l'API GitHub pour la cr√©ation de PR")

        except Exception as pr_error:
            error_msg = f"Exception lors de la cr√©ation PR: {str(pr_error)}"
            state["results"]["error_logs"].append(error_msg)
            state["results"]["ai_messages"].append(f"‚ùå Exception PR: {error_msg}")
            logger.error(error_msg, exc_info=True)

        state["results"]["should_continue"] = True
        state["results"]["waiting_human_validation"] = True
        
        # ‚úÖ PERSISTENCE: Enregistrer les m√©triques de performance
        try:
            task_id = state.get("db_task_id")
            task_run_id = state.get("db_run_id")
            
            if task_id and task_run_id:
                # Calculer les m√©triques depuis l'√©tat
                started_at = state.get("started_at")
                total_duration = None
                if started_at:
                    from datetime import datetime, timezone
                    # ‚úÖ CORRECTION: S'assurer que les deux datetimes ont le m√™me timezone
                    now_utc = datetime.now(timezone.utc)
                    # Si started_at est offset-naive, le rendre offset-aware
                    if started_at.tzinfo is None:
                        started_at = started_at.replace(tzinfo=timezone.utc)
                    total_duration = int((now_utc - started_at).total_seconds())
                
                # Collecter les m√©triques d'IA depuis les r√©sultats
                ai_calls = state.get("results", {}).get("total_ai_calls", 0)
                total_tokens = state.get("results", {}).get("total_tokens_used", 0)
                total_cost = state.get("results", {}).get("total_ai_cost", 0.0)
                
                # M√©triques de tests
                test_results_list = state.get("results", {}).get("test_results", [])
                test_coverage = None
                if test_results_list:
                    last_test = test_results_list[-1]
                    if isinstance(last_test, dict):
                        test_coverage = last_test.get("coverage", None)
                
                # Nombre de tentatives de retry/debug
                retry_attempts = state.get("results", {}).get("debug_attempts", 0)
                
                # Lignes de code g√©n√©r√©es (estimation bas√©e sur modified_files)
                code_lines = 0
                code_changes = state.get("results", {}).get("code_changes", {})
                for file_code in code_changes.values():
                    if isinstance(file_code, str):
                        code_lines += len(file_code.split('\n'))
                
                await db_persistence.record_performance_metrics(
                    task_id=task_id,
                    task_run_id=task_run_id,
                    total_duration_seconds=total_duration,
                    ai_processing_time_seconds=None,  # Peut √™tre calcul√© plus tard
                    testing_time_seconds=None,  # Peut √™tre calcul√© plus tard
                    total_ai_calls=ai_calls,
                    total_tokens_used=total_tokens,
                    total_ai_cost=total_cost,
                    test_coverage_final=test_coverage,
                    retry_attempts=retry_attempts
                )
                logger.info(f"üíæ M√©triques de performance enregistr√©es pour task_id={task_id}, run_id={task_run_id}")
            else:
                logger.warning(f"‚ö†Ô∏è Impossible d'enregistrer les m√©triques: task_id={task_id}, task_run_id={task_run_id}")
        except Exception as metrics_error:
            logger.error(f"‚ùå Erreur enregistrement m√©triques de performance: {metrics_error}")
            # Ne pas faire √©chouer le workflow pour un probl√®me de persistence

        # ‚úÖ CORRECTION SIGSEGV: Nettoyer le client LangSmith pour √©viter les probl√®mes de d√©sallocation
        try:
            from config.langsmith_config import langsmith_config
            if langsmith_config._client is not None:
                logger.info("üßπ Nettoyage du client LangSmith pour √©viter SIGSEGV")
                langsmith_config._client = None
        except Exception as cleanup_error:
            logger.warning(f"‚ö†Ô∏è Erreur nettoyage LangSmith: {cleanup_error}")

        return state

    except Exception as e:
        error_msg = f"Exception lors de la finalisation: {str(e)}"
        logger.error(error_msg, exc_info=True)

        state["results"]["error_logs"].append(error_msg)
        state["results"]["ai_messages"].append(f"‚ùå Exception: {error_msg}")
        state["results"]["last_operation_result"] = error_msg
        state["results"]["should_continue"] = True  # Continuer vers Monday pour signaler l'erreur

    logger.info("üèÅ Finalisation termin√©e")
    return state


async def _generate_pr_content(task, state: Dict[str, Any]) -> tuple[str, str]:
    """G√©n√®re le titre et la description de la Pull Request."""

    # Titre simple et descriptif
    pr_title = f"feat: {task.title}"

    # Corps de la PR
    # ‚úÖ COH√âRENCE: Afficher monday_item_id pour l'utilisateur (pas db_task_id)
    display_id = task.monday_item_id if hasattr(task, 'monday_item_id') and task.monday_item_id else task.task_id
    pr_body = f"""## ü§ñ Pull Request g√©n√©r√©e automatiquement

### üìã T√¢che
**ID Monday.com**: {display_id}
**Titre**: {task.title}
**Priorit√©**: {task.priority}

### üìù Description
{task.description}

### üîß Changements apport√©s
"""

    # Ajouter la liste des fichiers modifi√©s
    if state["results"].get("modified_files"):
        pr_body += "\n#### Fichiers modifi√©s:\n"
        for file_path in state["results"]["modified_files"]:
            pr_body += f"- `{file_path}`\n"

    # Ajouter les r√©sultats des tests
    if state["results"].get("test_results"):
        latest_test = state["results"]["test_results"][-1]

        # G√©rer √† la fois les dictionnaires et les objets TestResult
        if hasattr(latest_test, 'success'):
            # C'est un objet TestResult
            test_success = latest_test.success
            test_command = getattr(latest_test, 'test_command', 'N/A')
        else:
            # C'est un dictionnaire
            test_success = latest_test.get("success", False)
            test_command = latest_test.get("command", "N/A")

        if test_success:
            pr_body += f"\n### ‚úÖ Tests\n- ‚úÖ Tests pass√©s avec `{test_command}`\n"
        else:
            pr_body += f"\n### ‚ö†Ô∏è Tests\n- ‚ö†Ô∏è Derniers tests: `{test_command}` (voir logs)\n"

    # Ajouter les tentatives de debug si applicable
    if state["results"].get("debug_attempts", 0) > 0:
        pr_body += (f"\n### üîß Debug\n- üîß {state['results'].get('debug_attempts', 0)} "
                    f"tentative(s) de correction effectu√©e(s)\n")

    # Ajouter les logs d'erreurs importantes
    if state["results"].get("error_logs"):
        # Limiter aux 3 derni√®res erreurs pour ne pas surcharger
        recent_errors = state["results"]["error_logs"][-3:]
        pr_body += "\n### üìä Informations de d√©veloppement\n"
        pr_body += "<details><summary>Logs de d√©veloppement (cliquer pour d√©velopper)</summary>\n\n"
        for error in recent_errors:
            pr_body += f"- {error}\n"
        pr_body += "\n</details>\n"

    # Footer
    pr_body += f"""
### üéØ Pr√™t pour la revue
Cette Pull Request a √©t√© g√©n√©r√©e automatiquement par l'agent IA.
- ‚úÖ Code impl√©ment√© selon les sp√©cifications
- ‚úÖ Tests valid√©s
- ‚úÖ Pr√™t pour la revue humaine

**Branche**: `{getattr(task, 'git_branch', 'N/A')}`
**Assign√©**: {getattr(task, 'assignee', None) or 'Non assign√©'}
"""

    return pr_title, pr_body


async def _generate_summary_comment(state: Dict[str, Any]) -> str:
    """G√©n√®re un commentaire de r√©sum√© pour la PR."""

    comment = "## ü§ñ R√©sum√© de l'impl√©mentation automatique\n\n"

    # Statistiques
    comment += "### üìä Statistiques\n"
    modified_files = len(state["results"].get("modified_files", []))
    test_results = state["results"].get("test_results", [])
    error_count = len(state["results"].get("error_logs", []))

    comment += f"- **Fichiers modifi√©s**: {modified_files}\n"
    comment += f"- **Tests ex√©cut√©s**: {len(test_results)}\n"
    comment += f"- **Erreurs d√©tect√©es**: {error_count}\n"

    return comment


def should_continue_to_update(state: Dict[str, Any]) -> bool:
    """D√©termine si le workflow doit continuer vers la mise √† jour Monday."""
    # Toujours continuer vers Monday pour mettre √† jour le statut
    return True
