"""N≈ìud d'impl√©mentation - g√©n√®re et applique le code."""

from typing import Dict, Any, List, Optional, Tuple
from models.state import GraphState
from anthropic import Client
from openai import AsyncOpenAI
from config.settings import get_settings
from tools.claude_code_tool import ClaudeCodeTool
from utils.logger import get_logger
from utils.persistence_decorator import with_persistence, log_code_generation_decorator
from utils.helpers import get_working_directory, validate_working_directory, ensure_working_directory
import os

logger = get_logger(__name__)


async def _call_llm_with_fallback(anthropic_client: Client, openai_client: AsyncOpenAI, prompt: str, max_tokens: int = 4000) -> Tuple[str, str]:
    """
    Appelle le LLM avec fallback automatique Anthropic ‚Üí OpenAI.
    
    Returns:
        Tuple[content, provider_used]
    """
    # Tentative 1: Anthropic
    try:
        logger.info("üöÄ Tentative avec Anthropic...")
        response = anthropic_client.messages.create(
            model="claude-3-5-sonnet-20241022",
            max_tokens=max_tokens,
            messages=[{"role": "user", "content": prompt}]
        )
        content = response.content[0].text
        logger.info("‚úÖ Anthropic r√©ussi")
        return content, "anthropic"
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Anthropic √©chou√©: {e}")
        
        # Tentative 2: OpenAI fallback
        if openai_client:
            try:
                logger.info("üîÑ Fallback vers OpenAI...")
                response = await openai_client.chat.completions.create(
                    model="gpt-4o",
                    max_tokens=max_tokens,
                    messages=[{"role": "user", "content": prompt}]
                )
                content = response.choices[0].message.content
                logger.info("‚úÖ OpenAI fallback r√©ussi")
                return content, "openai"
            except Exception as e2:
                logger.error(f"‚ùå OpenAI fallback √©chou√©: {e2}")
                raise Exception(f"Anthropic et OpenAI ont √©chou√©. Anthropic: {e}, OpenAI: {e2}")
        else:
            logger.error("‚ùå Pas de fallback OpenAI disponible")
            raise Exception(f"Anthropic √©chou√© et pas de fallback OpenAI: {e}")

@with_persistence("implement_task")
@log_code_generation_decorator("claude", "claude-3-5-sonnet-20241022", "initial")
async def implement_task(state: GraphState) -> GraphState:
    """
    N≈ìud d'impl√©mentation: g√©n√®re et applique le code n√©cessaire.
    
    Ce n≈ìud :
    1. Analyse les requirements et le contexte technique
    2. G√©n√®re un plan d'impl√©mentation avec Claude
    3. Applique les modifications n√©cessaires
    4. Valide que l'impl√©mentation r√©pond aux crit√®res
    
    Args:
        state: √âtat actuel du graphe
        
    Returns:
        √âtat mis √† jour avec l'impl√©mentation
    """
    logger.info(f"üíª Impl√©mentation de: {state['task'].title}")

    # ‚úÖ CORRECTION CRITIQUE: Assurer l'int√©grit√© de l'√©tat d√®s le d√©but
    from utils.error_handling import ensure_state_integrity
    ensure_state_integrity(state)

    state["results"]["ai_messages"].append("D√©but de l'impl√©mentation...")
    
    try:
        # Initialiser les outils n√©cessaires
        settings = get_settings()
        claude_tool = ClaudeCodeTool()
        anthropic_client = Client(api_key=settings.anthropic_api_key)
        # Initialiser OpenAI client pour fallback
        openai_client = AsyncOpenAI(api_key=settings.openai_api_key) if settings.openai_api_key else None
        task = state["task"]

        if not task:

            logger.error("‚ùå Aucune t√¢che fournie")

            return state
        


        # Initialiser results si n√©cessaire

        if "results" not in state:

            state["results"] = {}
        # V√©rifier que l'environnement est pr√©par√©
        # ‚úÖ AM√âLIORATION: Utiliser la fonction helper unifi√©e
        working_directory = get_working_directory(state)
        
        # ‚úÖ S√âCURIT√â: Valider le r√©pertoire avec la fonction d√©di√©e
        if not validate_working_directory(working_directory, "implement_node"):
            # ‚úÖ FALLBACK: Essayer de s'assurer qu'un r√©pertoire existe
            try:
                working_directory = ensure_working_directory(state, "implement_node_")
                logger.info(f"üìÅ R√©pertoire de travail de secours cr√©√©: {working_directory}")
            except Exception as e:
                error_msg = f"Impossible de cr√©er un r√©pertoire de travail pour l'impl√©mentation: {e}"
                logger.error(f"‚ùå {error_msg}")
                state["results"]["error_logs"].append(error_msg)
                state["results"]["ai_messages"].append(f"‚ùå {error_msg}")
                state["results"]["last_operation_result"] = error_msg
                state["results"]["should_continue"] = False
                state["results"]["current_status"] = "failed".lower()
                return state
        
        if not working_directory:
            error_msg = "Aucun r√©pertoire de travail disponible pour l'impl√©mentation"
            state["results"]["error_logs"].append(error_msg)
            state["results"]["ai_messages"].append(f"‚ùå {error_msg}")
            state["results"]["should_continue"] = False
            state["results"]["current_status"] = "failed".lower()
            return state
        
        # V√©rifier que le r√©pertoire existe
        if not os.path.exists(working_directory):
            error_msg = f"R√©pertoire de travail introuvable: {working_directory}"
            state["results"]["error_logs"].append(error_msg)
            state["results"]["ai_messages"].append(f"‚ùå {error_msg}")
            state["results"]["should_continue"] = False
            state["results"]["current_status"] = "failed".lower()
            return state
        
        # Initialiser code_changes si n√©cessaire
        if "code_changes" not in state["results"] or not isinstance(state["results"]["code_changes"], dict):
            state["results"]["code_changes"] = {}

        # Initialiser modified_files si n√©cessaire
        if "modified_files" not in state["results"] or not isinstance(state["results"]["modified_files"], list):
            state["results"]["modified_files"] = []
        
        # Initialiser le nouveau moteur IA multi-provider
        from tools.ai_engine_hub import ai_hub, AIRequest, TaskType
        
        claude_tool.working_directory = working_directory
        
        # 1. Analyser la structure du projet avec le nouveau syst√®me g√©n√©rique
        logger.info("üìã Analyse de la structure du projet...")
        try:
            project_analysis_dict = await _analyze_project_structure(claude_tool)
            project_analysis = {
                "language_info": project_analysis_dict.get("language_info"),  # ‚úÖ NOUVEAU
                "project_type": project_analysis_dict.get("project_type", "unknown"),
                "structure": project_analysis_dict.get("structure_text", ""),
                "files": project_analysis_dict.get("files", []),
                "main_language": project_analysis_dict.get("main_language", "Unknown"),
                "confidence": project_analysis_dict.get("confidence", 0.0),  # ‚úÖ NOUVEAU
                "extensions": project_analysis_dict.get("extensions", []),  # ‚úÖ NOUVEAU
                "build_files": project_analysis_dict.get("build_files", []),  # ‚úÖ NOUVEAU
                "error": None
            }
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erreur lors de l'analyse du projet: {e}")
            project_analysis = {
                "language_info": None,
                "project_type": "unknown",
                "structure": "Analyse √©chou√©e",
                "files": [],
                "main_language": "Unknown",
                "confidence": 0.0,
                "extensions": [],
                "build_files": [],
                "error": str(e)
            }
        
        detected_type = project_analysis.get('project_type', 'unknown')
        detected_lang = project_analysis.get('main_language', 'Unknown')
        detected_confidence = project_analysis.get('confidence', 0.0)
        
        logger.info(f"üìä Langage d√©tect√©: {detected_lang} ({detected_type})")
        logger.info(f"üìä Confiance: {detected_confidence:.2f}")
        
        # ‚úÖ AVERTISSEMENT si confiance faible ou type non d√©tect√©
        if detected_type == "unknown":
            logger.warning("‚ö†Ô∏è Type de projet non d√©tect√© - le code g√©n√©r√© pourrait √™tre incorrect!")
            state["results"]["ai_messages"].append("‚ö†Ô∏è Type de projet non d√©tect√© - g√©n√©ration de code risqu√©e")
        elif detected_confidence < 0.7:
            logger.warning(f"‚ö†Ô∏è Confiance faible ({detected_confidence:.2f}) - v√©rifier le langage d√©tect√©")
            state["results"]["ai_messages"].append(f"‚ö†Ô∏è Confiance de d√©tection: {detected_confidence:.2f} - validation recommand√©e")
        else:
            logger.info(f"‚úÖ D√©tection r√©ussie: {detected_lang} (confiance: {detected_confidence:.2f})")
            state["results"]["ai_messages"].append(f"‚úÖ Langage d√©tect√©: {detected_lang}")
        
        # ‚ú® NOUVEAU : Logger les informations enrichies si disponibles
        if "enhanced_info" in project_analysis and project_analysis["enhanced_info"]:
            enhanced = project_analysis["enhanced_info"]
            logger.info("=" * 60)
            logger.info("ü§ñ ANALYSE LLM DU PROJET")
            logger.info("=" * 60)
            logger.info(f"Type: {enhanced.project_type}")
            logger.info(f"Framework: {enhanced.framework or 'Aucun'}")
            logger.info(f"Architecture: {enhanced.architecture}")
            logger.info(f"Stack: {', '.join(enhanced.tech_stack)}")
            logger.info(f"Description: {enhanced.description[:100]}...")
            logger.info("=" * 60)
            
            # Ajouter aux messages AI pour le suivi
            state["results"]["ai_messages"].append(f"ü§ñ Framework d√©tect√©: {enhanced.framework or 'Aucun'}")
            state["results"]["ai_messages"].append(f"ü§ñ Architecture: {enhanced.architecture}")
        
        # ‚úÖ PHASE CRITIQUE: EXPLORATION APPROFONDIE DU REPOSITORY
        logger.info("=" * 70)
        logger.info("üîç PHASE D'EXPLORATION APPROFONDIE DU REPOSITORY")
        logger.info("=" * 70)
        
        from utils.repository_explorer import RepositoryExplorer
        
        explorer = RepositoryExplorer(working_directory)
        exploration_result = await explorer.explore_for_task(
            task_description=task.description,
            files_mentioned=task.files_to_modify if hasattr(task, 'files_to_modify') else None,
            max_files_to_read=15
        )
        
        # Construire un r√©sum√© du contexte
        repository_context = explorer.build_context_summary(exploration_result)
        
        # Stocker dans l'√©tat pour r√©f√©rence
        state["results"]["repository_context"] = exploration_result
        state["results"]["repository_context_summary"] = repository_context
        
        logger.info(f"‚úÖ Exploration termin√©e: {len(exploration_result['files_read'])} fichiers analys√©s")
        logger.info(f"‚úÖ {len(exploration_result['patterns_detected'])} patterns d√©tect√©s")
        state["results"]["ai_messages"].append(f"üîç Repository explor√©: {len(exploration_result['files_read'])} fichiers analys√©s")
        
        logger.info("=" * 70)
        
        # 2. Cr√©er un prompt d√©taill√© avec instructions adaptatives
        previous_errors = state["results"].get("error_logs", []) if hasattr(state, "results") else []
        implementation_prompt = await _create_implementation_prompt(
            task, 
            project_analysis.get("structure", "Structure non disponible"), 
            previous_errors,
            language_info=project_analysis.get("language_info"),  # ‚úÖ NOUVEAU: Passer LanguageInfo
            repository_context=repository_context  # ‚úÖ CRITIQUE: Contexte du code analys√©
        )
        
        logger.info("ü§ñ G√©n√©ration du plan d'impl√©mentation avec le moteur IA...")
        
        # ‚úÖ NOUVEAU: Tentative avec LangChain pour plan structur√© (√âtape 1)
        structured_plan = None
        plan_metrics = None
        use_legacy_plan = False
        
        try:
            from ai.chains.implementation_plan_chain import (
                generate_implementation_plan,
                extract_plan_metrics
            )
            
            logger.info("üîó Tentative g√©n√©ration plan structur√© via LangChain...")
            state["results"]["ai_messages"].append("üîó G√©n√©ration plan structur√©...")
            
            # G√©n√©rer le plan structur√© avec fallback automatique
            # ‚úÖ Passer run_step_id pour enregistrer les interactions IA
            run_step_id = state.get("db_step_id")
            structured_plan = await generate_implementation_plan(
                task_title=task.title,
                task_description=task.description,
                task_type=str(task.task_type) if hasattr(task, 'task_type') else "feature",
                additional_context={
                    "project_analysis": project_analysis.get("structure", "Non disponible"),
                    "previous_errors": previous_errors[-3:] if previous_errors else []
                },
                provider="openai",
                fallback_to_openai=True,
                run_step_id=run_step_id
            )
            
            # Extraire les m√©triques du plan
            plan_metrics = extract_plan_metrics(structured_plan)
            
            # Stocker le plan structur√© dans les r√©sultats
            state["results"]["implementation_plan_structured"] = structured_plan.dict()
            state["results"]["implementation_plan_metrics"] = plan_metrics
            
            logger.info(f"‚úÖ Plan structur√© g√©n√©r√©: {plan_metrics['total_steps']} √©tapes, complexit√©={plan_metrics['total_complexity']}")
            state["results"]["ai_messages"].append(
                f"‚úÖ Plan structur√©: {plan_metrics['total_steps']} √©tapes, "
                f"complexit√© totale={plan_metrics['total_complexity']}, "
                f"risques √©lev√©s={plan_metrics['high_risk_steps_count']}"
            )
            
            # Convertir le plan structur√© en texte pour compatibilit√© avec l'ex√©cution legacy
            implementation_plan = _convert_structured_plan_to_text(structured_plan)
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è √âchec g√©n√©ration plan structur√© via LangChain: {e}")
            logger.info("üîÑ Fallback vers g√©n√©ration plan legacy...")
            state["results"]["ai_messages"].append("‚ö†Ô∏è Plan structur√© √©chou√©, utilisation m√©thode classique")
            use_legacy_plan = True
        
        # Fallback vers l'ancienne m√©thode si LangChain a √©chou√©
        if use_legacy_plan or structured_plan is None:
            logger.info("ü§ñ G√©n√©ration du plan d'impl√©mentation (m√©thode legacy)...")
            
            # 3. Utiliser le moteur IA multi-provider pour cr√©er un plan d'impl√©mentation
            ai_request = AIRequest(
                prompt=implementation_prompt,
                task_type=TaskType.CODE_GENERATION,
                context={
                    "task": task.dict(), 
                    "project_analysis": project_analysis,
                    "workflow_id": state.get("workflow_id", "unknown"),
                    "task_id": task.task_id
                }
            )
            
            try:
                response = await ai_hub.generate_code(ai_request)
            except Exception as e:
                error_msg = f"Erreur lors de l'appel au moteur IA: {e}"
                state["results"]["error_logs"].append(error_msg)
                state["results"]["ai_messages"].append(f"‚ùå {error_msg}")
                state["results"]["should_continue"] = False
                state["results"]["current_status"] = "failed"
                return state
            
            if not response.success:
                error_msg = f"Erreur lors de la g√©n√©ration du plan: {response.error}"
                state["results"]["error_logs"].append(error_msg)
                state["results"]["ai_messages"].append(f"‚ùå {error_msg}")
                state["results"]["last_operation_result"] = error_msg
                state["results"]["should_continue"] = False
                state["results"]["current_status"] = "failed".lower()
                return state
            
            implementation_plan = response.content
            state["results"]["ai_messages"].append(f"üìã Plan g√©n√©r√© (legacy):\n{implementation_plan[:200]}...")
        
        # 4. Ex√©cuter le plan d'impl√©mentation
        success = await _execute_implementation_plan(
            claude_tool, anthropic_client, openai_client, implementation_plan, task, state
        )
        
        # ‚úÖ ROBUSTESSE: D√©finir syst√©matiquement tous les flags de statut
        implementation_result = _validate_implementation_result(success, state)
        
        if implementation_result["success"]:
            # Impl√©mentation r√©ussie
            state["results"]["ai_messages"].append("‚úÖ Impl√©mentation termin√©e avec succ√®s")
            state["results"]["last_operation_result"] = "Impl√©mentation r√©ussie"
            state["results"]["implementation_success"] = True
            state["results"]["current_status"] = "implemented"
            state["results"]["implementation_metrics"] = implementation_result["metrics"]
            logger.info(f"‚úÖ Impl√©mentation termin√©e avec succ√®s - {implementation_result['summary']}")
        else:
            # Impl√©mentation √©chou√©e
            failure_reason = implementation_result.get("failure_reason", "Raison inconnue")
            state["results"]["ai_messages"].append(f"‚ùå √âchec de l'impl√©mentation: {failure_reason}")
            state["results"]["last_operation_result"] = f"√âchec impl√©mentation: {failure_reason}"
            state["results"]["implementation_success"] = False
            state["results"]["current_status"] = "implementation_failed"
            state["results"]["implementation_error_details"] = implementation_result.get("error_details", {})
            logger.error(f"‚ùå √âchec de l'impl√©mentation: {failure_reason}")
        
        # ‚úÖ NOMENCLATURE: Utiliser un statut de continuation coh√©rent
        state["results"]["should_continue"] = True
        state["results"]["workflow_stage"] = "implementation_completed"
        
    except Exception as e:
        error_msg = f"Exception critique lors de l'impl√©mentation: {str(e)}"
        logger.error(error_msg, exc_info=True)
        
        # ‚úÖ ROBUSTESSE: Garantir que tous les flags sont d√©finis m√™me en cas d'exception
        state["results"]["error_logs"].append(error_msg)
        state["results"]["ai_messages"].append(f"‚ùå Exception critique: {error_msg}")
        state["results"]["last_operation_result"] = error_msg
        state["results"]["implementation_success"] = False  # ‚úÖ CRITIQUE: Toujours d√©finir ce flag
        state["results"]["current_status"] = "implementation_exception"
        state["results"]["workflow_stage"] = "implementation_failed"
        state["results"]["should_continue"] = True
    
    logger.info("üèÅ Impl√©mentation termin√©e")
    return state


def _validate_implementation_result(success: bool, state: Dict[str, Any]) -> Dict[str, Any]:
    """
    Valide et enrichit le r√©sultat d'impl√©mentation avec des m√©triques d√©taill√©es.
    
    Args:
        success: R√©sultat brut de l'impl√©mentation
        state: √âtat du workflow pour extraire les m√©triques
        
    Returns:
        Dictionnaire avec les d√©tails de validation et m√©triques
    """
    result = {
        "success": False,
        "failure_reason": None,
        "error_details": {},
        "metrics": {},
        "summary": ""
    }
    
    try:
        # ‚úÖ VALIDATION: Analyser les r√©sultats d√©taill√©s
        results = state.get("results", {})
        
        # Compter les fichiers modifi√©s
        modified_files = results.get("modified_files", [])
        code_changes = results.get("code_changes", {})
        error_logs = results.get("error_logs", [])
        
        # M√©triques de base
        result["metrics"] = {
            "files_modified": len(modified_files),
            "code_changes_count": len(code_changes),
            "error_count": len(error_logs),
            "has_errors": len(error_logs) > 0
        }
        
        if success:
            # Validation suppl√©mentaire pour succ√®s
            if len(modified_files) == 0 and len(code_changes) == 0:
                # Succ√®s mais aucun fichier modifi√© - suspect
                result["success"] = False
                result["failure_reason"] = "Aucun fichier modifi√© d√©tect√© malgr√© le succ√®s apparent"
                result["error_details"]["validation"] = "No files were actually modified"
            elif len(error_logs) > 0:
                # Succ√®s mais avec des erreurs - succ√®s partiel
                result["success"] = True
                result["summary"] = f"{len(modified_files)} fichier(s) modifi√©(s) avec {len(error_logs)} avertissement(s)"
                logger.warning(f"‚ö†Ô∏è Impl√©mentation r√©ussie mais avec {len(error_logs)} erreur(s)")
            else:
                # Succ√®s complet
                result["success"] = True
                result["summary"] = f"{len(modified_files)} fichier(s) modifi√©(s) sans erreur"
        else:
            # Analyser la cause d'√©chec
            if len(error_logs) > 0:
                result["failure_reason"] = f"Erreurs d√©tect√©es: {error_logs[-1]}"  # Derni√®re erreur
                result["error_details"]["last_error"] = error_logs[-1]
                result["error_details"]["total_errors"] = len(error_logs)
            else:
                result["failure_reason"] = "√âchec sans erreur sp√©cifique d√©tect√©e"
                result["error_details"]["analysis"] = "No specific error found in logs"
        
        # Ajouter contexte temporel si disponible
        if "started_at" in state:
            result["metrics"]["execution_context"] = {
                "started_at": state["started_at"],
                "workflow_id": state.get("workflow_id", "unknown")
            }
            
    except Exception as e:
        logger.error(f"‚ùå Erreur validation r√©sultat impl√©mentation: {e}")
        result["success"] = False
        result["failure_reason"] = f"Erreur de validation: {str(e)}"
        result["error_details"]["validation_error"] = str(e)
    
    return result

async def _analyze_project_structure(claude_tool: ClaudeCodeTool) -> Dict[str, Any]:
    """
    Analyse la structure du projet avec enrichissement LLM.
    
    Combine d√©tection automatique + analyse LLM pour cas complexes.
    """
    try:
        # 1. Lister TOUS les fichiers
        ls_result = await claude_tool._arun(
            action="execute_command", 
            command="find . -type f -not -path './.git/*' -not -path './venv/*' -not -path './node_modules/*' | head -50"
        )
        
        structure_info = "Structure du projet:\n"
        files_found = []
        
        if ls_result["success"]:
            structure_info += ls_result["stdout"]
            files_found = ls_result["stdout"].strip().split('\n') if ls_result["stdout"].strip() else []
        
        # 2. Lire README si disponible
        readme_content = None
        try:
            readme_result = await claude_tool._arun(action="read_file", file_path="README.md", required=False)
            if readme_result["success"]:
                readme_content = readme_result.get("content", "")[:2000]
        except:
            pass
        
        # 3. Lire package.json si disponible
        package_json_content = None
        try:
            pkg_result = await claude_tool._arun(action="read_file", file_path="package.json", required=False)
            if pkg_result["success"]:
                package_json_content = pkg_result.get("content", "")[:1000]
        except:
            pass
        
        # 4. Lire requirements.txt si disponible
        requirements_content = None
        try:
            req_result = await claude_tool._arun(action="read_file", file_path="requirements.txt", required=False)
            if req_result["success"]:
                requirements_content = req_result.get("content", "")[:1000]
        except:
            pass
        
        # 5. ‚ú® NOUVEAU : D√©tection enrichie avec LLM
        from utils.llm_enhanced_detector import detect_project_with_llm
        
        logger.info("ü§ñ Analyse du projet avec enrichissement LLM...")
        
        enhanced_info = await detect_project_with_llm(
            files=files_found,
            readme_content=readme_content,
            package_json_content=package_json_content,
            requirements_txt_content=requirements_content,
            use_llm=True  # Activer l'analyse LLM
        )
        
        # 6. Logger les r√©sultats
        logger.info(f"üìä Langage principal: {enhanced_info.primary_language.name} (confiance: {enhanced_info.confidence:.2f})")
        logger.info(f"üìä Type de projet: {enhanced_info.project_type}")
        logger.info(f"üìä Framework: {enhanced_info.framework or 'Aucun'}")
        logger.info(f"üìä Stack technique: {', '.join(enhanced_info.tech_stack)}")
        logger.info(f"üìä Architecture: {enhanced_info.architecture}")
        
        if enhanced_info.secondary_languages:
            logger.info(f"üìä Langages secondaires: {', '.join(enhanced_info.secondary_languages)}")
        
        # 7. Construire le retour avec informations enrichies
        return {
            "language_info": enhanced_info.primary_language,
            "enhanced_info": enhanced_info,  # ‚ú® NOUVEAU
            "project_type": enhanced_info.primary_language.type_id,
            "structure_text": structure_info,
            "files": files_found,
            "main_language": enhanced_info.primary_language.name,
            "confidence": enhanced_info.confidence,
            "extensions": enhanced_info.primary_language.primary_extensions,
            "build_files": enhanced_info.primary_language.build_files,
            "conventions": enhanced_info.primary_language.conventions,
            # Nouvelles informations enrichies
            "detected_framework": enhanced_info.framework,
            "detected_project_type": enhanced_info.project_type,
            "tech_stack": enhanced_info.tech_stack,
            "architecture": enhanced_info.architecture,
            "llm_recommendations": enhanced_info.recommendations
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'analyse du projet: {e}", exc_info=True)
        # Fallback sur d√©tection de base
        from utils.language_detector import detect_language, LanguageInfo
        
        basic_detection = detect_language(files_found if 'files_found' in locals() else [])
        
        return {
            "language_info": basic_detection,
            "enhanced_info": None,
            "project_type": basic_detection.type_id,
            "structure_text": "Structure du projet non disponible",
            "files": [],
            "main_language": basic_detection.name,
            "confidence": basic_detection.confidence,
            "extensions": basic_detection.primary_extensions,
            "build_files": basic_detection.build_files,
            "conventions": basic_detection.conventions
        }

# ‚úÖ ANCIENNES FONCTIONS SUPPRIM√âES - Remplac√©es par le syst√®me g√©n√©rique
# Les fonctions _detect_project_type, _get_main_language, _get_config_files_for_project_type
# et _get_language_specific_instructions ont √©t√© remplac√©es par:
# - utils.language_detector.detect_language()
# - utils.instruction_generator.get_adaptive_prompt_supplement()


async def _create_implementation_prompt(
    task, 
    project_analysis: str, 
    error_logs: List[str],
    language_info=None,  # ‚úÖ NOUVEAU: Objet LanguageInfo au lieu de project_type/main_language
    repository_context: Optional[str] = None  # ‚úÖ CRITIQUE: Contexte du repository analys√©
) -> str:
    """
    Cr√©e un prompt d√©taill√© pour l'impl√©mentation avec instructions adaptatives.
    
    Args:
        task: T√¢che √† impl√©menter
        project_analysis: Analyse du projet (texte)
        error_logs: Erreurs pr√©c√©dentes
        language_info: Objet LanguageInfo du d√©tecteur (si disponible)
        repository_context: Contexte riche du repository (code lu et analys√©)
    
    Returns:
        Prompt complet avec instructions adaptatives
    """
    # ‚úÖ AM√âLIORATION: Extraction intelligente des sp√©cifications techniques
    extracted_specs = _extract_technical_specifications(task.description)
    
    # ‚úÖ NOUVEAU SYST√àME G√âN√âRIQUE: G√©n√©rer instructions adaptatives
    if language_info:
        from utils.instruction_generator import get_adaptive_prompt_supplement
        
        # G√©n√©rer automatiquement les instructions adapt√©es au langage
        language_instructions = get_adaptive_prompt_supplement(language_info)
        main_language = language_info.name
        project_type = language_info.type_id
        confidence = language_info.confidence
    else:
        # Fallback si language_info non disponible
        logger.warning("‚ö†Ô∏è Aucune info de langage disponible - utilisation d'instructions g√©n√©riques")
        language_instructions = """
‚ö†Ô∏è TYPE DE PROJET NON D√âTECT√â

Analyse le code existant pour identifier:
- Le langage de programmation utilis√©
- Les conventions de nommage
- La structure des fichiers
- Les build tools

Puis g√©n√®re du code coh√©rent avec le projet existant.
"""
        main_language = "Unknown"
        project_type = "unknown"
        confidence = 0.0
    
    prompt = f"""Tu es un d√©veloppeur expert. Tu dois impl√©menter la t√¢che suivante dans un projet existant.

{language_instructions}

## T√ÇCHE √Ä IMPL√âMENTER
**Titre**: {task.title}

**Description compl√®te**: 
{task.description}

**Sp√©cifications techniques extraites**:
{extracted_specs}

**Branche**: {task.branch_name}
**Priorit√©**: {task.priority}

## CONTEXTE DU PROJET
{project_analysis}"""
    
    # ‚ú® NOUVEAU : Ajouter contexte enrichi si disponible
    enhanced_info = project_analysis.get('enhanced_info') if isinstance(project_analysis, dict) else None
    if enhanced_info and hasattr(enhanced_info, 'description'):
        prompt += f"""

## ü§ñ ANALYSE ENRICHIE DU PROJET

**Type de projet d√©tect√©**: {enhanced_info.project_type}
**Framework**: {enhanced_info.framework or 'Aucun framework sp√©cifique d√©tect√©'}
**Architecture**: {enhanced_info.architecture}
**Stack technique compl√®te**: {', '.join(enhanced_info.tech_stack)}

**Description du projet**:
{enhanced_info.description}

**Recommandations du LLM pour l'impl√©mentation**:
"""
        for i, rec in enumerate(enhanced_info.recommendations, 1):
            prompt += f"\n{i}. {rec}"
        
        if enhanced_info.secondary_languages:
            prompt += f"""

**‚ö†Ô∏è ATTENTION - Langages secondaires d√©tect√©s**: {', '.join(enhanced_info.secondary_languages)}
Assure-toi que ton impl√©mentation est compatible avec ces langages si n√©cessaire.
"""
    
    # ‚úÖ AJOUT CRITIQUE: Injecter le contexte du repository analys√©
    if repository_context:
        prompt += f"""

{repository_context}

‚ö†Ô∏è **R√àGLE ABSOLUE**: Tu DOIS respecter STRICTEMENT les patterns, conventions et architecture d√©tect√©s ci-dessus.
Le code g√©n√©r√© doit s'int√©grer parfaitement dans le code existant.
"""
    
    prompt += f"""

## HISTORIQUE D'ERREURS (si tentatives pr√©c√©dentes)
{chr(10).join(error_logs) if error_logs else "Aucune erreur pr√©c√©dente"}

## INSTRUCTIONS D√âTAILL√âES

1. **Analyse** d'abord le code existant pour comprendre l'architecture
2. **Identifie** les patterns et conventions utilis√©s dans le projet
3. **Extrait** les sp√©cifications exactes de la description (endpoints, fonctionnalit√©s, etc.)
4. **Planifie** les modifications n√©cessaires en respectant l'architecture existante
5. **Impl√©mente** les changements de mani√®re incr√©mentale EN {main_language}

R√©ponds avec un plan d'impl√©mentation structur√© sous cette forme:

```
PLAN D'IMPL√âMENTATION

## 1. ANALYSE DE LA T√ÇCHE
- [Ce que tu comprends exactement de la demande]
- [Sp√©cifications techniques identifi√©es]
- [Architecture cible √† impl√©menter]

## 2. ANALYSE DU PROJET EXISTANT
- [Fichiers importants identifi√©s]
- [Patterns et conventions observ√©s]
- [Architecture actuelle comprise]

## 3. MODIFICATIONS REQUISES
### Nouveaux fichiers √† cr√©er:
- [Liste des nouveaux fichiers avec leur r√¥le]

### Fichiers existants √† modifier:
- [Liste des fichiers √† modifier avec description des changements]

## 4. √âTAPES D'EX√âCUTION D√âTAILL√âES
1. [Premi√®re √©tape avec commandes/modifications pr√©cises]
2. [Deuxi√®me √©tape avec commandes/modifications pr√©cises]
3. [etc.]

## 5. TESTS ET VALIDATION
- [Tests ou validations √† effectuer]
- [Comment v√©rifier que l'impl√©mentation fonctionne]
```

**IMPORTANT**: Sois extr√™mement pr√©cis dans l'extraction des sp√©cifications. Si la description mentionne un endpoint sp√©cifique, assure-toi de l'impl√©menter exactement comme demand√©."""

    return prompt


def _extract_technical_specifications(description: str) -> str:
    """Extrait les sp√©cifications techniques d'une description de t√¢che."""
    import re
    
    specs = []
    
    # Extraction d'endpoints
    endpoint_patterns = [
        r'endpoint\s+["`]([^"`]+)["`]',
        r'endpoint\s+([/\w-]+)',
        r'API\s+["`]([^"`]+)["`]',
        r'route\s+["`]([^"`]+)["`]',
        r'(/\w+(?:/\w+)*)',  # URLs g√©n√©riques
    ]
    
    for pattern in endpoint_patterns:
        matches = re.findall(pattern, description, re.IGNORECASE)
        for match in matches:
            if match.startswith('/'):
                specs.append(f"‚Ä¢ Endpoint √† cr√©er: {match}")
    
    # Extraction de types de fonctionnalit√©s
    feature_patterns = [
        (r'visualiser\s+([^.]+)', "‚Ä¢ Fonctionnalit√© de visualisation: {}"),
        (r'monitorer\s+([^.]+)', "‚Ä¢ Fonctionnalit√© de monitoring: {}"),
        (r'tracker?\s+([^.]+)', "‚Ä¢ Fonctionnalit√© de tracking: {}"),
        (r'dashboard\s+([^.]+)', "‚Ä¢ Dashboard √† cr√©er: {}"),
        (r'rapport\s+([^.]+)', "‚Ä¢ Rapport √† g√©n√©rer: {}"),
        (r'afficher\s+([^.]+)', "‚Ä¢ Affichage requis: {}"),
    ]
    
    for pattern, template in feature_patterns:
        matches = re.findall(pattern, description, re.IGNORECASE)
        for match in matches:
            specs.append(template.format(match.strip()))
    
    # Extraction de technologies/frameworks
    tech_patterns = [
        (r'FastAPI', "‚Ä¢ Utiliser FastAPI pour les endpoints"),
        (r'React', "‚Ä¢ Interface React requise"),
        (r'Vue', "‚Ä¢ Interface Vue.js requise"),
        (r'PostgreSQL', "‚Ä¢ Base de donn√©es PostgreSQL"),
        (r'MongoDB', "‚Ä¢ Base de donn√©es MongoDB"),
        (r'REST API', "‚Ä¢ API REST √† impl√©menter"),
        (r'GraphQL', "‚Ä¢ API GraphQL √† impl√©menter"),
    ]
    
    for pattern, spec in tech_patterns:
        if re.search(pattern, description, re.IGNORECASE):
            specs.append(spec)
    
    # Extraction de donn√©es/entit√©s
    data_patterns = [
        (r'co√ªts?\s+([^.]+)', "‚Ä¢ Donn√©es de co√ªts: {}"),
        (r'm√©triques?\s+([^.]+)', "‚Ä¢ M√©triques: {}"),
        (r'statistiques?\s+([^.]+)', "‚Ä¢ Statistiques: {}"),
        (r'logs?\s+([^.]+)', "‚Ä¢ Logs: {}"),
    ]
    
    for pattern, template in data_patterns:
        matches = re.findall(pattern, description, re.IGNORECASE)
        for match in matches:
            specs.append(template.format(match.strip()))
    
    # Extraction de providers/services
    provider_patterns = [
        (r'provider[s]?\s+([^.]+)', "‚Ä¢ Providers: {}"),
        (r'service[s]?\s+([^.]+)', "‚Ä¢ Services: {}"),
        (r'(Claude|OpenAI|Anthropic)', "‚Ä¢ Provider IA: {}"),
    ]
    
    for pattern, template in provider_patterns:
        matches = re.findall(pattern, description, re.IGNORECASE)
        for match in matches:
            specs.append(template.format(match.strip()))
    
    if not specs:
        specs.append("‚Ä¢ Aucune sp√©cification technique sp√©cifique d√©tect√©e")
        specs.append("‚Ä¢ Analyse manuelle de la description requise")
    
    return "\n".join(specs)

async def _execute_implementation_plan(
    claude_tool: ClaudeCodeTool, 
    anthropic_client: Client,
    openai_client: AsyncOpenAI,
    implementation_plan: str,
    task,
    state: Dict[str, Any]
) -> bool:
    """Ex√©cute le plan d'impl√©mentation √©tape par √©tape."""
    
    try:
        logger.info("üöÄ Ex√©cution du plan d'impl√©mentation...")
    # Initialiser ai_messages si n√©cessaire
        
        # ‚úÖ FIX: R√©cup√©rer les infos de langage pour instructions adaptatives
        language_info = state.get("results", {}).get("language_info")
        language_specific_instructions = ""
        
        if language_info and hasattr(language_info, 'name'):
            from utils.instruction_generator import get_adaptive_prompt_supplement
            language_specific_instructions = f"""

## üéØ INSTRUCTIONS SP√âCIFIQUES AU LANGAGE {language_info.name.upper()}

{get_adaptive_prompt_supplement(language_info)}

‚ö†Ô∏è RESPECTE STRICTEMENT ces conventions et patterns pour {language_info.name}.
"""
        
        # ‚úÖ AJOUT CRITIQUE: R√©cup√©rer le contexte du repository
        repository_context_exec = state.get("results", {}).get("repository_context_summary", "")
        if repository_context_exec:
            language_specific_instructions += f"""

{repository_context_exec}
"""
        
        # Cr√©er un prompt pour l'ex√©cution du plan
        execution_prompt = f"""üöÄ TU DOIS MAINTENANT IMPL√âMENTER LA FONCTIONNALIT√â EN MODIFIANT LES FICHIERS !

‚ö†Ô∏è **MISSION CRITIQUE** : IMPL√âMENTE la fonctionnalit√© demand√©e en CR√âANT/MODIFIANT les fichiers du projet.
Tu ne dois PAS juste lire ou analyser, tu dois √âCRIRE DU CODE FONCTIONNEL.

PLAN √Ä IMPL√âMENTER:
{implementation_plan}

FONCTIONNALIT√â √Ä IMPL√âMENTER:
{task.description}

{language_specific_instructions}

‚ö†Ô∏è IMPORTANT: Tu travailles dans un repository Git D√âJ√Ä CLON√â. 
- NE PAS utiliser 'git clone' - le repository est d√©j√† disponible localement
- NE PAS cr√©er de nouveaux r√©pertoires pour le repository
- Travaille directement dans le r√©pertoire actuel

üéØ R√àGLES ABSOLUES - AUCUNE EXCEPTION:
1. ‚ùå NE JAMAIS utiliser execute_command avec cat/echo/touch pour cr√©er/modifier des fichiers
2. ‚úÖ TOUJOURS utiliser action:modify_file pour CR√âER ou MODIFIER un fichier
3. ‚úÖ Tu DOIS g√©n√©rer du code COMPLET et FONCTIONNEL (pas de TODO, pas de placeholders)
4. ‚úÖ Si un fichier existe d√©j√†, action:modify_file le remplacera compl√®tement
5. ‚úÖ RESPECTE STRICTEMENT les conventions et patterns du code existant

Pour chaque fichier que tu dois CR√âER ou MODIFIER, utilise ce format EXACT:

```action:modify_file
file_path: chemin/vers/fichier.txt
description: Cr√©ation du fichier avec son contenu
content:
[Le contenu COMPLET du fichier √† cr√©er/modifier]
```

üìù EXEMPLE CONCRET - AJOUTER UNE M√âTHODE count() √Ä GenericDAO.java:

```action:modify_file
file_path: src/database/core/GenericDAO.java
description: Ajout de la m√©thode count() pour compter les enregistrements
content:
package database.core;

import java.sql.*;
import java.util.*;

public class GenericDAO<T> {{
    // ... code existant ...
    
    /**
     * Compte le nombre total d'enregistrements dans la table
     * @return Le nombre d'enregistrements
     * @throws SQLException en cas d'erreur SQL
     */
    public long count() throws SQLException {{
        String sql = "SELECT COUNT(*) FROM " + tableName;
        try (PreparedStatement stmt = connection.prepareStatement(sql);
             ResultSet rs = stmt.executeQuery()) {{
            if (rs.next()) {{
                return rs.getLong(1);
            }}
            return 0;
        }}
    }}
    
    // ... reste du code existant ...
}}
```

‚ö†Ô∏è **CE QU'IL NE FAUT JAMAIS FAIRE**:
‚ùå ```action:execute_command
command: cat src/database/core/GenericDAO.java
``` 
‚Üí Ceci ne MODIFIE PAS le fichier, √ßa ne fait que le LIRE !

‚ùå ```action:execute_command
command: echo "code" >> GenericDAO.java
```
‚Üí N'utilise JAMAIS echo/cat/touch pour modifier des fichiers !

‚úÖ **CE QU'IL FAUT FAIRE**:
```action:modify_file
file_path: src/database/core/GenericDAO.java
description: Impl√©mentation de la m√©thode count()
content:
[CODE COMPLET DU FICHIER AVEC LA NOUVELLE M√âTHODE]
```

üéØ COMMENCE MAINTENANT L'IMPL√âMENTATION avec action:modify_file !
Tu DOIS modifier les fichiers pour impl√©menter la fonctionnalit√© demand√©e."""

        # Appeler LLM avec fallback automatique
        execution_steps, provider_used = await _call_llm_with_fallback(
            anthropic_client, openai_client, execution_prompt, max_tokens=4000
        )
        
        logger.info(f"‚úÖ Plan d'ex√©cution g√©n√©r√© avec {provider_used}")
        
        # Parser et ex√©cuter les actions
        success = await _parse_and_execute_actions(claude_tool, execution_steps, state)
        
        return success
        
    except Exception as e:
        logger.error(f"Erreur lors de l'ex√©cution du plan: {e}")
        state["results"]["error_logs"].append(f"Erreur ex√©cution plan: {str(e)}")
        return False

async def _parse_and_execute_actions(claude_tool: ClaudeCodeTool, execution_text: str, state: Dict[str, Any]) -> bool:
    """Parse le texte d'ex√©cution et effectue les actions."""
    
    import re
    import hashlib
    
    success_count = 0
    total_actions = 0
    
    # ‚úÖ AM√âLIORATION: Patterns de d√©tection plus robustes pour les actions
    action_patterns = [
        # Format original
        r'```action:(\w+)\n(.*?)\n```',
        # Format avec espace
        r'```action:\s*(\w+)\n(.*?)```',
        # Format sans newline
        r'```action:(\w+)(.*?)```',
        # Format markdown standard avec indication d'action
        r'```(\w+)\s*#\s*action\n(.*?)```'
    ]
    
    actions = []
    for pattern in action_patterns:
        found_actions = re.findall(pattern, execution_text, re.DOTALL | re.MULTILINE)
        if found_actions:
            actions.extend(found_actions)
            logger.info(f"‚úÖ {len(found_actions)} action(s) d√©tect√©e(s) avec pattern: {pattern[:30]}...")
    
    # ‚úÖ FALLBACK: Si aucune action structur√©e, essayer de d√©tecter intention
    if not actions:
        logger.warning("‚ö†Ô∏è Aucune action structur√©e d√©tect√©e - analyse du contenu...")
        actions = await _detect_implicit_actions(execution_text)
    
    # ‚úÖ CORRECTION CRITIQUE: D√©duplication des actions identiques
    seen_actions = set()
    deduplicated_actions = []
    duplicate_count = 0
    duplicate_types = []
    
    for action_type, action_content in actions:
        # Cr√©er un hash unique pour cette action
        action_hash = hashlib.md5(f"{action_type}:{action_content.strip()}".encode()).hexdigest()
        
        if action_hash in seen_actions:
            duplicate_count += 1
            duplicate_types.append(action_type)
            continue
        
        seen_actions.add(action_hash)
        deduplicated_actions.append((action_type, action_content))
    
    # ‚úÖ AM√âLIORATION: Un seul message de r√©sum√© au lieu d'un warning par action
    if duplicate_count > 0:
        from collections import Counter
        type_counts = Counter(duplicate_types)
        types_summary = ", ".join([f"{count}x {t}" for t, count in type_counts.items()])
        logger.info(f"üßπ {duplicate_count} action(s) dupliqu√©e(s) ignor√©e(s) ({types_summary})")
    
    logger.info(f"üìä Actions uniques √† ex√©cuter: {len(deduplicated_actions)}")
    
    for action_type, action_content in deduplicated_actions:
        total_actions += 1
        logger.info(f"üîß Ex√©cution action: {action_type}")
        logger.debug(f"üìÑ Contenu action (premiers 200 chars): {action_content[:200]}...")
        
        try:
            if action_type == "modify_file" or action_type == "create_file" or action_type == "write_file":
                success = await _execute_file_modification(claude_tool, action_content, state)
            elif action_type == "execute_command" or action_type == "run_command":
                # ‚úÖ VALIDATION: Bloquer les commandes de lecture inutiles qui devraient √™tre des cr√©ations de fichier
                command_line = action_content.strip()
                if "command:" in command_line:
                    command_line = command_line.split("command:", 1)[1].strip()
                
                # ‚úÖ CORRECTION CRITIQUE: Bloquer les commandes Git qui sont g√©r√©es par finalize_pr
                git_commands_blocked = ["git add", "git commit", "git push"]
                if any(cmd in command_line.lower() for cmd in git_commands_blocked):
                    logger.warning(f"‚õî Commande Git bloqu√©e: {command_line[:50]}")
                    logger.info("üí° Les op√©rations Git (add/commit/push) sont g√©r√©es automatiquement par le n≈ìud de finalisation")
                    # Marquer comme succ√®s pour ne pas faire √©chouer le workflow
                    success_count += 1
                    continue
                
                # D√©tecter les anti-patterns (seulement pour modifications, pas lecture)
                # cat seul est OK (lecture), mais cat avec > ou >> est suspect (√©criture)
                is_suspicious = False
                if "echo " in command_line.lower() and ">" in command_line:
                    is_suspicious = True
                elif "touch " in command_line.lower():
                    is_suspicious = True
                elif "cat " in command_line.lower() and (">" in command_line or ">>" in command_line):
                    is_suspicious = True
                
                if is_suspicious:
                    logger.warning(f"‚ö†Ô∏è Commande suspecte d√©tect√©e: {command_line[:50]}...")
                    logger.warning("üí° Cette commande devrait probablement √™tre une action:modify_file")
                    # Continuer quand m√™me pour ne pas bloquer compl√®tement
                
                success = await _execute_command_action(claude_tool, action_content, state)
            else:
                logger.warning(f"Type d'action non reconnu: {action_type}")
                continue
            
            if success:
                success_count += 1
            else:
                logger.warning(f"‚ö†Ô∏è Action {action_type} √©chou√©e - voir logs pour d√©tails")
                
        except Exception as e:
            logger.error(f"‚ùå Exception lors de l'action {action_type}: {e}", exc_info=True)
            state["results"]["error_logs"].append(f"Erreur action {action_type}: {str(e)}")
    
    # Si aucune action explicite trouv√©e, essayer de traiter comme modification directe
    if total_actions == 0:
        logger.info("Aucune action structur√©e trouv√©e, tentative de traitement direct...")
    # Initialiser ai_messages si n√©cessaire
        # Essayer d'extraire des blocs de code Python/JS
        code_blocks = re.findall(r'```(?:python|javascript|typescript)?\n(.*?)\n```', execution_text, re.DOTALL)
        
        if code_blocks:
            # Traiter le premier bloc de code comme une modification
            await _handle_direct_code_modification(claude_tool, code_blocks[0], state)
            return True
    
    success_rate = success_count / max(total_actions, 1)
    logger.info(f"üìä Actions ex√©cut√©es: {success_count}/{total_actions} (taux: {success_rate:.1%})")
    # Initialiser ai_messages si n√©cessaire
    
    return success_rate >= 0.5  # Au moins 50% de succ√®s

async def _detect_implicit_actions(execution_text: str) -> list:
    """
    D√©tecte les actions implicites dans le texte d'ex√©cution.
    Utile quand Claude ne suit pas exactement le format demand√©.
    """
    import re
    
    actions = []
    
    # D√©tecter les blocs de code avec nom de fichier mentionn√©
    file_with_code_pattern = r'(?:fichier|file|cr√©er|create|modifier|modify)\s*[:`]?\s*([a-zA-Z0-9_./\\-]+\.[a-z]+)[:`]?\s*```(?:python|javascript|typescript|js|py|jsx|tsx|html|css)?\n(.*?)```'
    
    matches = re.findall(file_with_code_pattern, execution_text, re.DOTALL | re.IGNORECASE)
    for file_path, code_content in matches:
        # Formater comme une action modify_file
        formatted_action = f"file_path: {file_path}\ndescription: Modification d√©tect√©e implicitement\ncontent:\n{code_content}"
        actions.append(("modify_file", formatted_action))
        logger.info(f"üîç Action implicite d√©tect√©e: modifier {file_path}")
    
    # D√©tecter les blocs de code seuls (sans nom de fichier explicite)
    if not actions:
        code_blocks = re.findall(r'```(?:python|javascript|typescript|js|py)?\n(.*?)```', execution_text, re.DOTALL)
        if code_blocks and len(code_blocks[0].strip()) > 50:  # Au moins 50 caract√®res
            # Essayer de deviner le nom de fichier depuis le contexte
            filename = "implementation.py" if "def " in code_blocks[0] or "import " in code_blocks[0] else "implementation.js"
            formatted_action = f"file_path: {filename}\ndescription: Code g√©n√©r√© sans nom de fichier explicite\ncontent:\n{code_blocks[0]}"
            actions.append(("modify_file", formatted_action))
            logger.info(f"üîç Code d√©tect√© sans nom de fichier - utilisation de '{filename}' par d√©faut")
    
    return actions


async def _execute_file_modification(claude_tool: ClaudeCodeTool, action_content: str, state: Dict[str, Any]) -> bool:
    """Ex√©cute une modification de fichier."""
    try:
        lines = action_content.strip().split('\n')
        file_path = None
        description = ""
        content = ""
        
        content_started = False
        for line in lines:
            if line.startswith('file_path:'):
                file_path = line.split(':', 1)[1].strip()
            elif line.startswith('description:'):
                description = line.split(':', 1)[1].strip()
            elif line.startswith('content:'):
                content_started = True
            elif content_started:
                content += line + '\n'
        
        if file_path and content:
            # Cr√©er le contexte avec workflow_id et task_id
            # ‚úÖ CORRECTION: state["task"] est un TaskRequest (BaseModel), pas un dict
            task = state.get("task")
            context = {
                "workflow_id": state.get("workflow_id", "unknown"),
                "task_id": task.task_id if task else "unknown"
            }
            
            result = await claude_tool._arun(
                action="write_file",
                file_path=file_path,
                content=content.strip(),
                context=context
            )
            
            if result["success"]:
                # ‚úÖ FIX: Valider la qualit√© du code g√©n√©r√© avant de confirmer le succ√®s
                # R√©cup√©rer les conventions d√©tect√©es pour validation contextualis√©e
                repository_context = state.get("results", {}).get("repository_context", {})
                conventions = repository_context.get("conventions", {})
                
                validation_result = await _validate_generated_code(
                    file_path, 
                    content.strip(),
                    expected_conventions=conventions
                )
                
                if not validation_result["is_valid"]:
                    warning_msg = f"‚ö†Ô∏è Code g√©n√©r√© pour {file_path} a des probl√®mes de qualit√©: {', '.join(validation_result['issues'])}"
                    logger.warning(warning_msg)
                    state["results"]["ai_messages"].append(warning_msg)
                    # Ne pas bloquer mais enregistrer les avertissements
                    if "code_quality_warnings" not in state["results"]:
                        state["results"]["code_quality_warnings"] = []
                    state["results"]["code_quality_warnings"].append({
                        "file": file_path,
                        "issues": validation_result["issues"]
                    })
                
                state["results"]["code_changes"][file_path] = content.strip()
                state["results"]["modified_files"].append(file_path)
                state["results"]["ai_messages"].append(f"‚úÖ Fichier modifi√©: {file_path}")
                logger.info(f"‚úÖ Fichier modifi√©: {file_path}")
    # Initialiser ai_messages si n√©cessaire
                return True
            else:
                error = result.get("error", "Erreur inconnue")
                state["results"]["error_logs"].append(f"√âchec modification {file_path}: {error}")
                logger.error(f"‚ùå √âchec modification {file_path}: {error}")
                return False
        
        return False
        
    except Exception as e:
        logger.error(f"Erreur modification fichier: {e}")
        return False

async def _validate_generated_code(
    file_path: str, 
    content: str,
    expected_conventions: Optional[Dict[str, Any]] = None
) -> Dict[str, Any]:
    """
    Valide la qualit√© du code g√©n√©r√© avant de l'√©crire.
    
    ‚úÖ AM√âLIORATION MAJEURE: Validation contextualis√©e avec les conventions d√©tect√©es
    
    Args:
        file_path: Chemin du fichier
        content: Contenu du code
        expected_conventions: Conventions attendues du repository (d√©tect√©es par l'explorateur)
        
    Returns:
        Dict avec is_valid (bool) et issues (list)
    """
    import re
    issues = []
    
    expected_conventions = expected_conventions or {}
    
    # 1. V√©rifier les placeholders et TODO
    placeholder_patterns = [
        r'TODO\s*:',
        r'FIXME\s*:',
        r'XXX\s*:',
        r'PLACEHOLDER',
        r'#\s*[Aa]dd\s+code\s+here',
        r'//\s*[Aa]dd\s+code\s+here',
        r'\/\*\s*[Tt]o\s+be\s+implemented',
        r'#\s*[Tt]o\s+be\s+implemented'
    ]
    
    for pattern in placeholder_patterns:
        if re.search(pattern, content, re.IGNORECASE):
            issues.append(f"Code contient des placeholders/TODO (pattern: {pattern})")
            break
    
    # 2. V√©rifier que le code n'est pas vide ou trop court
    if len(content.strip()) < 20:
        issues.append("Code trop court (moins de 20 caract√®res)")
    
    # 3. ‚ú® V√©rification universelle de la syntaxe
    extension = file_path.split('.')[-1] if '.' in file_path else ''
    
    # V√©rification Python (native, rapide)
    if extension == 'py':
        try:
            import ast
            ast.parse(content)
        except SyntaxError as e:
            issues.append(f"Erreur de syntaxe: {str(e)}")
    
    # ‚ú® V√©rifications UNIVERSELLES pour tous les langages √† accolades/parenth√®ses
    # (Java, C, C++, C#, JavaScript, TypeScript, Rust, Go, Kotlin, Swift, etc.)
    else:
        # V√©rifier les d√©limiteurs balanc√©s (universel pour presque tous les langages)
        if '{' in content or '}' in content:
            if content.count('{') != content.count('}'):
                issues.append("Accolades {} non balanc√©es")
        
        if '(' in content or ')' in content:
            if content.count('(') != content.count(')'):
                issues.append("Parenth√®ses () non balanc√©es")
        
        if '[' in content or ']' in content:
            if content.count('[') != content.count(']'):
                issues.append("Crochets [] non balanc√©s")
        
        # V√©rifier les guillemets doubles (universel)
        if content.count('"') % 2 != 0:
            issues.append("Guillemets \" non balanc√©s")
        
        # ‚ú® Apostrophes simples : NE PAS v√©rifier pour langages avec char literals
        # Langages comme Java, C, C++, C#, Rust utilisent ' pour les caract√®res: 'a', '\n'
        # JavaScript/TypeScript utilisent ' pour les strings, donc v√©rification pertinente
        char_literal_langs = ['java', 'c', 'cpp', 'cc', 'h', 'hpp', 'cs', 'rs', 'go', 'm', 'mm']
        if extension.lower() not in char_literal_langs:
            # V√©rifier apostrophes seulement pour JS/TS/Python/PHP/Ruby/etc.
            if content.count("'") % 2 != 0:
                issues.append("Apostrophes ' non balanc√©es")
    
    # 4. V√©rifier les commentaires excessifs (ratio commentaires/code)
    lines = content.split('\n')
    comment_lines = sum(1 for line in lines if line.strip().startswith(('#', '//', '/*', '*')))
    code_lines = len([line for line in lines if line.strip() and not line.strip().startswith(('#', '//', '/*', '*'))])
    
    if code_lines > 0 and comment_lines / code_lines > 0.5:
        issues.append("Trop de commentaires par rapport au code (ratio > 50%)")
    
    # 5. ‚úÖ NOUVEAU: Validation des conventions d√©tect√©es
    if expected_conventions:
        # V√©rifier convention de nommage
        if 'naming' in expected_conventions:
            expected_naming = expected_conventions['naming']
            
            if expected_naming == 'snake_case':
                # V√©rifier que les fonctions utilisent snake_case
                if re.search(r'def\s+[a-z][a-zA-Z]+[A-Z]', content):
                    issues.append(f"Convention de nommage non respect√©e: attendu {expected_naming}, trouv√© camelCase")
            
            elif expected_naming == 'camelCase':
                # V√©rifier que les fonctions utilisent camelCase
                if re.search(r'function\s+[a-z][a-z_]+_[a-z]', content):
                    issues.append(f"Convention de nommage non respect√©e: attendu {expected_naming}, trouv√© snake_case")
        
        # V√©rifier utilisation async si attendu
        if expected_conventions.get('async') and 'async ' not in content and 'await ' not in content:
            if 'def ' in content or 'function ' in content:
                issues.append("Le projet utilise du code asynchrone, mais le code g√©n√©r√© n'utilise ni async ni await")
    
    is_valid = len(issues) == 0
    
    if not is_valid:
        logger.warning(f"‚ö†Ô∏è Validation du code pour {file_path}: {len(issues)} probl√®me(s) d√©tect√©(s)")
    
    return {
        "is_valid": is_valid,
        "issues": issues,
        "file_path": file_path
    }


async def _execute_command_action(claude_tool: ClaudeCodeTool, action_content: str, state: Dict[str, Any]) -> bool:
    """Ex√©cute une commande syst√®me."""
    try:
        command = None
        for line in action_content.strip().split('\n'):
            if line.startswith('command:'):
                command = line.split(':', 1)[1].strip()
                break
        
        if command:
            # ‚úÖ VALIDATION CRITIQUE: Bloquer les commandes git clone (le repo est d√©j√† clon√©)
            if 'git clone' in command.lower():
                logger.warning(f"‚ö†Ô∏è Commande git clone bloqu√©e - le repository est d√©j√† clon√©")
                state["results"]["ai_messages"].append(f"‚ö†Ô∏è Commande git clone ignor√©e (repository d√©j√† disponible)")
                # Consid√©rer comme un succ√®s pour ne pas bloquer le workflow
                return True
            
            # ‚úÖ VALIDATION: V√©rifier l'existence de fichiers pour les commandes de lecture
            read_commands = ['cat ', 'head ', 'tail ', 'less ', 'more ']
            for read_cmd in read_commands:
                if command.strip().startswith(read_cmd):
                    # Extraire le nom du fichier de la commande (en ignorant les options)
                    parts = command.strip()[len(read_cmd):].split()
                    # Trouver le premier argument qui ne commence pas par '-'
                    file_to_read = None
                    for part in parts:
                        if not part.startswith('-'):
                            file_to_read = part
                            break
                    
                    # Si aucun fichier trouv√©, ignorer la validation
                    if not file_to_read:
                        continue
                    
                    working_dir = get_working_directory(state)
                    full_path = os.path.join(working_dir, file_to_read) if working_dir else file_to_read
                    
                    if not os.path.exists(full_path):
                        logger.warning(f"‚ö†Ô∏è Fichier inexistant pour commande de lecture: {file_to_read}")
                        state["results"]["ai_messages"].append(f"‚ö†Ô∏è Fichier '{file_to_read}' n'existe pas - commande ignor√©e")
                        # Consid√©rer comme un succ√®s pour ne pas bloquer le workflow
                        return True
            
            # ‚úÖ S√âCURIT√â: Bloquer les commandes dangereuses
            dangerous_commands = ['rm -rf /', 'dd if=', 'mkfs', ':(){:|:&};:', 'wget http']
            if any(dangerous in command.lower() for dangerous in dangerous_commands):
                logger.error(f"‚ùå Commande dangereuse bloqu√©e: {command}")
                state["results"]["error_logs"].append(f"Commande dangereuse bloqu√©e: {command}")
                return False
            
            result = await claude_tool._arun(action="execute_command", command=command)
            
            if result["success"]:
                state["results"]["ai_messages"].append(f"‚úÖ Commande ex√©cut√©e: {command}")
                logger.info(f"‚úÖ Commande ex√©cut√©e: {command}")
                return True
            else:
                error = result.get("stderr", result.get("error", "Erreur inconnue"))
                state["results"]["error_logs"].append(f"√âchec commande '{command}': {error}")
                logger.error(f"‚ùå √âchec commande '{command}': {error}")
                return False
        
        return False
        
    except Exception as e:
        logger.error(f"Erreur ex√©cution commande: {e}")
        return False

async def _handle_direct_code_modification(claude_tool: ClaudeCodeTool, code_content: str, state: Dict[str, Any]) -> bool:
    """G√®re une modification de code directe sans structure explicite."""
    try:
        # Essayer de deviner le fichier √† modifier bas√© sur le contenu
        if "def " in code_content or "import " in code_content:
            # Python
            filename = "main.py"  # Fichier par d√©faut
        elif "function " in code_content or "const " in code_content:
            # JavaScript
            filename = "main.js"
        else:
            filename = "implementation.txt"
        
        result = await claude_tool._arun(
            action="write_file",
            file_path=filename,
            content=code_content
        )
        
        if result["success"]:
            state["results"]["code_changes"][filename] = code_content
            state["results"]["modified_files"].append(filename)
            state["results"]["ai_messages"].append(f"‚úÖ Code ajout√©: {filename}")
            return True
        
        return False
        
    except Exception as e:
        logger.error(f"Erreur modification directe: {e}")
        return False


def _convert_structured_plan_to_text(structured_plan) -> str:
    """
    Convertit un plan structur√© (Pydantic) en texte pour compatibilit√© avec l'ex√©cution legacy.
    
    Args:
        structured_plan: Instance de ImplementationPlan
        
    Returns:
        Repr√©sentation texte du plan
    """
    from ai.chains.implementation_plan_chain import ImplementationPlan
    
    if not isinstance(structured_plan, ImplementationPlan):
        logger.warning("‚ö†Ô∏è Plan structur√© invalide, retour vide")
        return ""
    
    text_parts = []
    
    # En-t√™te du plan
    text_parts.append("# PLAN D'IMPL√âMENTATION STRUCTUR√â")
    text_parts.append("")
    text_parts.append(f"## R√©sum√©")
    text_parts.append(structured_plan.task_summary)
    text_parts.append("")
    text_parts.append(f"## Approche architecturale")
    text_parts.append(structured_plan.architecture_approach)
    text_parts.append("")
    
    # √âtapes d'impl√©mentation
    text_parts.append(f"## √âtapes d'impl√©mentation ({len(structured_plan.steps)} √©tapes)")
    text_parts.append("")
    
    for step in structured_plan.steps:
        text_parts.append(f"### √âtape {step.step_number}: {step.title}")
        text_parts.append(f"**Description**: {step.description}")
        text_parts.append(f"**Complexit√©**: {step.estimated_complexity}/10")
        text_parts.append(f"**Risque**: {step.risk_level.value.upper()}")
        
        if step.files_to_modify:
            text_parts.append(f"**Fichiers**: {', '.join(step.files_to_modify)}")
        
        if step.dependencies:
            text_parts.append(f"**D√©pendances**: {', '.join(step.dependencies)}")
        
        if step.risk_mitigation:
            text_parts.append(f"**Mitigation des risques**: {step.risk_mitigation}")
        
        if step.validation_criteria:
            text_parts.append(f"**Crit√®res de validation**:")
            for criterion in step.validation_criteria:
                text_parts.append(f"  - {criterion}")
        
        text_parts.append("")
    
    # M√©triques et risques
    text_parts.append("## √âvaluation globale")
    text_parts.append(f"**Complexit√© totale**: {structured_plan.total_estimated_complexity}")
    text_parts.append(f"**Risques**: {structured_plan.overall_risk_assessment}")
    text_parts.append(f"**Strat√©gie de tests**: {structured_plan.recommended_testing_strategy}")
    text_parts.append("")
    
    # Bloqueurs potentiels
    if structured_plan.potential_blockers:
        text_parts.append("## Bloqueurs potentiels identifi√©s")
        for blocker in structured_plan.potential_blockers:
            text_parts.append(f"- {blocker}")
        text_parts.append("")
    
    return "\n".join(text_parts) 