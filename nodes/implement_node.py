"""N≈ìud d'impl√©mentation - g√©n√®re et applique le code."""

from typing import Dict, Any, List
from models.state import GraphState
from anthropic import Client
from config.settings import get_settings
from tools.claude_code_tool import ClaudeCodeTool
from utils.logger import get_logger
from utils.persistence_decorator import with_persistence, log_code_generation_decorator
from utils.helpers import get_working_directory, validate_working_directory, ensure_working_directory
import os

logger = get_logger(__name__)

@with_persistence("implement_task")
@log_code_generation_decorator("claude", "claude-3-5-sonnet-20241022", "initial")
async def implement_task(state: GraphState) -> GraphState:
    """
    N≈ìud d'impl√©mentation: g√©n√®re et applique le code n√©cessaire.
    
    Ce n≈ìud :
    1. Analyse les requirements et le contexte technique
    2. G√©n√®re un plan d'impl√©mentation avec Claude
    3. Applique les modifications n√©cessaires
    4. Valide que l'impl√©mentation r√©pond aux crit√®res
    
    Args:
        state: √âtat actuel du graphe
        
    Returns:
        √âtat mis √† jour avec l'impl√©mentation
    """
    logger.info(f"üíª Impl√©mentation de: {state['task'].title}")

    # ‚úÖ CORRECTION CRITIQUE: Assurer l'int√©grit√© de l'√©tat d√®s le d√©but
    from utils.error_handling import ensure_state_integrity
    ensure_state_integrity(state)

    state["results"]["ai_messages"].append("D√©but de l'impl√©mentation...")
    
    try:
        # Initialiser les outils n√©cessaires
        settings = get_settings()
        claude_tool = ClaudeCodeTool()
        anthropic_client = Client(api_key=settings.anthropic_api_key)
        task = state["task"]

        if not task:

            logger.error("‚ùå Aucune t√¢che fournie")

            return state
        


        # Initialiser results si n√©cessaire

        if "results" not in state:

            state["results"] = {}
        # V√©rifier que l'environnement est pr√©par√©
        # ‚úÖ AM√âLIORATION: Utiliser la fonction helper unifi√©e
        working_directory = get_working_directory(state)
        
        # ‚úÖ S√âCURIT√â: Valider le r√©pertoire avec la fonction d√©di√©e
        if not validate_working_directory(working_directory, "implement_node"):
            # ‚úÖ FALLBACK: Essayer de s'assurer qu'un r√©pertoire existe
            try:
                working_directory = ensure_working_directory(state, "implement_node_")
                logger.info(f"üìÅ R√©pertoire de travail de secours cr√©√©: {working_directory}")
            except Exception as e:
                error_msg = f"Impossible de cr√©er un r√©pertoire de travail pour l'impl√©mentation: {e}"
                logger.error(f"‚ùå {error_msg}")
                state["results"]["error_logs"].append(error_msg)
                state["results"]["ai_messages"].append(f"‚ùå {error_msg}")
                state["results"]["last_operation_result"] = error_msg
                state["results"]["should_continue"] = False
                state["results"]["current_status"] = "failed".lower()
                return state
        
        if not working_directory:
            error_msg = "Aucun r√©pertoire de travail disponible pour l'impl√©mentation"
            state["results"]["error_logs"].append(error_msg)
            state["results"]["ai_messages"].append(f"‚ùå {error_msg}")
            state["results"]["should_continue"] = False
            state["results"]["current_status"] = "failed".lower()
            return state
        
        # V√©rifier que le r√©pertoire existe
        if not os.path.exists(working_directory):
            error_msg = f"R√©pertoire de travail introuvable: {working_directory}"
            state["results"]["error_logs"].append(error_msg)
            state["results"]["ai_messages"].append(f"‚ùå {error_msg}")
            state["results"]["should_continue"] = False
            state["results"]["current_status"] = "failed".lower()
            return state
        
        # Initialiser code_changes si n√©cessaire
        if "code_changes" not in state["results"] or not isinstance(state["results"]["code_changes"], dict):
            state["results"]["code_changes"] = {}

        # Initialiser modified_files si n√©cessaire
        if "modified_files" not in state["results"] or not isinstance(state["results"]["modified_files"], list):
            state["results"]["modified_files"] = []
        
        # Initialiser le nouveau moteur IA multi-provider
        from tools.ai_engine_hub import ai_hub, AIRequest, TaskType
        
        claude_tool.working_directory = working_directory
        
        # 1. Analyser la structure du projet
        logger.info("üìã Analyse de la structure du projet...")
        try:
            project_analysis_text = await _analyze_project_structure(claude_tool)
            project_analysis = {
                "project_type": "detected",
                "structure": project_analysis_text,
                "files": [],
                "error": None
            }
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erreur lors de l'analyse du projet: {e}")
            project_analysis = {
                "project_type": "unknown",
                "structure": "Analyse √©chou√©e",
                "files": [],
                "error": str(e)
            }
        
        logger.info(f"üìä Type de projet d√©tect√©: {project_analysis.get('project_type', 'unknown')}")
        
        # 2. Cr√©er un prompt d√©taill√© pour Claude
        previous_errors = state["results"].get("error_logs", []) if hasattr(state, "results") else []
        implementation_prompt = await _create_implementation_prompt(
            task, project_analysis.get("structure", "Structure non disponible"), previous_errors
        )
        
        logger.info("ü§ñ G√©n√©ration du plan d'impl√©mentation avec le moteur IA...")
    # Initialiser ai_messages si n√©cessaire
        
        # 3. Utiliser le moteur IA multi-provider pour cr√©er un plan d'impl√©mentation
        ai_request = AIRequest(
            prompt=implementation_prompt,
            task_type=TaskType.CODE_GENERATION,
            context={
                "task": task.dict(), 
                "project_analysis": project_analysis,
                "workflow_id": state.get("workflow_id", "unknown"),
                "task_id": task.task_id
            }
        )
        
        try:
            response = await ai_hub.generate_code(ai_request)
        except Exception as e:
            error_msg = f"Erreur lors de l'appel au moteur IA: {e}"
            state["results"]["error_logs"].append(error_msg)
            state["results"]["ai_messages"].append(f"‚ùå {error_msg}")
            state["results"]["should_continue"] = False
            state["results"]["current_status"] = "failed"
            return state
        
        if not response.success:
            error_msg = f"Erreur lors de la g√©n√©ration du plan: {response.error}"
            state["results"]["error_logs"].append(error_msg)
            state["results"]["ai_messages"].append(f"‚ùå {error_msg}")
            state["results"]["last_operation_result"] = error_msg
            state["results"]["should_continue"] = False
            state["results"]["current_status"] = "failed".lower()
            return state
        
        implementation_plan = response.content
        state["results"]["ai_messages"].append(f"üìã Plan g√©n√©r√©:\n{implementation_plan[:200]}...")
        
        # 4. Ex√©cuter le plan d'impl√©mentation
        success = await _execute_implementation_plan(
            claude_tool, anthropic_client, implementation_plan, task, state
        )
        
        # ‚úÖ ROBUSTESSE: D√©finir syst√©matiquement tous les flags de statut
        implementation_result = _validate_implementation_result(success, state)
        
        if implementation_result["success"]:
            # Impl√©mentation r√©ussie
            state["results"]["ai_messages"].append("‚úÖ Impl√©mentation termin√©e avec succ√®s")
            state["results"]["last_operation_result"] = "Impl√©mentation r√©ussie"
            state["results"]["implementation_success"] = True
            state["results"]["current_status"] = "implemented"
            state["results"]["implementation_metrics"] = implementation_result["metrics"]
            logger.info(f"‚úÖ Impl√©mentation termin√©e avec succ√®s - {implementation_result['summary']}")
        else:
            # Impl√©mentation √©chou√©e
            failure_reason = implementation_result.get("failure_reason", "Raison inconnue")
            state["results"]["ai_messages"].append(f"‚ùå √âchec de l'impl√©mentation: {failure_reason}")
            state["results"]["last_operation_result"] = f"√âchec impl√©mentation: {failure_reason}"
            state["results"]["implementation_success"] = False
            state["results"]["current_status"] = "implementation_failed"
            state["results"]["implementation_error_details"] = implementation_result.get("error_details", {})
            logger.error(f"‚ùå √âchec de l'impl√©mentation: {failure_reason}")
        
        # ‚úÖ NOMENCLATURE: Utiliser un statut de continuation coh√©rent
        state["results"]["should_continue"] = True
        state["results"]["workflow_stage"] = "implementation_completed"
        
    except Exception as e:
        error_msg = f"Exception critique lors de l'impl√©mentation: {str(e)}"
        logger.error(error_msg, exc_info=True)
        
        # ‚úÖ ROBUSTESSE: Garantir que tous les flags sont d√©finis m√™me en cas d'exception
        state["results"]["error_logs"].append(error_msg)
        state["results"]["ai_messages"].append(f"‚ùå Exception critique: {error_msg}")
        state["results"]["last_operation_result"] = error_msg
        state["results"]["implementation_success"] = False  # ‚úÖ CRITIQUE: Toujours d√©finir ce flag
        state["results"]["current_status"] = "implementation_exception"
        state["results"]["workflow_stage"] = "implementation_failed"
        state["results"]["should_continue"] = True
    
    logger.info("üèÅ Impl√©mentation termin√©e")
    return state


def _validate_implementation_result(success: bool, state: Dict[str, Any]) -> Dict[str, Any]:
    """
    Valide et enrichit le r√©sultat d'impl√©mentation avec des m√©triques d√©taill√©es.
    
    Args:
        success: R√©sultat brut de l'impl√©mentation
        state: √âtat du workflow pour extraire les m√©triques
        
    Returns:
        Dictionnaire avec les d√©tails de validation et m√©triques
    """
    result = {
        "success": False,
        "failure_reason": None,
        "error_details": {},
        "metrics": {},
        "summary": ""
    }
    
    try:
        # ‚úÖ VALIDATION: Analyser les r√©sultats d√©taill√©s
        results = state.get("results", {})
        
        # Compter les fichiers modifi√©s
        modified_files = results.get("modified_files", [])
        code_changes = results.get("code_changes", {})
        error_logs = results.get("error_logs", [])
        
        # M√©triques de base
        result["metrics"] = {
            "files_modified": len(modified_files),
            "code_changes_count": len(code_changes),
            "error_count": len(error_logs),
            "has_errors": len(error_logs) > 0
        }
        
        if success:
            # Validation suppl√©mentaire pour succ√®s
            if len(modified_files) == 0 and len(code_changes) == 0:
                # Succ√®s mais aucun fichier modifi√© - suspect
                result["success"] = False
                result["failure_reason"] = "Aucun fichier modifi√© d√©tect√© malgr√© le succ√®s apparent"
                result["error_details"]["validation"] = "No files were actually modified"
            elif len(error_logs) > 0:
                # Succ√®s mais avec des erreurs - succ√®s partiel
                result["success"] = True
                result["summary"] = f"{len(modified_files)} fichier(s) modifi√©(s) avec {len(error_logs)} avertissement(s)"
                logger.warning(f"‚ö†Ô∏è Impl√©mentation r√©ussie mais avec {len(error_logs)} erreur(s)")
            else:
                # Succ√®s complet
                result["success"] = True
                result["summary"] = f"{len(modified_files)} fichier(s) modifi√©(s) sans erreur"
        else:
            # Analyser la cause d'√©chec
            if len(error_logs) > 0:
                result["failure_reason"] = f"Erreurs d√©tect√©es: {error_logs[-1]}"  # Derni√®re erreur
                result["error_details"]["last_error"] = error_logs[-1]
                result["error_details"]["total_errors"] = len(error_logs)
            else:
                result["failure_reason"] = "√âchec sans erreur sp√©cifique d√©tect√©e"
                result["error_details"]["analysis"] = "No specific error found in logs"
        
        # Ajouter contexte temporel si disponible
        if "started_at" in state:
            result["metrics"]["execution_context"] = {
                "started_at": state["started_at"],
                "workflow_id": state.get("workflow_id", "unknown")
            }
            
    except Exception as e:
        logger.error(f"‚ùå Erreur validation r√©sultat impl√©mentation: {e}")
        result["success"] = False
        result["failure_reason"] = f"Erreur de validation: {str(e)}"
        result["error_details"]["validation_error"] = str(e)
    
    return result

async def _analyze_project_structure(claude_tool: ClaudeCodeTool) -> str:
    """Analyse la structure du projet pour comprendre l'architecture."""
    try:
        # Lister les fichiers principaux
        ls_result = await claude_tool._arun(action="execute_command", command="find . -type f -name '*.py' -o -name '*.js' -o -name '*.ts' -o -name '*.json' | head -20")
        
        structure_info = "Structure du projet:\n"
        if ls_result["success"]:
            structure_info += ls_result["stdout"]
        
        # Essayer de lire des fichiers de configuration importants (optionnels)
        config_files = ["package.json", "requirements.txt", "setup.py", "README.md"]
        for config_file in config_files:
            try:
                config_result = await claude_tool._arun(action="read_file", file_path=config_file, required=False)
                if config_result["success"] and config_result.get("file_exists", True):
                    structure_info += f"\n\n=== {config_file} ===\n"
                    structure_info += config_result["content"][:500] + "..."
                else:
                    # ‚úÖ CORRECTION: Log informatif si le fichier n'existe pas
                    logger.debug(f"Fichier de configuration {config_file} non trouv√©")
            except Exception:
                continue
        
        return structure_info
        
    except Exception as e:
        logger.warning(f"Impossible d'analyser la structure: {e}")
        return "Structure du projet non disponible"

async def _create_implementation_prompt(task, project_analysis: str, error_logs: List[str]) -> str:
    """Cr√©e un prompt d√©taill√© pour l'impl√©mentation."""
    
    # ‚úÖ AM√âLIORATION: Extraction intelligente des sp√©cifications techniques
    extracted_specs = _extract_technical_specifications(task.description)
    
    prompt = f"""Tu es un d√©veloppeur expert. Tu dois impl√©menter la t√¢che suivante dans un projet existant.

## T√ÇCHE √Ä IMPL√âMENTER
**Titre**: {task.title}

**Description compl√®te**: 
{task.description}

**Sp√©cifications techniques extraites**:
{extracted_specs}

**Branche**: {task.git_branch}
**Priorit√©**: {task.priority}

## CONTEXTE DU PROJET
{project_analysis}

## HISTORIQUE D'ERREURS (si tentatives pr√©c√©dentes)
{chr(10).join(error_logs) if error_logs else "Aucune erreur pr√©c√©dente"}

## INSTRUCTIONS D√âTAILL√âES

1. **Analyse** d'abord le code existant pour comprendre l'architecture
2. **Identifie** les patterns et conventions utilis√©s dans le projet
3. **Extrait** les sp√©cifications exactes de la description (endpoints, fonctionnalit√©s, etc.)
4. **Planifie** les modifications n√©cessaires en respectant l'architecture existante
5. **Impl√©mente** les changements de mani√®re incr√©mentale

**ATTENTION SP√âCIALE**: Si la description mentionne :
- Un endpoint (ex: `/admin/costs`) ‚Üí cr√©e le router FastAPI correspondant
- Une API ‚Üí impl√©mente les endpoints REST avec documentation
- Un service ‚Üí cr√©e la classe de service appropri√©e
- Une base de donn√©es ‚Üí g√©n√®re les mod√®les et migrations
- Un frontend ‚Üí cr√©e les composants avec styling appropri√©

R√©ponds avec un plan d'impl√©mentation structur√© sous cette forme:

```
PLAN D'IMPL√âMENTATION

## 1. ANALYSE DE LA T√ÇCHE
- [Ce que tu comprends exactement de la demande]
- [Sp√©cifications techniques identifi√©es]
- [Architecture cible √† impl√©menter]

## 2. ANALYSE DU PROJET EXISTANT
- [Fichiers importants identifi√©s]
- [Patterns et conventions observ√©s]
- [Architecture actuelle comprise]

## 3. MODIFICATIONS REQUISES
### Nouveaux fichiers √† cr√©er:
- [Liste des nouveaux fichiers avec leur r√¥le]

### Fichiers existants √† modifier:
- [Liste des fichiers √† modifier avec description des changements]

## 4. √âTAPES D'EX√âCUTION D√âTAILL√âES
1. [Premi√®re √©tape avec commandes/modifications pr√©cises]
2. [Deuxi√®me √©tape avec commandes/modifications pr√©cises]
3. [etc.]

## 5. TESTS ET VALIDATION
- [Tests ou validations √† effectuer]
- [Comment v√©rifier que l'impl√©mentation fonctionne]
```

**IMPORTANT**: Sois extr√™mement pr√©cis dans l'extraction des sp√©cifications. Si la description mentionne un endpoint sp√©cifique, assure-toi de l'impl√©menter exactement comme demand√©."""

    return prompt


def _extract_technical_specifications(description: str) -> str:
    """Extrait les sp√©cifications techniques d'une description de t√¢che."""
    import re
    
    specs = []
    
    # Extraction d'endpoints
    endpoint_patterns = [
        r'endpoint\s+["`]([^"`]+)["`]',
        r'endpoint\s+([/\w-]+)',
        r'API\s+["`]([^"`]+)["`]',
        r'route\s+["`]([^"`]+)["`]',
        r'(/\w+(?:/\w+)*)',  # URLs g√©n√©riques
    ]
    
    for pattern in endpoint_patterns:
        matches = re.findall(pattern, description, re.IGNORECASE)
        for match in matches:
            if match.startswith('/'):
                specs.append(f"‚Ä¢ Endpoint √† cr√©er: {match}")
    
    # Extraction de types de fonctionnalit√©s
    feature_patterns = [
        (r'visualiser\s+([^.]+)', "‚Ä¢ Fonctionnalit√© de visualisation: {}"),
        (r'monitorer\s+([^.]+)', "‚Ä¢ Fonctionnalit√© de monitoring: {}"),
        (r'tracker?\s+([^.]+)', "‚Ä¢ Fonctionnalit√© de tracking: {}"),
        (r'dashboard\s+([^.]+)', "‚Ä¢ Dashboard √† cr√©er: {}"),
        (r'rapport\s+([^.]+)', "‚Ä¢ Rapport √† g√©n√©rer: {}"),
        (r'afficher\s+([^.]+)', "‚Ä¢ Affichage requis: {}"),
    ]
    
    for pattern, template in feature_patterns:
        matches = re.findall(pattern, description, re.IGNORECASE)
        for match in matches:
            specs.append(template.format(match.strip()))
    
    # Extraction de technologies/frameworks
    tech_patterns = [
        (r'FastAPI', "‚Ä¢ Utiliser FastAPI pour les endpoints"),
        (r'React', "‚Ä¢ Interface React requise"),
        (r'Vue', "‚Ä¢ Interface Vue.js requise"),
        (r'PostgreSQL', "‚Ä¢ Base de donn√©es PostgreSQL"),
        (r'MongoDB', "‚Ä¢ Base de donn√©es MongoDB"),
        (r'REST API', "‚Ä¢ API REST √† impl√©menter"),
        (r'GraphQL', "‚Ä¢ API GraphQL √† impl√©menter"),
    ]
    
    for pattern, spec in tech_patterns:
        if re.search(pattern, description, re.IGNORECASE):
            specs.append(spec)
    
    # Extraction de donn√©es/entit√©s
    data_patterns = [
        (r'co√ªts?\s+([^.]+)', "‚Ä¢ Donn√©es de co√ªts: {}"),
        (r'm√©triques?\s+([^.]+)', "‚Ä¢ M√©triques: {}"),
        (r'statistiques?\s+([^.]+)', "‚Ä¢ Statistiques: {}"),
        (r'logs?\s+([^.]+)', "‚Ä¢ Logs: {}"),
    ]
    
    for pattern, template in data_patterns:
        matches = re.findall(pattern, description, re.IGNORECASE)
        for match in matches:
            specs.append(template.format(match.strip()))
    
    # Extraction de providers/services
    provider_patterns = [
        (r'provider[s]?\s+([^.]+)', "‚Ä¢ Providers: {}"),
        (r'service[s]?\s+([^.]+)', "‚Ä¢ Services: {}"),
        (r'(Claude|OpenAI|Anthropic)', "‚Ä¢ Provider IA: {}"),
    ]
    
    for pattern, template in provider_patterns:
        matches = re.findall(pattern, description, re.IGNORECASE)
        for match in matches:
            specs.append(template.format(match.strip()))
    
    if not specs:
        specs.append("‚Ä¢ Aucune sp√©cification technique sp√©cifique d√©tect√©e")
        specs.append("‚Ä¢ Analyse manuelle de la description requise")
    
    return "\n".join(specs)

async def _execute_implementation_plan(
    claude_tool: ClaudeCodeTool, 
    anthropic_client: Client,
    implementation_plan: str,
    task,
    state: Dict[str, Any]
) -> bool:
    """Ex√©cute le plan d'impl√©mentation √©tape par √©tape."""
    
    try:
        logger.info("üöÄ Ex√©cution du plan d'impl√©mentation...")
    # Initialiser ai_messages si n√©cessaire
        
        # Cr√©er un prompt pour l'ex√©cution du plan
        execution_prompt = f"""Maintenant, ex√©cute le plan d'impl√©mentation suivant √©tape par √©tape.

PLAN √Ä EX√âCUTER:
{implementation_plan}

T√ÇCHE:
{task.description}

Pour chaque fichier que tu dois modifier ou cr√©er, utilise ce format exact:

```action:modify_file
file_path: chemin/vers/fichier.py
description: Description de la modification
content:
[Le contenu complet du fichier modifi√©]
```

OU pour ex√©cuter des commandes:

```action:execute_command
command: la commande √† ex√©cuter
```

Commence par la premi√®re √©tape maintenant. N'ex√©cute qu'une seule action √† la fois."""

        response = anthropic_client.messages.create(
            model="claude-3-5-sonnet-20241022",
            max_tokens=4000,
            temperature=0.1,
            messages=[{"role": "user", "content": execution_prompt}]
        )
        
        execution_steps = response.content[0].text
        
        # Parser et ex√©cuter les actions
        success = await _parse_and_execute_actions(claude_tool, execution_steps, state)
        
        return success
        
    except Exception as e:
        logger.error(f"Erreur lors de l'ex√©cution du plan: {e}")
        state["results"]["error_logs"].append(f"Erreur ex√©cution plan: {str(e)}")
        return False

async def _parse_and_execute_actions(claude_tool: ClaudeCodeTool, execution_text: str, state: Dict[str, Any]) -> bool:
    """Parse le texte d'ex√©cution et effectue les actions."""
    
    import re
    
    success_count = 0
    total_actions = 0
    
    # Regex pour extraire les blocs d'action
    action_pattern = r'```action:(\w+)\n(.*?)\n```'
    actions = re.findall(action_pattern, execution_text, re.DOTALL)
    
    for action_type, action_content in actions:
        total_actions += 1
        logger.info(f"üîß Ex√©cution action: {action_type}")
    # Initialiser ai_messages si n√©cessaire
        
        try:
            if action_type == "modify_file":
                success = await _execute_file_modification(claude_tool, action_content, state)
            elif action_type == "execute_command":
                success = await _execute_command_action(claude_tool, action_content, state)
            else:
                logger.warning(f"Type d'action non reconnu: {action_type}")
                continue
            
            if success:
                success_count += 1
                
        except Exception as e:
            logger.error(f"Erreur lors de l'action {action_type}: {e}")
            state["results"]["error_logs"].append(f"Erreur action {action_type}: {str(e)}")
    
    # Si aucune action explicite trouv√©e, essayer de traiter comme modification directe
    if total_actions == 0:
        logger.info("Aucune action structur√©e trouv√©e, tentative de traitement direct...")
    # Initialiser ai_messages si n√©cessaire
        # Essayer d'extraire des blocs de code Python/JS
        code_blocks = re.findall(r'```(?:python|javascript|typescript)?\n(.*?)\n```', execution_text, re.DOTALL)
        
        if code_blocks:
            # Traiter le premier bloc de code comme une modification
            await _handle_direct_code_modification(claude_tool, code_blocks[0], state)
            return True
    
    success_rate = success_count / max(total_actions, 1)
    logger.info(f"üìä Actions ex√©cut√©es: {success_count}/{total_actions} (taux: {success_rate:.1%})")
    # Initialiser ai_messages si n√©cessaire
    
    return success_rate >= 0.5  # Au moins 50% de succ√®s

async def _execute_file_modification(claude_tool: ClaudeCodeTool, action_content: str, state: Dict[str, Any]) -> bool:
    """Ex√©cute une modification de fichier."""
    try:
        lines = action_content.strip().split('\n')
        file_path = None
        description = ""
        content = ""
        
        content_started = False
        for line in lines:
            if line.startswith('file_path:'):
                file_path = line.split(':', 1)[1].strip()
            elif line.startswith('description:'):
                description = line.split(':', 1)[1].strip()
            elif line.startswith('content:'):
                content_started = True
            elif content_started:
                content += line + '\n'
        
        if file_path and content:
            # Cr√©er le contexte avec workflow_id et task_id
            context = {
                "workflow_id": state.get("workflow_id", "unknown"),
                "task_id": state.get("task", {}).get("task_id", "unknown")
            }
            
            result = await claude_tool._arun(
                action="write_file",
                file_path=file_path,
                content=content.strip(),
                context=context
            )
            
            if result["success"]:
                state["results"]["code_changes"][file_path] = content.strip()
                state["results"]["modified_files"].append(file_path)
                state["results"]["ai_messages"].append(f"‚úÖ Fichier modifi√©: {file_path}")
                logger.info(f"‚úÖ Fichier modifi√©: {file_path}")
    # Initialiser ai_messages si n√©cessaire
                return True
            else:
                error = result.get("error", "Erreur inconnue")
                state["results"]["error_logs"].append(f"√âchec modification {file_path}: {error}")
                logger.error(f"‚ùå √âchec modification {file_path}: {error}")
                return False
        
        return False
        
    except Exception as e:
        logger.error(f"Erreur modification fichier: {e}")
        return False

async def _execute_command_action(claude_tool: ClaudeCodeTool, action_content: str, state: Dict[str, Any]) -> bool:
    """Ex√©cute une commande syst√®me."""
    try:
        command = None
        for line in action_content.strip().split('\n'):
            if line.startswith('command:'):
                command = line.split(':', 1)[1].strip()
                break
        
        if command:
            result = await claude_tool._arun(action="execute_command", command=command)
            
            if result["success"]:
                state["results"]["ai_messages"].append(f"‚úÖ Commande ex√©cut√©e: {command}")
                logger.info(f"‚úÖ Commande ex√©cut√©e: {command}")
    # Initialiser ai_messages si n√©cessaire
                return True
            else:
                error = result.get("stderr", result.get("error", "Erreur inconnue"))
                state["results"]["error_logs"].append(f"√âchec commande '{command}': {error}")
                logger.error(f"‚ùå √âchec commande '{command}': {error}")
                return False
        
        return False
        
    except Exception as e:
        logger.error(f"Erreur ex√©cution commande: {e}")
        return False

async def _handle_direct_code_modification(claude_tool: ClaudeCodeTool, code_content: str, state: Dict[str, Any]) -> bool:
    """G√®re une modification de code directe sans structure explicite."""
    try:
        # Essayer de deviner le fichier √† modifier bas√© sur le contenu
        if "def " in code_content or "import " in code_content:
            # Python
            filename = "main.py"  # Fichier par d√©faut
        elif "function " in code_content or "const " in code_content:
            # JavaScript
            filename = "main.js"
        else:
            filename = "implementation.txt"
        
        result = await claude_tool._arun(
            action="write_file",
            file_path=filename,
            content=code_content
        )
        
        if result["success"]:
            state["results"]["code_changes"][filename] = code_content
            state["results"]["modified_files"].append(filename)
            state["results"]["ai_messages"].append(f"‚úÖ Code ajout√©: {filename}")
            return True
        
        return False
        
    except Exception as e:
        logger.error(f"Erreur modification directe: {e}")
        return False 