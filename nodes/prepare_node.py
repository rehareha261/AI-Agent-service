"""
N≈ìud de pr√©paration de l'environnement.

Ce module pr√©pare l'environnement de travail pour les t√¢ches :
- Clone du repository Git
- Cr√©ation et checkout de la branche
- Installation des d√©pendances
- Configuration de l'espace de travail
"""

import re
from typing import Optional, Any
from models.state import GraphState
from models.schemas import GitOperationResult
from tools.claude_code_tool import ClaudeCodeTool
from tools.monday_tool import MondayTool
from utils.logger import get_logger
from utils.persistence_decorator import with_persistence
from utils.github_parser import extract_github_url_from_description

logger = get_logger(__name__)


async def _extract_repository_url_from_monday_updates(task_id: str) -> str:
    """
    Extrait l'URL du repository GitHub depuis les updates Monday.com.

    Args:
        task_id: ID de la t√¢che Monday.com

    Returns:
        URL du repository ou cha√Æne vide si non trouv√©e
    """
    try:
        # Initialiser l'outil Monday
        monday_tool = MondayTool()

        # ‚úÖ CORRECTION: V√©rifier la configuration Monday.com avant l'appel
        if not hasattr(monday_tool, 'api_token') or not monday_tool.api_token:
            logger.info("üí° Monday.com non configur√© - extraction URL GitHub ignor√©e")
            return ""

        logger.info(f"üîç Recherche URL GitHub dans les updates Monday.com pour task {task_id}")

        # R√©cup√©rer les updates
        try:
            result = await monday_tool._get_item_updates(task_id)
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erreur lors de la r√©cup√©ration des updates Monday.com: {e}")
            return ""

        # ‚úÖ AM√âLIORATION: Gestion robuste de tous les cas de r√©ponse
        if not isinstance(result, dict):
            logger.error(f"‚ùå R√©sultat _get_item_updates invalide (type {type(result)}): {result}")
            return ""

        if not result.get("success", False):
            error_msg = result.get("error", "Erreur inconnue")
            logger.warning(f"‚ö†Ô∏è Impossible de r√©cup√©rer les updates pour l'item {task_id}: {error_msg}")
            return ""

        updates = result.get("updates", [])
        if not isinstance(updates, list):
            logger.warning(f"‚ö†Ô∏è Updates invalides pour l'item {task_id} (type {type(updates)})")
            return ""

        if len(updates) == 0:
            logger.warning(f"‚ö†Ô∏è Aucun update trouv√© pour l'item {task_id}")
            return ""

        logger.info(f"üìã {len(updates)} updates trouv√©es pour item {task_id}, recherche d'URLs GitHub...")

        # ‚úÖ AM√âLIORATION: Patterns de d√©tection plus robustes
        github_patterns = [
            # URLs compl√®tes HTTPS (plus strict)
            r'https://github\.com/([a-zA-Z0-9_.-]+)/([a-zA-Z0-9_.-]+)(?:\.git)?(?:/[^\s]*)?',

            # URLs avec contexte descriptif
            r'(?:repository|repo|projet|github|code|source)[\s:=]*https://github\.com/([a-zA-Z0-9_.-]+)/([a-zA-Z0-9_.-]+)(?:\.git)?',

            # URLs SSH
            r'git@github\.com:([a-zA-Z0-9_.-]+)/([a-zA-Z0-9_.-]+)(?:\.git)?',

            # URLs courtes  -- √âviter les faux positifs
            r'github\.com/([a-zA-Z0-9_.-]+)/([a-zA-Z0-9_.-]+)(?:\.git)?(?!/[\w-]+(?:\.[\w-]+)*$)',

            # Liens Markdown
            r'\[.*?\]\(https://github\.com/([a-zA-Z0-9_.-]+)/([a-zA-Z0-9_.-]+)(?:\.git)?\)',

            # Patterns avec mots-cl√©s fran√ßais/anglais
            r'(?:pour|for|from|de|du|vers|to)[\s:]*https://github\.com/([a-zA-Z0-9_.-]+)/([a-zA-Z0-9_.-]+)(?:\.git)?'
        ]

        # Rechercher dans toutes les updates (du plus r√©cent au plus ancien)
        for i, update in enumerate(updates):
            if not isinstance(update, dict):
                continue

            body = update.get("body", "")
            update_type = update.get("type", "unknown")
            update_id = update.get("id", f"update_{i}")

            if not body or not isinstance(body, str):
                continue

            logger.debug(f"üîç Analyse {update_type} {update_id}: {body[:100]}...")

            # Tester chaque pattern
            for pattern_idx, pattern in enumerate(github_patterns):
                matches = re.findall(pattern, body, re.IGNORECASE)
                if matches:
                    # Prendre le premier match valide
                    match = matches[0]

                    # Construire l'URL selon le type de match
                    if isinstance(match, tuple) and len(match) >= 2:
                        # Match avec groupes (owner, repo)
                        owner, repo = match[0], match[1]
                        url = f"https://github.com/{owner}/{repo}"
                    elif isinstance(match, str):
                        # Match simple - peut √™tre une URL compl√®te
                        url = match
                    else:
                        continue

                    # Normaliser l'URL
                    if not url.startswith('http'):
                        url = f"https://{url}"
                    if url.endswith('.git'):
                        url = url[:-4]

                    # Validation basique de l'URL
                    if re.match(r'https://github\.com/[a-zA-Z0-9_.-]+/[a-zA-Z0-9_.-]+$', url):
                        logger.info(f"‚úÖ URL repository trouv√©e avec pattern {pattern_idx + 1} dans {update_type} {update_id}: {url}")
                        logger.debug(f"   Texte source: {body[:200]}...")
                        return url
                    else:
                        logger.debug(f"‚ö†Ô∏è URL GitHub invalide trouv√©e: {url}")

        logger.warning("‚ö†Ô∏è Aucune URL GitHub trouv√©e dans les updates Monday.com")
        return ""

    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'extraction depuis les updates Monday.com: {e}")
        return ""


@with_persistence("prepare_environment")
async def prepare_environment(state: GraphState) -> GraphState:
    """
    N≈ìud de pr√©paration de l'environnement.
    
    Ce n≈ìud :
    1. Clone le repository GitHub
    2. Cr√©e et checkout une nouvelle branche
    3. Installe les d√©pendances si n√©cessaire
    4. Configure l'espace de travail
    
    Args:
        state: √âtat actuel du graphe
        
    Returns:
        √âtat mis √† jour avec l'environnement pr√©par√©
    """
    logger.info(f"üöÄ Pr√©paration de l'environnement pour: {state['task'].title}")
    
    # ‚úÖ CORRECTION CRITIQUE: Assurer l'int√©grit√© de l'√©tat d√®s le d√©but
    from utils.error_handling import ensure_state_integrity
    ensure_state_integrity(state)

    # Marquer le n≈ìud comme en cours
    state["current_node"] = "prepare_environment"
    
    # Initialiser ai_messages si n√©cessaire
    if "ai_messages" not in state["results"]:
        state["results"]["ai_messages"] = []

    # Mettre √† jour le statut
    state["results"]["current_status"] = "preparing".lower()
    state["results"]["ai_messages"].append("D√©but de la pr√©paration de l'environnement...")

    try:
        # Initialiser l'outil Claude Code
        claude_tool = ClaudeCodeTool()

        # D√©terminer l'URL du repository
        repo_url = None
        
        # 1. V√©rifier la colonne repository_url de Monday.com (priorit√© haute)
        if hasattr(state["task"], 'repository_url') and state["task"].repository_url:
            repo_url = state["task"].repository_url.strip()
            logger.info(f"‚úÖ URL repository depuis Monday.com: {repo_url}")
        
        # 2. Fallback: Rechercher dans la description de la t√¢che
        if not repo_url and hasattr(state["task"], 'description') and state["task"].description:
            repo_url = extract_github_url_from_description(state["task"].description)
            if repo_url:
                logger.info(f"‚úÖ URL repository depuis description: {repo_url}")
        
        # 3. Fallback: Rechercher dans les updates Monday.com
        if not repo_url:
            logger.info(f"üîç Tentative d'extraction URL GitHub depuis les updates Monday.com...")
            try:
                repo_url = await _extract_repository_url_from_monday_updates(str(state["task"].task_id))
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Erreur lors de l'extraction URL repository depuis Monday.com: {e}")
                repo_url = ""
            
            if repo_url:
                logger.info(f"‚úÖ URL GitHub extraite des updates Monday.com: {repo_url}")
            else:
                logger.warning(f"‚ö†Ô∏è Aucune URL GitHub trouv√©e dans la description: {state['task'].description[:100]}...")

        # ‚úÖ VALIDATION FINALE: V√©rifier qu'on a bien une URL
        if not repo_url or not repo_url.strip():
            error_msg = (
                "‚ùå URL du repository non trouv√©e dans la t√¢che Monday.com.\n\n"
                "üí° SOLUTION: Ajoutez l'URL GitHub de l'une des fa√ßons suivantes:\n\n"
                "   1Ô∏è‚É£ Dans la colonne 'repository_url' de Monday.com\n"
                "   2Ô∏è‚É£ Dans la description de la t√¢che, par exemple:\n"
                "      ‚Ä¢ 'Impl√©menter pour: https://github.com/user/repo'\n"
                "      ‚Ä¢ 'Repository: https://github.com/user/repo'\n"
                "      ‚Ä¢ 'Code source: https://github.com/user/repo'\n\n"
                "   3Ô∏è‚É£ Dans un commentaire/update sur la t√¢che Monday.com:\n"
                "      ‚Ä¢ 'URL: https://github.com/user/repo'\n"
                "      ‚Ä¢ 'Repo: https://github.com/user/repo'\n\n"
                "üîó L'URL sera automatiquement d√©tect√©e et utilis√©e par le syst√®me."
            )
            logger.error(error_msg)

            # ‚úÖ DEBUG: Afficher les informations disponibles
            task_info = {
                "title": getattr(state["task"], 'title', 'N/A'),
                "repository_url": getattr(state["task"], 'repository_url', 'N/A'),
                "description": getattr(state["task"], 'description', 'N/A')[:200] + "..." if getattr(state["task"], 'description', '') else 'N/A'
            }
            logger.error(f"üìã Informations t√¢che disponibles: {task_info}")

            state["error"] = error_msg
            state["results"]["current_status"] = "failed".lower()
            return state

        # ‚úÖ ROBUSTESSE: Gestion intelligente et valid√©e des noms de branche
        branch_name = _resolve_branch_name(state["task"], state.get("workflow_id"))
        
        logger.info(f"Configuration de l'environnement - Repo: {repo_url}, Branche: {branch_name}")

        # Configurer l'environnement avec Claude Tool
        setup_result = await claude_tool._arun(
            action="setup_environment",
            repo_url=repo_url,
            branch=branch_name
        )

        if setup_result["success"]:
            # Cr√©er un r√©sultat Git structur√©
            git_result = GitOperationResult(
                success=True,
                operation="setup_environment",
                message="Environnement configur√© avec succ√®s",
                branch_name=branch_name
            )

            # ‚úÖ CORRECTION CRITIQUE: S'assurer que le working_directory persiste
            working_dir = setup_result["working_directory"]
            
            # ‚úÖ AM√âLIORATION: Validation robuste du working_directory
            import os
            if not working_dir:
                logger.error(f"‚ùå Working directory non d√©fini dans setup_result")
                state["error"] = f"Working directory non d√©fini dans le r√©sultat du setup"
                state["results"]["current_status"] = "failed".lower()
                return state
            
            # Convertir en string si n√©cessaire et nettoyer le chemin
            working_dir = os.path.abspath(str(working_dir))
            
            if not os.path.exists(working_dir):
                logger.error(f"‚ùå Working directory inexistant apr√®s setup: {working_dir}")
                state["error"] = f"Working directory cr√©√© mais introuvable: {working_dir}"
                state["results"]["current_status"] = "failed".lower()
                return state
            
            # Stocker dans plusieurs endroits pour assurer la propagation
            state["results"]["git_result"] = git_result
            state["results"]["working_directory"] = working_dir
            state["working_directory"] = working_dir  # Au niveau racine pour propagation
            state["results"]["prepare_result"] = setup_result
            
            # ‚úÖ CORRECTION CRITIQUE: Sauvegarder les informations Git dans l'√©tat
            state["results"]["repository_url"] = repo_url
            state["results"]["git_branch"] = branch_name
            
            # ‚úÖ CORRECTION CRITIQUE: Mettre √† jour la t√¢che elle-m√™me
            if hasattr(state["task"], '__dict__'):
                state["task"].git_branch = branch_name
                state["task"].repository_url = repo_url
            
            # ‚úÖ NOUVELLE PROTECTION: Marquer le r√©pertoire comme persistant
            state["results"]["working_directory_persistent"] = True
            state["results"]["environment_ready"] = True

            logger.info(f"‚úÖ Environnement pr√©par√© avec succ√®s: {working_dir}")
            state["results"]["ai_messages"].append(f"‚úÖ Environnement configur√©: {working_dir}")
            state["results"]["current_status"] = "environment_ready".lower()
            
        else:
            error_msg = f"√âchec pr√©paration: {setup_result.get('error', 'Erreur inconnue')}"
            logger.error(f"‚ùå {error_msg}")
            state["error"] = error_msg
            state["results"]["current_status"] = "failed".lower()
            state["results"]["ai_messages"].append(f"‚ùå {error_msg}")

        logger.info("üèÅ Pr√©paration termin√©e - Statut: ‚úÖ")
        return state

    except Exception as e:
        error_msg = f"Exception lors de la pr√©paration: {str(e)}"
        logger.error(f"‚ùå {error_msg}")
        state["error"] = error_msg
        state["results"]["current_status"] = "failed".lower()
        state["results"]["ai_messages"].append(f"‚ùå {error_msg}")
        return state


def _is_test_task(task_id: str) -> bool:
    """V√©rifie si la t√¢che est une t√¢che de test."""
    if not task_id:
        return False
    
    test_patterns = [
        "test_connection",
        "test_",
        "sandbox",
        "demo",
        "_test"
    ]
    
    task_id_lower = task_id.lower()
    return any(pattern in task_id_lower for pattern in test_patterns)


def _handle_test_task(state: GraphState) -> GraphState:
    """G√®re les t√¢ches de test avec un environnement simul√©."""
    
    logger.info("üß™ Gestion d'une t√¢che de test avec environnement simul√©")
    
    # Initialiser les r√©sultats de base
    state["results"]["current_status"] = "IN_PROGRESS".lower()
    state["results"]["ai_messages"].append("üß™ T√¢che de test - Environnement simul√©")
    
    # Cr√©er un r√©sultat simul√©
    import tempfile
    test_workspace = tempfile.mkdtemp(prefix="test_workspace_")
    
    git_result = GitOperationResult(
        success=True,
        operation="test_environment_setup",
        message="Environnement de test simul√© cr√©√© avec succ√®s",
        branch_name=state["task"].git_branch or state["task"].branch_name
    )
    
    # Mettre √† jour l'√©tat avec les informations simul√©es
    state["results"]["git_result"] = git_result
    state["results"]["working_directory"] = test_workspace
    state["working_directory"] = test_workspace
    state["results"]["last_operation_result"] = "Test environment created"
    state["results"]["should_continue"] = True
    
    # Simuler un repository URL de test
    if not state["task"].repository_url:
        state["task"].repository_url = "https://github.com/test/test-repo"
    
    logger.info(f"‚úÖ Environnement de test cr√©√©: {test_workspace}")
    logger.info("üß™ Pr√©paration de t√¢che de test termin√©e")
    
    return state


def _resolve_branch_name(task: Any, workflow_id: Optional[str] = None) -> str:
    """
    R√©sout le nom de branche avec g√©n√©ration intelligente et validation compl√®te.
    
    Cette fonction garantit la g√©n√©ration de noms de branche valides selon les conventions Git,
    avec gestion des collisions et pr√©servation de l'unicit√©.
    
    Args:
        task: Objet t√¢che contenant les informations de base
        workflow_id: ID du workflow pour l'unicit√©
        
    Returns:
        Nom de branche valide et unique
    """
    import re
    import hashlib
    from datetime import datetime
    from typing import Optional
    
    # Si une branche est d√©j√† d√©finie, la valider et la retourner
    existing_branch = getattr(task, 'git_branch', None) or getattr(task, 'branch_name', None)
    if existing_branch:
        validated_branch = _validate_and_sanitize_branch_name(existing_branch)
        if validated_branch:
            logger.info(f"üåø Branche existante valid√©e: {validated_branch}")
            return validated_branch
        else:
            logger.warning(f"‚ö†Ô∏è Branche invalide '{existing_branch}', g√©n√©ration automatique...")
    
    # G√©n√©ration automatique intelligente
    logger.info("üåø G√©n√©ration automatique du nom de branche...")
    
    try:
        # ‚úÖ √âTAPE 1: Analyser le titre pour d√©tecter le type de t√¢che
        task_title = getattr(task, 'title', '') or 'task'
        task_type = _detect_task_type(task_title)
        
        # ‚úÖ √âTAPE 2: Nettoyer et structurer le titre
        clean_title = _clean_title_for_branch(task_title)
        
        # ‚úÖ √âTAPE 3: Cr√©er un identifiant unique
        unique_suffix = _generate_unique_suffix(task, workflow_id)
        
        # ‚úÖ √âTAPE 4: Assembler selon les conventions
        if len(clean_title) > 40:  # Titre tr√®s long
            # Utiliser un hash pour √©viter les noms trop longs
            title_hash = hashlib.md5(clean_title.encode()).hexdigest()[:8]
            branch_name = f"{task_type}/{title_hash}-{unique_suffix}"
        else:
            branch_name = f"{task_type}/{clean_title}-{unique_suffix}"
        
        # ‚úÖ √âTAPE 5: Validation finale
        final_branch = _validate_and_sanitize_branch_name(branch_name)
        
        if not final_branch:
            # Fallback ultime
            fallback_branch = f"feature/auto-{unique_suffix}"
            logger.warning(f"‚ö†Ô∏è Utilisation du nom de branche de fallback: {fallback_branch}")
            return fallback_branch
        
        logger.info(f"üåø Branche g√©n√©r√©e avec succ√®s: {final_branch}")
        return final_branch
        
    except Exception as e:
        logger.error(f"‚ùå Erreur g√©n√©ration nom de branche: {e}")
        # Fallback d'urgence
        emergency_branch = f"feature/emergency-{datetime.now().strftime('%m%d%H%M')}"
        logger.warning(f"üÜò Nom de branche d'urgence: {emergency_branch}")
        return emergency_branch


def _detect_task_type(title: str) -> str:
    """
    D√©tecte le type de t√¢che √† partir du titre pour choisir le pr√©fixe appropri√©.
    
    Returns:
        Pr√©fixe de branche (feature, bugfix, hotfix, etc.)
    """
    # ‚úÖ ROBUSTESSE: G√©rer les cas de titre None ou vide
    if not title or not isinstance(title, str):
        return 'feature'
    
    title_lower = title.lower()
    
    # ‚úÖ AM√âLIORATION: Prioriser "urgent" et "critique" pour hotfix avant bugfix
    if any(keyword in title_lower for keyword in ['urgent', 'critique', 'hotfix', 'critical']):
        return 'hotfix'
    elif any(keyword in title_lower for keyword in ['bug', 'fix', 'erreur', 'correct', 'r√©parer']):
        return 'bugfix'
    elif any(keyword in title_lower for keyword in ['test', 'testing', 'spec']):
        return 'test'
    elif any(keyword in title_lower for keyword in ['doc', 'documentation', 'readme']):
        return 'docs'
    elif any(keyword in title_lower for keyword in ['refactor', 'restructur', 'clean']):
        return 'refactor'
    else:
        return 'feature'  # Par d√©faut


def _clean_title_for_branch(title: str) -> str:
    """
    Nettoie le titre pour cr√©er un nom de branche Git valide.
    
    Returns:
        Titre nettoy√© et valid√©
    """
    import re
    
    # Supprimer les caract√®res sp√©ciaux et accents
    title = re.sub(r'[√†√°√¢√£√§√•]', 'a', title)
    title = re.sub(r'[√®√©√™√´]', 'e', title)
    title = re.sub(r'[√¨√≠√Æ√Ø]', 'i', title)
    title = re.sub(r'[√≤√≥√¥√µ√∂]', 'o', title)
    title = re.sub(r'[√π√∫√ª√º]', 'u', title)
    title = re.sub(r'[√ß]', 'c', title)
    title = re.sub(r'[√±]', 'n', title)
    
    # Garder seulement les caract√®res alphanum√©riques, espaces et tirets
    title = re.sub(r'[^a-zA-Z0-9\s\-_]', '', title)
    
    # Remplacer les espaces multiples par des tirets
    title = re.sub(r'\s+', '-', title.strip())
    
    # Supprimer les tirets multiples
    title = re.sub(r'-+', '-', title)
    
    # Supprimer les tirets en d√©but/fin
    title = title.strip('-_')
    
    # Convertir en minuscules
    title = title.lower()
    
    # Limiter la longueur
    if len(title) > 50:
        title = title[:47] + '...'
    
    return title if title else 'unnamed-task'


def _generate_unique_suffix(task: Any, workflow_id: Optional[str] = None) -> str:
    """
    G√©n√®re un suffixe unique pour √©viter les collisions de noms de branche.
    
    Returns:
        Suffixe unique bas√© sur l'ID de t√¢che, workflow et timestamp
    """
    from datetime import datetime
    import hashlib
    
    # Collecter les identifiants disponibles
    identifiers = []
    
    if hasattr(task, 'task_id') and task.task_id:
        identifiers.append(str(task.task_id))
    
    if workflow_id:
        identifiers.append(str(workflow_id))
    
    # Timestamp pour l'unicit√© temporelle
    timestamp = datetime.now().strftime('%m%d-%H%M')
    identifiers.append(timestamp)
    
    # Si nous avons des IDs sp√©cifiques, les utiliser
    if len(identifiers) > 1:  # Plus que juste le timestamp
        # Cr√©er un hash court des IDs
        combined_ids = '-'.join(identifiers[:-1])  # Sans le timestamp
        id_hash = hashlib.md5(combined_ids.encode()).hexdigest()[:6]
        return f"{id_hash}-{timestamp[-4:]}"  # 6 chars hash + 4 chars time
    else:
        # Fallback sur timestamp √©tendu
        return datetime.now().strftime('%m%d-%H%M%S')


def _validate_and_sanitize_branch_name(branch_name: str) -> Optional[str]:
    """
    Valide et nettoie un nom de branche selon les r√®gles Git.
    
    R√®gles Git pour les noms de branche:
    - Pas de caract√®res sp√©ciaux (sauf - et _)
    - Pas de .. ou @
    - Pas de / au d√©but ou √† la fin
    - Longueur raisonnable
    
    Returns:
        Nom de branche valide ou None si impossible √† corriger
    """
    import re
    from typing import Optional
    
    if not branch_name or not isinstance(branch_name, str):
        return None
    
    # Supprimer les espaces en d√©but/fin
    branch_name = branch_name.strip()
    
    # V√©rifier la longueur maximum
    if len(branch_name) > 250:  # Limite Git
        return None
    
    # Interdire certains patterns dangereux
    if '..' in branch_name or '@' in branch_name:
        return None
    
    # Nettoyer les caract√®res invalides
    branch_name = re.sub(r'[^a-zA-Z0-9\-_/]', '-', branch_name)
    
    # Nettoyer les tirets multiples
    branch_name = re.sub(r'-+', '-', branch_name)
    
    # Supprimer les / en d√©but/fin
    branch_name = branch_name.strip('/')
    
    # V√©rifier qu'il reste quelque chose de valide
    if not branch_name or branch_name in ['.', '..']:
        return None
    
    # V√©rifier le format final
    if re.match(r'^[a-zA-Z0-9][a-zA-Z0-9\-_/]*[a-zA-Z0-9]$', branch_name):
        return branch_name
    elif len(branch_name) == 1 and re.match(r'^[a-zA-Z0-9]$', branch_name):
        return branch_name
    else:
        return None
