F811 Redefinition of unused `status` from line 3
   --> admin/backend/main.py:114:11
    |
113 | @app.get("/api/status", response_model=dict)
114 | async def status():
    |           ^^^^^^ `status` redefined here
115 |     """Statut détaillé du système."""
116 |     from admin.backend.services.monitoring_service import get_detailed_status
    |
   ::: admin/backend/main.py:3:45
    |
  1 | """Backend d'administration principal pour l'agent AI."""
  2 |
  3 | from fastapi import FastAPI, HTTPException, status
    |                                             ------ previous definition of `status` here
  4 | from fastapi.middleware.cors import CORSMiddleware
  5 | from fastapi.security import HTTPBearer
    |
help: Remove definition: `status`

E402 Module level import not at top of file
 --> main.py:3:1
  |
1 | """Point d'entrée principal de l'Agent d'Automatisation IA."""
2 | print("🔴 DEBUG: main.py est exécuté !")
3 | import sys
  | ^^^^^^^^^^
4 | print(f"🔴 DEBUG: Python path: {sys.path}")
5 | from typing import Dict
  |

E402 Module level import not at top of file
 --> main.py:5:1
  |
3 | import sys
4 | print(f"🔴 DEBUG: Python path: {sys.path}")
5 | from typing import Dict
  | ^^^^^^^^^^^^^^^^^^^^^^^
6 | from pydantic import BaseModel, Field, field_validator
7 | from models.schemas import MondayColumnValue
  |

E402 Module level import not at top of file
 --> main.py:6:1
  |
4 | print(f"🔴 DEBUG: Python path: {sys.path}")
5 | from typing import Dict
6 | from pydantic import BaseModel, Field, field_validator
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
7 | from models.schemas import MondayColumnValue
8 | from contextlib import asynccontextmanager
  |

E402 Module level import not at top of file
 --> main.py:7:1
  |
5 | from typing import Dict
6 | from pydantic import BaseModel, Field, field_validator
7 | from models.schemas import MondayColumnValue
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
8 | from contextlib import asynccontextmanager
9 | from fastapi import FastAPI, HTTPException, Request
  |

E402 Module level import not at top of file
  --> main.py:8:1
   |
 6 | from pydantic import BaseModel, Field, field_validator
 7 | from models.schemas import MondayColumnValue
 8 | from contextlib import asynccontextmanager
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 9 | from fastapi import FastAPI, HTTPException, Request
10 | from fastapi.middleware.cors import CORSMiddleware
   |

E402 Module level import not at top of file
  --> main.py:9:1
   |
 7 | from models.schemas import MondayColumnValue
 8 | from contextlib import asynccontextmanager
 9 | from fastapi import FastAPI, HTTPException, Request
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
10 | from fastapi.middleware.cors import CORSMiddleware
11 | from fastapi.responses import JSONResponse
   |

E402 Module level import not at top of file
  --> main.py:10:1
   |
 8 | from contextlib import asynccontextmanager
 9 | from fastapi import FastAPI, HTTPException, Request
10 | from fastapi.middleware.cors import CORSMiddleware
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
11 | from fastapi.responses import JSONResponse
12 | from typing import Optional
   |

E402 Module level import not at top of file
  --> main.py:11:1
   |
 9 | from fastapi import FastAPI, HTTPException, Request
10 | from fastapi.middleware.cors import CORSMiddleware
11 | from fastapi.responses import JSONResponse
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
12 | from typing import Optional
   |

E402 Module level import not at top of file
  --> main.py:12:1
   |
10 | from fastapi.middleware.cors import CORSMiddleware
11 | from fastapi.responses import JSONResponse
12 | from typing import Optional
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^
13 |
14 | from models.schemas import TaskRequest, WebhookPayload
   |

E402 Module level import not at top of file
  --> main.py:14:1
   |
12 | from typing import Optional
13 |
14 | from models.schemas import TaskRequest, WebhookPayload
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
15 | from services.webhook_service import WebhookService
16 | from services.webhook_persistence_service import webhook_persistence
   |

E402 Module level import not at top of file
  --> main.py:15:1
   |
14 | from models.schemas import TaskRequest, WebhookPayload
15 | from services.webhook_service import WebhookService
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
16 | from services.webhook_persistence_service import webhook_persistence
17 | from services.celery_app import celery_app, submit_task
   |

E402 Module level import not at top of file
  --> main.py:16:1
   |
14 | from models.schemas import TaskRequest, WebhookPayload
15 | from services.webhook_service import WebhookService
16 | from services.webhook_persistence_service import webhook_persistence
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
17 | from services.celery_app import celery_app, submit_task
18 | from config.settings import get_settings
   |

E402 Module level import not at top of file
  --> main.py:17:1
   |
15 | from services.webhook_service import WebhookService
16 | from services.webhook_persistence_service import webhook_persistence
17 | from services.celery_app import celery_app, submit_task
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
18 | from config.settings import get_settings
19 | from utils.logger import get_logger
   |

E402 Module level import not at top of file
  --> main.py:18:1
   |
16 | from services.webhook_persistence_service import webhook_persistence
17 | from services.celery_app import celery_app, submit_task
18 | from config.settings import get_settings
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
19 | from utils.logger import get_logger
   |

E402 Module level import not at top of file
  --> main.py:19:1
   |
17 | from services.celery_app import celery_app, submit_task
18 | from config.settings import get_settings
19 | from utils.logger import get_logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
20 |
21 | logger = get_logger(__name__)
   |

E722 Do not use bare `except`
   --> nodes/debug_node.py:165:5
    |
163 |             if log_result["success"]:
164 |                 analysis += f"\n### Contenu {log_file}:\n{log_result['content'][:300]}...\n"
165 |     except:
    |     ^^^^^^
166 |         pass
    |

F841 Local variable `solution` is assigned to but never used
   --> nodes/debug_node.py:293:17
    |
291 |                 problem = line.split(':', 1)[1].strip()
292 |             elif line.startswith('solution:'):
293 |                 solution = line.split(':', 1)[1].strip()
    |                 ^^^^^^^^
294 |             elif line.startswith('file_path:'):
295 |                 file_path = line.split(':', 1)[1].strip()
    |
help: Remove assignment to unused variable `solution`

F841 Local variable `old_content_result` is assigned to but never used
   --> nodes/debug_node.py:303:13
    |
301 |         if file_path and content:
302 |             # Sauvegarder l'ancien contenu pour rollback si nécessaire
303 |             old_content_result = await claude_tool._arun(action="read_file", file_path=file_path)
    |             ^^^^^^^^^^^^^^^^^^
304 |             
305 |             result = await claude_tool._arun(
    |
help: Remove assignment to unused variable `old_content_result`

F841 Local variable `problem` is assigned to but never used
   --> nodes/debug_node.py:342:17
    |
340 |         for line in lines:
341 |             if line.startswith('problem:'):
342 |                 problem = line.split(':', 1)[1].strip()
    |                 ^^^^^^^
343 |             elif line.startswith('command:'):
344 |                 command = line.split(':', 1)[1].strip()
    |
help: Remove assignment to unused variable `problem`

F841 Local variable `explanation` is assigned to but never used
   --> nodes/debug_node.py:346:17
    |
344 |                 command = line.split(':', 1)[1].strip()
345 |             elif line.startswith('explanation:'):
346 |                 explanation = line.split(':', 1)[1].strip()
    |                 ^^^^^^^^^^^
347 |         
348 |         if command:
    |
help: Remove assignment to unused variable `explanation`

F841 Local variable `working_directory` is assigned to but never used
  --> nodes/finalize_node.py:36:9
   |
34 |     try:
35 |         # Vérifier les prérequis
36 |         working_directory = state["results"].get("working_directory")
   |         ^^^^^^^^^^^^^^^^^
37 |         task = state["task"]
38 |         repo_url = task.repository_url or state["results"].get("repository_url")
   |
help: Remove assignment to unused variable `working_directory`

F841 Local variable `repo_url` is assigned to but never used
  --> nodes/finalize_node.py:38:9
   |
36 |         working_directory = state["results"].get("working_directory")
37 |         task = state["task"]
38 |         repo_url = task.repository_url or state["results"].get("repository_url")
   |         ^^^^^^^^
39 |         
40 |         # Au lieu de push/PR maintenant, on attend la validation humaine
   |
help: Remove assignment to unused variable `repo_url`

E722 Do not use bare `except`
   --> nodes/implement_node.py:173:13
    |
171 |                     structure_info += f"\n\n=== {config_file} ===\n"
172 |                     structure_info += config_result["content"][:500] + "..."
173 |             except:
    |             ^^^^^^
174 |                 continue
    |

F841 Local variable `description` is assigned to but never used
   --> nodes/implement_node.py:354:17
    |
352 |                 file_path = line.split(':', 1)[1].strip()
353 |             elif line.startswith('description:'):
354 |                 description = line.split(':', 1)[1].strip()
    |                 ^^^^^^^^^^^
355 |             elif line.startswith('content:'):
356 |                 content_started = True
    |
help: Remove assignment to unused variable `description`

E722 Do not use bare `except`
   --> nodes/qa_node.py:196:13
    |
194 |                 if result.returncode == 0:
195 |                     project_info["qa_tools_available"].append(tool)
196 |             except:
    |             ^^^^^^
197 |                 continue
    |

E722 Do not use bare `except`
   --> nodes/qa_node.py:313:5
    |
311 |             result["issues_count"] = len(issues)
312 |             result["critical_issues"] = len([i for i in issues if i.get("type") in ["error", "fatal"]])
313 |     except:
    |     ^^^^^^
314 |         pass
    |

E722 Do not use bare `except`
   --> nodes/qa_node.py:404:5
    |
402 |             result["issues_count"] = len(issues)
403 |             result["critical_issues"] = len([i for i in issues if i.get("issue_severity") in ["HIGH", "MEDIUM"]])
404 |     except:
    |     ^^^^^^
405 |         pass
    |

E722 Do not use bare `except`
   --> services/monday_validation_service.py:208:13
    |
206 |                 if update_time <= since:
207 |                     continue  # Trop ancien
208 |             except:
    |             ^^^^^^
209 |                 continue
    |

E722 Do not use bare `except`
   --> services/monday_validation_service.py:373:9
    |
371 |                 duration = (datetime.now() - created_at).total_seconds() / 60
372 |                 return int(duration)
373 |         except:
    |         ^^^^^^
374 |             pass
375 |         return None
    |

E722 Do not use bare `except`
   --> services/monitoring_service.py:409:13
    |
407 |             try:
408 |                 await client.send_json(message)
409 |             except:
    |             ^^^^^^
410 |                 disconnected.append(client)
    |

E722 Do not use bare `except`
   --> services/monitoring_service.py:435:13
    |
433 |             try:
434 |                 await client.send_json(message)
435 |             except:
    |             ^^^^^^
436 |                 self.connected_clients.remove(client)
    |

E722 Do not use bare `except`
   --> services/monitoring_service.py:522:13
    |
520 |             try:
521 |                 await client.send_json(alert_message)
522 |             except:
    |             ^^^^^^
523 |                 self.connected_clients.remove(client)
    |

F841 Local variable `board_id` is assigned to but never used
  --> services/webhook_persistence_service.py:93:13
   |
91 |             pulse_id = payload.get("pulseId")
92 |             pulse_name = payload.get("pulseName", "Tâche sans titre")
93 |             board_id = payload.get("boardId")
   |             ^^^^^^^^
94 |             
95 |             # Rechercher si la tâche existe déjà
   |
help: Remove assignment to unused variable `board_id`

F841 Local variable `run_id` is assigned to but never used
   --> services/webhook_service.py:109:13
    |
108 |             # 9. Sauvegarder le run en base
109 |             run_id = await self._save_task_run(task_id, task_request)
    |             ^^^^^^
110 |             
111 |             # Note : Le statut de la tâche est automatiquement mis à jour par le trigger sync_task_status
    |
help: Remove assignment to unused variable `run_id`

F811 Redefinition of unused `status` from line 3
   --> test_repo/admin/backend/main.py:112:11
    |
111 | @app.get("/api/status", response_model=dict)
112 | async def status():
    |           ^^^^^^ `status` redefined here
113 |     """Statut détaillé du système."""
114 |     from admin.backend.services.monitoring_service import get_detailed_status
    |
   ::: test_repo/admin/backend/main.py:3:45
    |
  1 | """Backend d'administration principal pour l'agent AI."""
  2 |
  3 | from fastapi import FastAPI, HTTPException, status
    |                                             ------ previous definition of `status` here
  4 | from fastapi.middleware.cors import CORSMiddleware
  5 | from fastapi.security import HTTPBearer
    |
help: Remove definition: `status`

E402 Module level import not at top of file
 --> test_repo/main.py:3:1
  |
1 | """Point d'entrée principal de l'Agent d'Automatisation IA."""
2 | print("🔴 DEBUG: main.py est exécuté !")
3 | import sys
  | ^^^^^^^^^^
4 | print(f"🔴 DEBUG: Python path: {sys.path}")
5 | from typing import Dict
  |

E402 Module level import not at top of file
 --> test_repo/main.py:5:1
  |
3 | import sys
4 | print(f"🔴 DEBUG: Python path: {sys.path}")
5 | from typing import Dict
  | ^^^^^^^^^^^^^^^^^^^^^^^
6 | from pydantic import BaseModel, Field, field_validator
7 | from models.schemas import MondayColumnValue
  |

E402 Module level import not at top of file
 --> test_repo/main.py:6:1
  |
4 | print(f"🔴 DEBUG: Python path: {sys.path}")
5 | from typing import Dict
6 | from pydantic import BaseModel, Field, field_validator
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
7 | from models.schemas import MondayColumnValue
8 | from contextlib import asynccontextmanager
  |

E402 Module level import not at top of file
 --> test_repo/main.py:7:1
  |
5 | from typing import Dict
6 | from pydantic import BaseModel, Field, field_validator
7 | from models.schemas import MondayColumnValue
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
8 | from contextlib import asynccontextmanager
9 | from fastapi import FastAPI, HTTPException, Request
  |

E402 Module level import not at top of file
  --> test_repo/main.py:8:1
   |
 6 | from pydantic import BaseModel, Field, field_validator
 7 | from models.schemas import MondayColumnValue
 8 | from contextlib import asynccontextmanager
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 9 | from fastapi import FastAPI, HTTPException, Request
10 | from fastapi.middleware.cors import CORSMiddleware
   |

E402 Module level import not at top of file
  --> test_repo/main.py:9:1
   |
 7 | from models.schemas import MondayColumnValue
 8 | from contextlib import asynccontextmanager
 9 | from fastapi import FastAPI, HTTPException, Request
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
10 | from fastapi.middleware.cors import CORSMiddleware
11 | from fastapi.responses import JSONResponse
   |

E402 Module level import not at top of file
  --> test_repo/main.py:10:1
   |
 8 | from contextlib import asynccontextmanager
 9 | from fastapi import FastAPI, HTTPException, Request
10 | from fastapi.middleware.cors import CORSMiddleware
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
11 | from fastapi.responses import JSONResponse
12 | from typing import Optional
   |

E402 Module level import not at top of file
  --> test_repo/main.py:11:1
   |
 9 | from fastapi import FastAPI, HTTPException, Request
10 | from fastapi.middleware.cors import CORSMiddleware
11 | from fastapi.responses import JSONResponse
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
12 | from typing import Optional
   |

E402 Module level import not at top of file
  --> test_repo/main.py:12:1
   |
10 | from fastapi.middleware.cors import CORSMiddleware
11 | from fastapi.responses import JSONResponse
12 | from typing import Optional
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^
13 |
14 | from models.schemas import TaskRequest, WebhookPayload
   |

E402 Module level import not at top of file
  --> test_repo/main.py:14:1
   |
12 | from typing import Optional
13 |
14 | from models.schemas import TaskRequest, WebhookPayload
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
15 | from services.webhook_service import WebhookService
16 | from services.celery_app import celery_app, submit_task
   |

E402 Module level import not at top of file
  --> test_repo/main.py:15:1
   |
14 | from models.schemas import TaskRequest, WebhookPayload
15 | from services.webhook_service import WebhookService
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
16 | from services.celery_app import celery_app, submit_task
17 | from config.settings import get_settings
   |

E402 Module level import not at top of file
  --> test_repo/main.py:16:1
   |
14 | from models.schemas import TaskRequest, WebhookPayload
15 | from services.webhook_service import WebhookService
16 | from services.celery_app import celery_app, submit_task
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
17 | from config.settings import get_settings
18 | from utils.logger import get_logger
   |

E402 Module level import not at top of file
  --> test_repo/main.py:17:1
   |
15 | from services.webhook_service import WebhookService
16 | from services.celery_app import celery_app, submit_task
17 | from config.settings import get_settings
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
18 | from utils.logger import get_logger
   |

E402 Module level import not at top of file
  --> test_repo/main.py:18:1
   |
16 | from services.celery_app import celery_app, submit_task
17 | from config.settings import get_settings
18 | from utils.logger import get_logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
19 |
20 | logger = get_logger(__name__)
   |

E722 Do not use bare `except`
   --> test_repo/nodes/debug_node.py:151:5
    |
149 |             if log_result["success"]:
150 |                 analysis += f"\n### Contenu {log_file}:\n{log_result['content'][:300]}...\n"
151 |     except:
    |     ^^^^^^
152 |         pass
    |

F841 Local variable `solution` is assigned to but never used
   --> test_repo/nodes/debug_node.py:279:17
    |
277 |                 problem = line.split(':', 1)[1].strip()
278 |             elif line.startswith('solution:'):
279 |                 solution = line.split(':', 1)[1].strip()
    |                 ^^^^^^^^
280 |             elif line.startswith('file_path:'):
281 |                 file_path = line.split(':', 1)[1].strip()
    |
help: Remove assignment to unused variable `solution`

F841 Local variable `old_content_result` is assigned to but never used
   --> test_repo/nodes/debug_node.py:289:13
    |
287 |         if file_path and content:
288 |             # Sauvegarder l'ancien contenu pour rollback si nécessaire
289 |             old_content_result = await claude_tool._arun(action="read_file", file_path=file_path)
    |             ^^^^^^^^^^^^^^^^^^
290 |             
291 |             result = await claude_tool._arun(
    |
help: Remove assignment to unused variable `old_content_result`

F841 Local variable `problem` is assigned to but never used
   --> test_repo/nodes/debug_node.py:328:17
    |
326 |         for line in lines:
327 |             if line.startswith('problem:'):
328 |                 problem = line.split(':', 1)[1].strip()
    |                 ^^^^^^^
329 |             elif line.startswith('command:'):
330 |                 command = line.split(':', 1)[1].strip()
    |
help: Remove assignment to unused variable `problem`

F841 Local variable `explanation` is assigned to but never used
   --> test_repo/nodes/debug_node.py:332:17
    |
330 |                 command = line.split(':', 1)[1].strip()
331 |             elif line.startswith('explanation:'):
332 |                 explanation = line.split(':', 1)[1].strip()
    |                 ^^^^^^^^^^^
333 |         
334 |         if command:
    |
help: Remove assignment to unused variable `explanation`

E722 Do not use bare `except`
   --> test_repo/nodes/implement_node.py:150:13
    |
148 |                     structure_info += f"\n\n=== {config_file} ===\n"
149 |                     structure_info += config_result["content"][:500] + "..."
150 |             except:
    |             ^^^^^^
151 |                 continue
    |

F841 Local variable `description` is assigned to but never used
   --> test_repo/nodes/implement_node.py:331:17
    |
329 |                 file_path = line.split(':', 1)[1].strip()
330 |             elif line.startswith('description:'):
331 |                 description = line.split(':', 1)[1].strip()
    |                 ^^^^^^^^^^^
332 |             elif line.startswith('content:'):
333 |                 content_started = True
    |
help: Remove assignment to unused variable `description`

E722 Do not use bare `except`
   --> test_repo/nodes/qa_node.py:181:13
    |
179 |                 if result.returncode == 0:
180 |                     project_info["qa_tools_available"].append(tool)
181 |             except:
    |             ^^^^^^
182 |                 continue
    |

E722 Do not use bare `except`
   --> test_repo/nodes/qa_node.py:298:5
    |
296 |             result["issues_count"] = len(issues)
297 |             result["critical_issues"] = len([i for i in issues if i.get("type") in ["error", "fatal"]])
298 |     except:
    |     ^^^^^^
299 |         pass
    |

E722 Do not use bare `except`
   --> test_repo/nodes/qa_node.py:389:5
    |
387 |             result["issues_count"] = len(issues)
388 |             result["critical_issues"] = len([i for i in issues if i.get("issue_severity") in ["HIGH", "MEDIUM"]])
389 |     except:
    |     ^^^^^^
390 |         pass
    |

F821 Undefined name `claude_tool`
  --> test_repo/nodes/test_node.py:70:37
   |
69 |             try:
70 |                 test_result = await claude_tool._run_tests(test_cmd)
   |                                     ^^^^^^^^^^^
71 |                 
72 |                 # Si la commande s'est exécutée (même en échec), on s'arrête là
   |

E722 Do not use bare `except`
   --> test_repo/services/celery_app.py:311:9
    |
309 |             )
310 |             loop.close()
311 |         except:
    |         ^^^^^^
312 |             pass
    |

E722 Do not use bare `except`
   --> test_repo/services/monitoring_service.py:377:13
    |
375 |             try:
376 |                 await client.send_json(message)
377 |             except:
    |             ^^^^^^
378 |                 disconnected.append(client)
    |

E722 Do not use bare `except`
   --> test_repo/services/monitoring_service.py:403:13
    |
401 |             try:
402 |                 await client.send_json(message)
403 |             except:
    |             ^^^^^^
404 |                 self.connected_clients.remove(client)
    |

E722 Do not use bare `except`
   --> test_repo/services/monitoring_service.py:482:13
    |
480 |             try:
481 |                 await client.send_json(alert_message)
482 |             except:
    |             ^^^^^^
483 |                 self.connected_clients.remove(client)
    |

F841 Local variable `run_id` is assigned to but never used
  --> test_repo/services/webhook_service.py:95:13
   |
94 |             # 9. Sauvegarder le run en base
95 |             run_id = await self._save_task_run(task_id, task_request)
   |             ^^^^^^
96 |             
97 |             # 9.1 Mettre la tâche en 'processing' (idempotent)
   |
help: Remove assignment to unused variable `run_id`

F841 Local variable `add_result` is assigned to but never used
   --> test_repo/tools/github_tool.py:158:17
    |
156 |             try:
157 |                 # Ajouter tous les fichiers modifiés
158 |                 add_result = subprocess.run(
    |                 ^^^^^^^^^^
159 |                     ["git", "add", "."],
160 |                     capture_output=True,
    |
help: Remove assignment to unused variable `add_result`

F841 Local variable `commit_result` is assigned to but never used
   --> test_repo/tools/github_tool.py:166:17
    |
165 |                 # Committer les changements
166 |                 commit_result = subprocess.run(
    |                 ^^^^^^^^^^^^^
167 |                     ["git", "commit", "-m", f"Implémentation automatique - {branch}"],
168 |                     capture_output=True,
    |
help: Remove assignment to unused variable `commit_result`

F841 Local variable `push_result` is assigned to but never used
   --> test_repo/tools/github_tool.py:174:17
    |
173 |                 # Pousser la branche
174 |                 push_result = subprocess.run(
    |                 ^^^^^^^^^^^
175 |                     ["git", "push", "origin", branch],
176 |                     capture_output=True,
    |
help: Remove assignment to unused variable `push_result`

F841 Local variable `status_value` is assigned to but never used
   --> test_repo/tools/monday_tool.py:252:9
    |
250 |         }
251 |         
252 |         status_value = status_mapping.get(status, status.lower())
    |         ^^^^^^^^^^^^
253 |         
254 |         query = """
    |
help: Remove assignment to unused variable `status_value`

F841 Local variable `skipped_tests` is assigned to but never used
   --> test_repo/tools/testing_engine.py:324:17
    |
322 |                 passed_tests = summary.get("passed", 0)
323 |                 failed_tests = summary.get("failed", 0)
324 |                 skipped_tests = summary.get("skipped", 0)
    |                 ^^^^^^^^^^^^^
325 |                 execution_time = report.get("duration", 0.0)
326 |                 success = summary.get("failed", 0) == 0
    |
help: Remove assignment to unused variable `skipped_tests`

F841 Local variable `execution_time` is assigned to but never used
   --> test_repo/tools/testing_engine.py:325:17
    |
323 |                 failed_tests = summary.get("failed", 0)
324 |                 skipped_tests = summary.get("skipped", 0)
325 |                 execution_time = report.get("duration", 0.0)
    |                 ^^^^^^^^^^^^^^
326 |                 success = summary.get("failed", 0) == 0
    |
help: Remove assignment to unused variable `execution_time`

F841 Local variable `failures` is assigned to but never used
   --> test_repo/tools/testing_engine.py:329:17
    |
328 |                 # Parser les échecs
329 |                 failures = self._parse_test_failures(report.get("tests", []))
    |                 ^^^^^^^^
330 |                 
331 |             except Exception as e:
    |
help: Remove assignment to unused variable `failures`

F841 Local variable `parsed` is assigned to but never used
  --> tests/test_fixes.py:83:9
   |
82 |     try:
83 |         parsed = json.loads(repaired) 
   |         ^^^^^^
84 |         print("✅ Guillemets manquants ajoutés")
85 |     except json.JSONDecodeError:
   |
help: Remove assignment to unused variable `parsed`

F841 Local variable `persistence` is assigned to but never used
  --> tests/test_monday_fixes.py:28:9
   |
26 |         }
27 |         
28 |         persistence = DatabasePersistenceService()
   |         ^^^^^^^^^^^
29 |         
30 |         # Simuler la logique d'extraction
   |
help: Remove assignment to unused variable `persistence`

F821 Undefined name `monitoring_dashboard`
   --> tools/claude_code_tool.py:209:27
    |
207 |                 run_step_id = context.get("run_step_id")
208 |                 if run_step_id:
209 |                     await monitoring_dashboard.save_ai_interaction(
    |                           ^^^^^^^^^^^^^^^^^^^^
210 |                         run_step_id=run_step_id,
211 |                         provider="claude",
    |

E722 Do not use bare `except`
   --> tools/claude_code_tool.py:579:9
    |
577 |             await self._execute_command(f"git checkout -b {branch}", cwd=self.working_directory)
578 |             self.logger.info(f"✅ Workspace git minimal créé avec branche {branch}")
579 |         except:
    |         ^^^^^^
580 |             self.logger.warning("⚠️ Impossible d'initialiser git - workspace sans version")
    |

E722 Do not use bare `except`
   --> tools/claude_code_tool.py:594:13
    |
592 |                 with open(file_path, 'w', encoding='utf-8') as f:
593 |                     f.write(content)
594 |             except:
    |             ^^^^^^
595 |                 pass  # Ignorer les erreurs de création de fichiers
    |

F841 Local variable `add_result` is assigned to but never used
   --> tools/github_tool.py:214:17
    |
212 |             try:
213 |                 # Ajouter tous les fichiers modifiés
214 |                 add_result = subprocess.run(
    |                 ^^^^^^^^^^
215 |                     ["git", "add", "."],
216 |                     capture_output=True,
    |
help: Remove assignment to unused variable `add_result`

F841 Local variable `commit_result` is assigned to but never used
   --> tools/github_tool.py:222:17
    |
221 |                 # Committer les changements
222 |                 commit_result = subprocess.run(
    |                 ^^^^^^^^^^^^^
223 |                     ["git", "commit", "-m", f"Implémentation automatique - {branch}"],
224 |                     capture_output=True,
    |
help: Remove assignment to unused variable `commit_result`

F841 Local variable `push_result` is assigned to but never used
   --> tools/github_tool.py:230:17
    |
229 |                 # Pousser la branche
230 |                 push_result = subprocess.run(
    |                 ^^^^^^^^^^^
231 |                     ["git", "push", "origin", branch],
232 |                     capture_output=True,
    |
help: Remove assignment to unused variable `push_result`

F841 Local variable `status_value` is assigned to but never used
   --> tools/monday_tool.py:383:9
    |
381 |         }
382 |         
383 |         status_value = status_mapping.get(status, status.lower())
    |         ^^^^^^^^^^^^
384 |         
385 |         try:
    |
help: Remove assignment to unused variable `status_value`

F821 Undefined name `total_success`
   --> tools/testing_engine.py:204:24
    |
203 |         return {
204 |             "success": total_success,
    |                        ^^^^^^^^^^^^^
205 |             "test_results": all_results,
206 |             "coverage": coverage_result,
    |

F821 Undefined name `all_results`
   --> tools/testing_engine.py:205:29
    |
203 |         return {
204 |             "success": total_success,
205 |             "test_results": all_results,
    |                             ^^^^^^^^^^^
206 |             "coverage": coverage_result,
207 |             "summary": self._generate_test_summary(all_results),
    |

F821 Undefined name `all_results`
   --> tools/testing_engine.py:207:52
    |
205 |             "test_results": all_results,
206 |             "coverage": coverage_result,
207 |             "summary": self._generate_test_summary(all_results),
    |                                                    ^^^^^^^^^^^
208 |             "recommendations": self._generate_recommendations(all_results, coverage_result)
209 |         }
    |

F821 Undefined name `all_results`
   --> tools/testing_engine.py:208:63
    |
206 |             "coverage": coverage_result,
207 |             "summary": self._generate_test_summary(all_results),
208 |             "recommendations": self._generate_recommendations(all_results, coverage_result)
    |                                                               ^^^^^^^^^^^
209 |         }
    |

F841 Local variable `skipped_tests` is assigned to but never used
   --> tools/testing_engine.py:475:17
    |
473 |                 passed_tests = summary.get("passed", 0)
474 |                 failed_tests = summary.get("failed", 0)
475 |                 skipped_tests = summary.get("skipped", 0)
    |                 ^^^^^^^^^^^^^
476 |                 execution_time = report.get("duration", 0.0)
477 |                 success = summary.get("failed", 0) == 0
    |
help: Remove assignment to unused variable `skipped_tests`

Found 368 errors (281 fixed, 87 remaining).
No fixes available (29 hidden fixes can be enabled with the `--unsafe-fixes` option).
