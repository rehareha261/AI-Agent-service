#!/usr/bin/env python3
"""
Script pour analyser les logs Celery et identifier les probl√®mes.
"""

import json
import re
from typing import List, Dict, Any


class CeleryLogAnalyzer:
    """Analyseur de logs Celery."""
    
    def __init__(self, log_content: str):
        self.log_content = log_content
        self.warnings = []
        self.errors = []
        self.info = []
        
    def parse_logs(self):
        """Parse les logs et extrait les messages structur√©s."""
        lines = self.log_content.split('\n')
        
        for line in lines:
            # Chercher les JSON logs
            if '"event":' in line and '"level":' in line:
                try:
                    # Extraire le JSON
                    json_match = re.search(r'\{.*\}', line)
                    if json_match:
                        log_entry = json.loads(json_match.group(0))
                        
                        level = log_entry.get('level', '').lower()
                        event = log_entry.get('event', '')
                        
                        if level == 'error' or '‚ùå' in event:
                            self.errors.append(log_entry)
                        elif level == 'warning' or '‚ö†Ô∏è' in event:
                            self.warnings.append(log_entry)
                        elif 'üîç' in event or 'DEBUG' in event.upper():
                            self.info.append(log_entry)
                except json.JSONDecodeError:
                    pass
    
    def analyze_issues(self) -> Dict[str, List[str]]:
        """Analyse les probl√®mes identifi√©s."""
        issues = {
            'critical': [],
            'warnings': [],
            'informational': []
        }
        
        # Analyser les erreurs
        for error in self.errors:
            event = error.get('event', '')
            issues['critical'].append({
                'type': 'ERROR',
                'message': event,
                'timestamp': error.get('timestamp', 'N/A')
            })
        
        # Analyser les warnings
        for warning in self.warnings:
            event = warning.get('event', '')
            
            # Cat√©goriser les warnings
            if 'Aucune colonne attendue trouv√©e' in event:
                issues['warnings'].append({
                    'type': 'COLONNES_MANQUANTES',
                    'message': event,
                    'fix': 'V√©rifier le mapping des colonnes dans webhook_service.py'
                })
            elif 'URL repository nettoy√©e' in event:
                issues['warnings'].append({
                    'type': 'FORMAT_URL',
                    'message': event,
                    'fix': 'Le nettoyage fonctionne mais Monday.com devrait envoyer une URL propre'
                })
            elif 'avertissement(s) de linting' in event:
                issues['warnings'].append({
                    'type': 'LINTING',
                    'message': event,
                    'fix': 'Corriger les warnings de linting dans le code g√©n√©r√©'
                })
            elif 'Branche prot√©g√©e d√©tect√©e' in event:
                issues['informational'].append({
                    'type': 'INFO',
                    'message': event,
                    'note': 'Comportement normal - cr√©ation de branche feature'
                })
        
        return issues
    
    def print_analysis(self):
        """Affiche l'analyse des logs."""
        print("\n" + "="*60)
        print("üîç ANALYSE DES LOGS CELERY")
        print("="*60)
        
        print(f"\nStatistiques:")
        print(f"  ‚Ä¢ {len(self.errors)} erreur(s)")
        print(f"  ‚Ä¢ {len(self.warnings)} avertissement(s)")
        print(f"  ‚Ä¢ {len(self.info)} message(s) informatif(s)")
        
        issues = self.analyze_issues()
        
        if issues['critical']:
            print("\n" + "="*60)
            print("‚ùå ERREURS CRITIQUES")
            print("="*60)
            for i, issue in enumerate(issues['critical'], 1):
                print(f"\n{i}. {issue['type']}")
                print(f"   Message: {issue['message'][:100]}...")
                print(f"   Timestamp: {issue['timestamp']}")
        
        if issues['warnings']:
            print("\n" + "="*60)
            print("‚ö†Ô∏è  AVERTISSEMENTS √Ä CORRIGER")
            print("="*60)
            for i, issue in enumerate(issues['warnings'], 1):
                print(f"\n{i}. Type: {issue['type']}")
                print(f"   Message: {issue['message'][:100]}...")
                if 'fix' in issue:
                    print(f"   üîß Solution: {issue['fix']}")
        
        if issues['informational']:
            print("\n" + "="*60)
            print("‚ÑπÔ∏è  INFORMATIONS")
            print("="*60)
            for i, issue in enumerate(issues['informational'], 1):
                print(f"\n{i}. {issue['type']}")
                print(f"   {issue['message'][:100]}...")
                if 'note' in issue:
                    print(f"   Note: {issue['note']}")


# Logs √† analyser
CELERY_LOGS = """
Ligne 48-50: ‚ö†Ô∏è Aucune colonne attendue trouv√©e. Colonnes disponibles: ['task_owner', 'task_status', 'item_id', 'task_estimation', 'task_actual_effort']
Ligne 58: URL repository trouv√©e dans colonne configur√©e (link): GitHub - rehareha261/S2-GenericDAO - https://github.com/rehareha261/S2-GenericDAO
Ligne 177: ‚ö†Ô∏è 2 avertissement(s) de linting d√©tect√©(s) (non-bloquants)
"""

print("\n" + "="*60)
print("üìä PROBL√àMES IDENTIFI√âS DANS LES LOGS CELERY")
print("="*60)

print("\n1Ô∏è‚É£ PROBL√àME: Colonnes attendues non trouv√©es")
print("   Ligne 48-50 des logs")
print("   Message: '‚ö†Ô∏è Aucune colonne attendue trouv√©e'")
print("\n   üîç Cause:")
print("      Le webhook_service.py cherche des colonnes qui n'existent pas")
print("      dans le nouveau board Monday.com")
print("\n   üîß Solution:")
print("      Mettre √† jour le mapping des colonnes dans webhook_service.py")

print("\n2Ô∏è‚É£ PROBL√àME: Format URL Monday.com incorrect")
print("   Ligne 58 des logs")
print("   Message: URL contient 'GitHub - user/repo - https://...'")
print("\n   üîç Cause:")
print("      Monday.com envoie l'URL avec du texte suppl√©mentaire")
print("\n   ‚úÖ Status:")
print("      D√âJ√Ä CORRIG√â - Le nettoyage d'URL fonctionne (ligne 100)")
print("      Mais on peut am√©liorer pour √©viter ce nettoyage")

print("\n3Ô∏è‚É£ PROBL√àME: Avertissements de linting")
print("   Ligne 177 des logs")
print("   Message: '‚ö†Ô∏è 2 avertissement(s) de linting d√©tect√©(s)'")
print("\n   üîç Cause:")
print("      Le code g√©n√©r√© par l'IA contient des warnings de style")
print("\n   üîß Solution:")
print("      Am√©liorer les prompts pour g√©n√©rer du code plus propre")

print("\n4Ô∏è‚É£ PROBL√àME: Contenu g√©n√©rique g√©n√©r√©")
print("   Le main.txt ne correspond pas au projet r√©el (S2-GenericDAO)")
print("\n   üîç Cause:")
print("      L'IA n'a pas analys√© le contenu r√©el du repository")
print("      Elle a g√©n√©r√© un r√©sum√© g√©n√©rique")
print("\n   üîß Solution:")
print("      Am√©liorer le node implement pour lire le repository avant")

print("\n" + "="*60)
print("üìù R√âSUM√â DES CORRECTIONS √Ä EFFECTUER")
print("="*60)

print("\n‚úÖ Priorit√© HAUTE:")
print("   1. Corriger le mapping des colonnes dans webhook_service.py")
print("   2. Am√©liorer l'analyse du repository avant g√©n√©ration")

print("\n‚ö†Ô∏è  Priorit√© MOYENNE:")
print("   3. Am√©liorer les prompts pour √©viter warnings de linting")

print("\n‚úì  Priorit√© BASSE (d√©j√† g√©r√©):")
print("   4. Nettoyage URL Monday.com (fonctionne)")

print("\n" + "="*60)

