"""
Script pour s'assurer que la table run_step_checkpoints existe.
Ce script v√©rifie et cr√©e la table si elle n'existe pas.
"""

import asyncio
import asyncpg
import sys
import os
from dotenv import load_dotenv

# Charger les variables d'environnement
load_dotenv()

# R√©cup√©rer l'URL de la base de donn√©es
DATABASE_URL = os.getenv("DATABASE_URL", "postgresql://admin:password@localhost:5432/ai_agent_admin")


async def ensure_checkpoints_table():
    """V√©rifie et cr√©e la table run_step_checkpoints si n√©cessaire."""
    
    conn = None
    
    try:
        print("üîó Connexion √† la base de donn√©es...")
        conn = await asyncpg.connect(DATABASE_URL)
        
        # V√©rifier si la table existe
        table_exists = await conn.fetchval("""
            SELECT EXISTS (
                SELECT FROM information_schema.tables 
                WHERE table_schema = 'public' 
                AND table_name = 'run_step_checkpoints'
            )
        """)
        
        if table_exists:
            print("‚úÖ La table run_step_checkpoints existe d√©j√†")
            
            # V√©rifier le nombre d'enregistrements
            count = await conn.fetchval("SELECT COUNT(*) FROM run_step_checkpoints")
            print(f"üìä Nombre de checkpoints existants: {count}")
            return True
        
        print("‚ö†Ô∏è La table run_step_checkpoints n'existe pas - Cr√©ation...")
        
        # Cr√©er la table run_step_checkpoints
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS run_step_checkpoints (
                checkpoint_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                step_id BIGINT NOT NULL REFERENCES run_steps(run_steps_id) ON DELETE CASCADE,
                checkpoint_data JSONB,
                created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
                updated_at TIMESTAMPTZ
            )
        """)
        
        print("‚úÖ Table run_step_checkpoints cr√©√©e")
        
        # Cr√©er les index
        await conn.execute("""
            CREATE INDEX IF NOT EXISTS idx_checkpoints_step_id 
            ON run_step_checkpoints(step_id)
        """)
        
        await conn.execute("""
            CREATE INDEX IF NOT EXISTS idx_checkpoints_created_at 
            ON run_step_checkpoints(created_at DESC)
        """)
        
        print("‚úÖ Index cr√©√©s")
        
        # V√©rifier que tout est OK
        table_exists_now = await conn.fetchval("""
            SELECT EXISTS (
                SELECT FROM information_schema.tables 
                WHERE table_schema = 'public' 
                AND table_name = 'run_step_checkpoints'
            )
        """)
        
        if table_exists_now:
            print("‚úÖ Table run_step_checkpoints cr√©√©e avec succ√®s")
            return True
        else:
            print("‚ùå √âchec de la cr√©ation de la table")
            return False
            
    except asyncpg.exceptions.UndefinedTableError as e:
        print(f"‚ùå Table run_steps n'existe pas: {e}")
        print("üí° Ex√©cutez d'abord: psql $DATABASE_URL -f data/base2.sql")
        return False
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification/cr√©ation: {e}")
        import traceback
        traceback.print_exc()
        return False
        
    finally:
        if conn:
            await conn.close()
            print("üîí Connexion ferm√©e")


async def verify_run_steps_table():
    """V√©rifie que la table run_steps existe avec les bonnes colonnes."""
    
    conn = None
    
    try:
        conn = await asyncpg.connect(DATABASE_URL)
        
        # V√©rifier que run_steps existe
        table_exists = await conn.fetchval("""
            SELECT EXISTS (
                SELECT FROM information_schema.tables 
                WHERE table_schema = 'public' 
                AND table_name = 'run_steps'
            )
        """)
        
        if not table_exists:
            print("‚ùå La table run_steps n'existe pas")
            print("üí° Ex√©cutez: psql $DATABASE_URL -f data/base2.sql")
            return False
        
        print("‚úÖ La table run_steps existe")
        
        # V√©rifier les colonnes checkpoint_data et checkpoint_saved_at
        columns = await conn.fetch("""
            SELECT column_name 
            FROM information_schema.columns 
            WHERE table_name = 'run_steps' 
            AND column_name IN ('checkpoint_data', 'checkpoint_saved_at')
        """)
        
        column_names = [row['column_name'] for row in columns]
        
        if 'checkpoint_data' not in column_names:
            print("‚ö†Ô∏è Colonne checkpoint_data manquante - Ajout...")
            await conn.execute("ALTER TABLE run_steps ADD COLUMN checkpoint_data JSONB")
            print("‚úÖ Colonne checkpoint_data ajout√©e")
        else:
            print("‚úÖ Colonne checkpoint_data existe")
        
        if 'checkpoint_saved_at' not in column_names:
            print("‚ö†Ô∏è Colonne checkpoint_saved_at manquante - Ajout...")
            await conn.execute("ALTER TABLE run_steps ADD COLUMN checkpoint_saved_at TIMESTAMPTZ")
            print("‚úÖ Colonne checkpoint_saved_at ajout√©e")
        else:
            print("‚úÖ Colonne checkpoint_saved_at existe")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification de run_steps: {e}")
        import traceback
        traceback.print_exc()
        return False
        
    finally:
        if conn:
            await conn.close()


async def main():
    """Point d'entr√©e principal."""
    
    print("\n" + "="*60)
    print("üîß V√©rification et cr√©ation de la table run_step_checkpoints")
    print("="*60 + "\n")
    
    # 1. V√©rifier la table run_steps
    print("üìã √âtape 1/2: V√©rification de la table run_steps...")
    run_steps_ok = await verify_run_steps_table()
    
    if not run_steps_ok:
        print("‚ùå La table run_steps doit exister avant de cr√©er run_step_checkpoints")
        print("üí° Ex√©cutez: psql $DATABASE_URL -f data/base2.sql")
        return False
    
    print()
    
    # 2. Cr√©er la table run_step_checkpoints
    print("üìã √âtape 2/2: Cr√©ation de la table run_step_checkpoints...")
    checkpoints_ok = await ensure_checkpoints_table()
    
    print("\n" + "="*60)
    if checkpoints_ok:
        print("‚úÖ Configuration termin√©e avec succ√®s!")
        print("="*60 + "\n")
        return True
    else:
        print("‚ùå √âchec de la configuration")
        print("="*60 + "\n")
        return False


if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)

