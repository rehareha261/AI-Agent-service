#!/usr/bin/env python3
"""Script pour v√©rifier/cr√©er la colonne 'Repository URL' dans Monday.com."""

import asyncio
import sys
import os

# Ajouter le chemin du projet
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from tools.monday_tool import MondayTool
from config.settings import get_settings
from utils.logger import get_logger

logger = get_logger(__name__)


async def check_repository_url_column(board_id: str) -> dict:
    """
    V√©rifie si la colonne 'Repository URL' existe sur le board Monday.com.
    
    Args:
        board_id: ID du board Monday.com
        
    Returns:
        Dictionnaire avec les informations de la colonne
    """
    monday_tool = MondayTool()
    
    # Requ√™te GraphQL pour r√©cup√©rer les colonnes du board
    query = """
    query GetBoardColumns($boardId: [ID!]) {
        boards(ids: $boardId) {
            id
            name
            columns {
                id
                title
                type
            }
        }
    }
    """
    
    variables = {"boardId": [board_id]}
    
    try:
        result = await monday_tool._make_request(query, variables)
        
        if not result.get("success"):
            return {
                "success": False,
                "error": result.get("error", "Erreur inconnue")
            }
        
        if not result.get("data", {}).get("boards"):
            return {
                "success": False,
                "error": f"Board {board_id} non trouv√©"
            }
        
        board_data = result["data"]["boards"][0]
        columns = board_data["columns"]
        
        # Chercher une colonne pour l'URL du repository
        repository_column = None
        for column in columns:
            title_lower = column["title"].lower()
            column_id_lower = column["id"].lower()
            
            # Rechercher par titre ou ID
            if any(keyword in title_lower for keyword in ["repository url", "repo url", "github url", "repository", "repo"]):
                if column["type"] in ["text", "link"]:
                    repository_column = column
                    logger.info(f"‚úÖ Colonne trouv√©e: '{column['title']}' (ID: {column['id']}, Type: {column['type']})")
                    break
            elif any(keyword in column_id_lower for keyword in ["repository_url", "repo_url", "github_url"]):
                repository_column = column
                logger.info(f"‚úÖ Colonne trouv√©e par ID: '{column['title']}' (ID: {column['id']}, Type: {column['type']})")
                break
        
        if repository_column:
            return {
                "success": True,
                "exists": True,
                "column_id": repository_column["id"],
                "column_title": repository_column["title"],
                "column_type": repository_column["type"]
            }
        else:
            # Liste toutes les colonnes pour aider l'utilisateur
            logger.warning("‚ö†Ô∏è Colonne 'Repository URL' non trouv√©e")
            logger.info("üìã Colonnes disponibles:")
            for col in columns:
                logger.info(f"  ‚Ä¢ {col['title']} (ID: {col['id']}, Type: {col['type']})")
            
            return {
                "success": True,
                "exists": False,
                "message": "Colonne 'Repository URL' non trouv√©e",
                "available_columns": columns
            }
    
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la v√©rification: {e}", exc_info=True)
        return {
            "success": False,
            "error": str(e)
        }


async def create_repository_url_column(board_id: str) -> dict:
    """
    Cr√©e une colonne 'Repository URL' sur le board Monday.com.
    
    Note: La cr√©ation de colonnes via l'API Monday.com n√©cessite des permissions
    sp√©ciales et n'est pas toujours disponible. Cette fonction tente de cr√©er
    la colonne mais peut √©chouer selon les permissions du token.
    
    Args:
        board_id: ID du board Monday.com
        
    Returns:
        Dictionnaire avec le r√©sultat de la cr√©ation
    """
    monday_tool = MondayTool()
    
    # Mutation pour cr√©er une colonne
    # Note: Cette mutation peut n√©cessiter des permissions administrateur
    mutation = """
    mutation CreateColumn($boardId: ID!, $title: String!, $columnType: ColumnType!) {
        create_column(
            board_id: $boardId,
            title: $title,
            column_type: $columnType
        ) {
            id
            title
            type
        }
    }
    """
    
    variables = {
        "boardId": board_id,
        "title": "Repository URL",
        "columnType": "text"
    }
    
    try:
        result = await monday_tool._make_request(mutation, variables)
        
        if result.get("success") and result.get("data", {}).get("create_column"):
            column_data = result["data"]["create_column"]
            logger.info(f"‚úÖ Colonne cr√©√©e: {column_data['title']} (ID: {column_data['id']})")
            return {
                "success": True,
                "created": True,
                "column_id": column_data["id"],
                "column_title": column_data["title"]
            }
        else:
            error_msg = result.get("error", "Erreur inconnue lors de la cr√©ation")
            logger.error(f"‚ùå √âchec cr√©ation colonne: {error_msg}")
            return {
                "success": False,
                "created": False,
                "error": error_msg
            }
    
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la cr√©ation: {e}", exc_info=True)
        return {
            "success": False,
            "created": False,
            "error": str(e)
        }


async def update_env_with_column_id(column_id: str, env_file_path: str = ".env"):
    """
    Met √† jour le fichier .env avec l'ID de la colonne Repository URL.
    
    Args:
        column_id: ID de la colonne Repository URL
        env_file_path: Chemin vers le fichier .env
    """
    try:
        if not os.path.exists(env_file_path):
            logger.error(f"‚ùå Fichier {env_file_path} introuvable")
            return False
        
        # Lire le fichier .env
        with open(env_file_path, 'r', encoding='utf-8') as f:
            lines = f.readlines()
        
        # Chercher et mettre √† jour la ligne MONDAY_REPOSITORY_URL_COLUMN_ID
        updated = False
        for i, line in enumerate(lines):
            if line.startswith("MONDAY_REPOSITORY_URL_COLUMN_ID="):
                lines[i] = f"MONDAY_REPOSITORY_URL_COLUMN_ID={column_id}\n"
                updated = True
                break
        
        # Si la ligne n'existe pas, l'ajouter
        if not updated:
            lines.append(f"\n# Monday.com Repository URL Column\n")
            lines.append(f"MONDAY_REPOSITORY_URL_COLUMN_ID={column_id}\n")
        
        # √âcrire le fichier .env mis √† jour
        with open(env_file_path, 'w', encoding='utf-8') as f:
            f.writelines(lines)
        
        logger.info(f"‚úÖ Fichier .env mis √† jour avec MONDAY_REPOSITORY_URL_COLUMN_ID={column_id}")
        return True
    
    except Exception as e:
        logger.error(f"‚ùå Erreur mise √† jour .env: {e}")
        return False


async def main():
    """Fonction principale."""
    logger.info("üöÄ V√©rification de la colonne 'Repository URL' dans Monday.com...")
    
    try:
        settings = get_settings()
        board_id = settings.monday_board_id
        
        if not board_id or board_id == "your_monday_board_id_here":
            logger.error("‚ùå MONDAY_BOARD_ID non configur√© dans .env")
            return False
        
        # V√©rifier si la colonne existe
        logger.info(f"üìã V√©rification du board: {board_id}")
        result = await check_repository_url_column(board_id)
        
        if not result["success"]:
            logger.error(f"‚ùå Erreur: {result['error']}")
            return False
        
        if result["exists"]:
            logger.info(f"‚úÖ La colonne 'Repository URL' existe d√©j√†!")
            logger.info(f"   Titre: {result['column_title']}")
            logger.info(f"   ID: {result['column_id']}")
            logger.info(f"   Type: {result['column_type']}")
            
            # Mettre √† jour le .env
            await update_env_with_column_id(result['column_id'])
            return True
        else:
            logger.warning("‚ö†Ô∏è La colonne 'Repository URL' n'existe pas")
            logger.info("üí° Vous devez cr√©er manuellement une colonne de type 'Texte' ou 'Lien'")
            logger.info("   nomm√©e 'Repository URL' dans votre board Monday.com")
            logger.info("")
            logger.info("üîß √âtapes pour cr√©er la colonne:")
            logger.info("   1. Ouvrez votre board Monday.com")
            logger.info("   2. Cliquez sur le bouton '+' pour ajouter une colonne")
            logger.info("   3. S√©lectionnez le type 'Texte' ou 'Lien'")
            logger.info("   4. Nommez la colonne 'Repository URL'")
            logger.info("   5. Relancez ce script pour configurer automatiquement l'ID")
            logger.info("")
            
            # Tentative de cr√©ation automatique (peut √©chouer selon les permissions)
            logger.info("üîÑ Tentative de cr√©ation automatique...")
            create_result = await create_repository_url_column(board_id)
            
            if create_result.get("created"):
                logger.info("üéâ Colonne cr√©√©e automatiquement avec succ√®s!")
                await update_env_with_column_id(create_result['column_id'])
                return True
            else:
                logger.warning("‚ö†Ô∏è Cr√©ation automatique impossible (permissions insuffisantes)")
                logger.info("   Veuillez cr√©er la colonne manuellement comme indiqu√© ci-dessus")
                return False
    
    except Exception as e:
        logger.error(f"‚ùå Erreur: {e}", exc_info=True)
        return False


if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)

