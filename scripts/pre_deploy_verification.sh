#!/bin/bash
# ===============================================
# Script de v√©rification pr√©-d√©ploiement pg_partman
# ===============================================
# Description: V√©rifie que tous les fichiers et configurations sont en place
# Usage: ./scripts/pre_deploy_verification.sh
# ===============================================

set -e

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Compteurs
CHECKS_PASSED=0
CHECKS_FAILED=0
TOTAL_CHECKS=0

# Fonction pour afficher le r√©sultat
check_result() {
    local description=$1
    local result=$2
    
    TOTAL_CHECKS=$((TOTAL_CHECKS + 1))
    
    if [ $result -eq 0 ]; then
        echo -e "${GREEN}‚úÖ${NC} $description"
        CHECKS_PASSED=$((CHECKS_PASSED + 1))
    else
        echo -e "${RED}‚ùå${NC} $description"
        CHECKS_FAILED=$((CHECKS_FAILED + 1))
    fi
}

echo -e "${BLUE}=========================================="
echo "üîç V√âRIFICATION PR√â-D√âPLOIEMENT PG_PARTMAN"
echo -e "==========================================${NC}\n"

# ===============================================
# 1. V√âRIFICATION DES FICHIERS DOCKER
# ===============================================
echo -e "${YELLOW}üìÅ 1. V√©rification des fichiers Docker${NC}"

# Dockerfile
if [ -f "docker/postgres/Dockerfile" ]; then
    check_result "docker/postgres/Dockerfile existe" 0
    
    # V√©rifier le contenu du Dockerfile
    if grep -q "pg_partman" "docker/postgres/Dockerfile"; then
        check_result "Dockerfile contient pg_partman" 0
    else
        check_result "Dockerfile contient pg_partman" 1
    fi
    
    if grep -q "dcron" "docker/postgres/Dockerfile"; then
        check_result "Dockerfile contient dcron" 0
    else
        check_result "Dockerfile contient dcron" 1
    fi
else
    check_result "docker/postgres/Dockerfile existe" 1
fi

# Scripts d'initialisation
if [ -f "docker/postgres/init-scripts/01-enable-pg-partman.sql" ]; then
    check_result "01-enable-pg-partman.sql existe" 0
else
    check_result "01-enable-pg-partman.sql existe" 1
fi

if [ -f "docker/postgres/init-scripts/02-configure-webhook-events-partman.sql" ]; then
    check_result "02-configure-webhook-events-partman.sql existe" 0
else
    check_result "02-configure-webhook-events-partman.sql existe" 1
fi

# Scripts de maintenance
if [ -f "docker/postgres/maintenance-partman.sh" ]; then
    check_result "maintenance-partman.sh existe" 0
    
    # V√©rifier qu'il est ex√©cutable (il le sera dans le container)
    if head -1 "docker/postgres/maintenance-partman.sh" | grep -q "#!/bin/bash"; then
        check_result "maintenance-partman.sh a un shebang" 0
    else
        check_result "maintenance-partman.sh a un shebang" 1
    fi
else
    check_result "maintenance-partman.sh existe" 1
fi

if [ -f "docker/postgres/cron-partman-maintenance" ]; then
    check_result "cron-partman-maintenance existe" 0
else
    check_result "cron-partman-maintenance existe" 1
fi

echo ""

# ===============================================
# 2. V√âRIFICATION DES SCRIPTS DE MIGRATION
# ===============================================
echo -e "${YELLOW}üìÑ 2. V√©rification des scripts de migration${NC}"

if [ -f "scripts/migrate_to_pg_partman.sql" ]; then
    check_result "migrate_to_pg_partman.sql existe" 0
    
    # V√©rifier le contenu
    if grep -q "partman.create_parent" "scripts/migrate_to_pg_partman.sql"; then
        check_result "Script contient partman.create_parent" 0
    else
        check_result "Script contient partman.create_parent" 1
    fi
else
    check_result "migrate_to_pg_partman.sql existe" 1
fi

echo ""

# ===============================================
# 3. V√âRIFICATION DU DOCKER-COMPOSE
# ===============================================
echo -e "${YELLOW}üê≥ 3. V√©rification du docker-compose.yml${NC}"

if [ -f "docker-compose.rabbitmq.yml" ]; then
    check_result "docker-compose.rabbitmq.yml existe" 0
    
    # V√©rifier la section build
    if grep -q "context: ./docker/postgres" "docker-compose.rabbitmq.yml"; then
        check_result "docker-compose contient build postgres" 0
    else
        check_result "docker-compose contient build postgres" 1
    fi
    
    # V√©rifier les volumes
    if grep -q "01-enable-pg-partman.sql" "docker-compose.rabbitmq.yml"; then
        check_result "docker-compose monte 01-enable-pg-partman.sql" 0
    else
        check_result "docker-compose monte 01-enable-pg-partman.sql" 1
    fi
    
    if grep -q "02-configure-webhook-events-partman.sql" "docker-compose.rabbitmq.yml"; then
        check_result "docker-compose monte 02-configure-webhook-events-partman.sql" 0
    else
        check_result "docker-compose monte 02-configure-webhook-events-partman.sql" 1
    fi
else
    check_result "docker-compose.rabbitmq.yml existe" 1
fi

echo ""

# ===============================================
# 4. V√âRIFICATION DU SCH√âMA INITIAL
# ===============================================
echo -e "${YELLOW}üóÑÔ∏è  4. V√©rification du sch√©ma initial${NC}"

if [ -f "config/init-db.sql" ]; then
    check_result "config/init-db.sql existe" 0
    
    # V√©rifier que c'est un fichier SQL (pas un dossier)
    if [ -f "config/init-db.sql" ] && [ ! -d "config/init-db.sql" ]; then
        check_result "config/init-db.sql est un fichier (pas un dossier)" 0
    else
        check_result "config/init-db.sql est un fichier (pas un dossier)" 1
    fi
    
    # V√©rifier qu'il contient la table webhook_events
    if grep -q "CREATE TABLE webhook_events" "config/init-db.sql"; then
        check_result "init-db.sql contient webhook_events" 0
    else
        check_result "init-db.sql contient webhook_events" 1
    fi
else
    check_result "config/init-db.sql existe" 1
fi

echo ""

# ===============================================
# 5. V√âRIFICATION DE LA DOCUMENTATION
# ===============================================
echo -e "${YELLOW}üìö 5. V√©rification de la documentation${NC}"

if [ -f "docs/PG_PARTMAN_IMPLEMENTATION.md" ]; then
    check_result "PG_PARTMAN_IMPLEMENTATION.md existe" 0
else
    check_result "PG_PARTMAN_IMPLEMENTATION.md existe" 1
fi

if [ -f "docs/VERIFICATION_PG_PARTMAN.md" ]; then
    check_result "VERIFICATION_PG_PARTMAN.md existe" 0
else
    check_result "VERIFICATION_PG_PARTMAN.md existe" 1
fi

if [ -f "QUICK_START_PG_PARTMAN.md" ]; then
    check_result "QUICK_START_PG_PARTMAN.md existe" 0
else
    check_result "QUICK_START_PG_PARTMAN.md existe" 1
fi

if [ -f "IMPLEMENTATION_PG_PARTMAN_RESUME.md" ]; then
    check_result "IMPLEMENTATION_PG_PARTMAN_RESUME.md existe" 0
else
    check_result "IMPLEMENTATION_PG_PARTMAN_RESUME.md existe" 1
fi

echo ""

# ===============================================
# 6. TEST DE BUILD DOCKER (optionnel)
# ===============================================
echo -e "${YELLOW}üî® 6. Test de build Docker (optionnel)${NC}"

read -p "Voulez-vous tester le build Docker maintenant ? (y/N) " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo -e "${BLUE}Construction de l'image PostgreSQL...${NC}"
    if docker-compose -f docker-compose.rabbitmq.yml build postgres > /tmp/pg_partman_build.log 2>&1; then
        check_result "Build Docker r√©ussi" 0
        echo -e "${GREEN}   üìã Logs: /tmp/pg_partman_build.log${NC}"
    else
        check_result "Build Docker r√©ussi" 1
        echo -e "${RED}   ‚ùå Erreur de build. Voir: /tmp/pg_partman_build.log${NC}"
        echo -e "${YELLOW}   Derni√®res lignes du log:${NC}"
        tail -20 /tmp/pg_partman_build.log
    fi
else
    echo -e "${YELLOW}‚è≠Ô∏è  Build Docker ignor√©${NC}"
fi

echo ""

# ===============================================
# 7. R√âSUM√â
# ===============================================
echo -e "${BLUE}=========================================="
echo "üìä R√âSUM√â DE LA V√âRIFICATION"
echo -e "==========================================${NC}"
echo -e "Total de v√©rifications: ${TOTAL_CHECKS}"
echo -e "${GREEN}‚úÖ R√©ussies: ${CHECKS_PASSED}${NC}"
echo -e "${RED}‚ùå √âchou√©es: ${CHECKS_FAILED}${NC}"
echo ""

if [ $CHECKS_FAILED -eq 0 ]; then
    echo -e "${GREEN}=========================================="
    echo "üéâ TOUTES LES V√âRIFICATIONS SONT PASS√âES !"
    echo -e "==========================================${NC}"
    echo ""
    echo -e "${GREEN}‚úÖ Le projet est pr√™t pour le d√©ploiement${NC}"
    echo ""
    echo -e "${BLUE}Prochaines √©tapes:${NC}"
    echo "1. Sauvegarder la base de donn√©es actuelle (si migration)"
    echo "2. Suivre le guide: QUICK_START_PG_PARTMAN.md"
    echo "3. D√©ployer avec: docker-compose -f docker-compose.rabbitmq.yml up -d"
    echo ""
    exit 0
else
    echo -e "${RED}=========================================="
    echo "‚ö†Ô∏è  DES V√âRIFICATIONS ONT √âCHOU√â"
    echo -e "==========================================${NC}"
    echo ""
    echo -e "${RED}‚ùå Le projet n'est PAS pr√™t pour le d√©ploiement${NC}"
    echo ""
    echo -e "${YELLOW}Actions recommand√©es:${NC}"
    echo "1. Corriger les erreurs ci-dessus"
    echo "2. Relancer ce script de v√©rification"
    echo "3. Consulter IMPLEMENTATION_PG_PARTMAN_RESUME.md"
    echo ""
    exit 1
fi

