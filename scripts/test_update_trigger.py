#!/usr/bin/env python3
"""
Script pour tester la logique de mise √† jour des colonnes Monday.com.
D√©tecte les incoh√©rences dans la configuration et le code.
"""

import sys
import json
import asyncio
from pathlib import Path

# Ajouter le r√©pertoire parent au path
sys.path.insert(0, str(Path(__file__).parent.parent))

from config.settings import get_settings


class UpdateTriggerTester:
    """Testeur de la logique de mise √† jour."""
    
    def __init__(self):
        self.settings = get_settings()
        self.issues = []
        self.warnings = []
        self.successes = []
        
    def test_column_configuration(self):
        """Teste la configuration des colonnes."""
        print("\n" + "="*60)
        print("1Ô∏è‚É£  TEST DE LA CONFIGURATION DES COLONNES")
        print("="*60)
        
        print(f"\nüìã Configuration actuelle:")
        print(f"   Board ID: {self.settings.monday_board_id}")
        print(f"   Status Column: {self.settings.monday_status_column_id}")
        print(f"   Repository URL Column: {self.settings.monday_repository_url_column_id}")
        
        # V√©rifier Repository URL Column
        if not self.settings.monday_repository_url_column_id:
            self.issues.append("‚ùå MONDAY_REPOSITORY_URL_COLUMN_ID non configur√© dans .env")
            print("\n‚ùå Repository URL Column ID non configur√©!")
            return False
        else:
            print(f"\n‚úÖ Repository URL Column ID: {self.settings.monday_repository_url_column_id}")
            self.successes.append("Configuration Repository URL pr√©sente")
        
        return True
    
    def test_column_detection_logic(self):
        """Teste la logique de d√©tection des colonnes link."""
        print("\n" + "="*60)
        print("2Ô∏è‚É£  TEST DE LA D√âTECTION DES COLONNES LINK")
        print("="*60)
        
        column_id = self.settings.monday_repository_url_column_id
        
        # Reproduire la logique de monday_tool.py ligne 841-847
        column_id_lower = column_id.lower()
        is_link_column = (
            column_id.startswith("link_") or
            "url" in column_id_lower or
            "lien" in column_id_lower or
            (column_id_lower == "lien_pr") or
            (column_id_lower == "link")  # ‚ö†Ô∏è AJOUT: Cas o√π column_id est exactement "link"
        )
        
        print(f"\nüîç Test de d√©tection pour column_id = '{column_id}':")
        print(f"   ‚Ä¢ Commence par 'link_': {column_id.startswith('link_')}")
        print(f"   ‚Ä¢ Contient 'url': {'url' in column_id_lower}")
        print(f"   ‚Ä¢ Contient 'lien': {'lien' in column_id_lower}")
        print(f"   ‚Ä¢ √âgal √† 'lien_pr': {column_id_lower == 'lien_pr'}")
        print(f"   ‚Ä¢ √âgal √† 'link': {column_id_lower == 'link'}")
        print(f"\n   R√©sultat: is_link_column = {is_link_column}")
        
        if is_link_column:
            print("\n‚úÖ La colonne sera correctement d√©tect√©e comme type 'link'")
            self.successes.append("D√©tection de colonne link fonctionnelle")
        else:
            print("\n‚ùå La colonne ne sera PAS d√©tect√©e comme type 'link'")
            self.issues.append(f"Colonne '{column_id}' non d√©tect√©e comme link dans la logique actuelle")
            
        return is_link_column
    
    def test_value_formatting(self):
        """Teste le formatage des valeurs pour Monday.com."""
        print("\n" + "="*60)
        print("3Ô∏è‚É£  TEST DU FORMATAGE DES VALEURS")
        print("="*60)
        
        test_url = "https://github.com/user/repo/pull/123"
        
        print(f"\nüìù URL de test: {test_url}")
        
        # Simuler le formatage de monday_tool.py
        import re
        pr_number_match = re.search(r'/pull/(\d+)', test_url)
        pr_text = f"PR #{pr_number_match.group(1)}" if pr_number_match else "Pull Request"
        
        formatted_value = {
            "url": test_url,
            "text": pr_text
        }
        
        json_value = json.dumps(formatted_value)
        
        print(f"\n‚úÖ Formatage dict:")
        print(f"   {formatted_value}")
        print(f"\n‚úÖ Formatage JSON (envoy√© √† Monday.com):")
        print(f"   {json_value}")
        
        # V√©rifier que c'est un JSON valide
        try:
            parsed = json.loads(json_value)
            if "url" in parsed and "text" in parsed:
                print(f"\n‚úÖ Format JSON valide et conforme")
                self.successes.append("Formatage des valeurs correct")
                return True
            else:
                print(f"\n‚ùå Format JSON invalide - cl√©s manquantes")
                self.issues.append("Format JSON ne contient pas 'url' et 'text'")
                return False
        except json.JSONDecodeError as e:
            print(f"\n‚ùå JSON invalide: {e}")
            self.issues.append(f"JSON invalide: {e}")
            return False
    
    def check_hardcoded_columns(self):
        """V√©rifie les colonnes cod√©es en dur dans le code."""
        print("\n" + "="*60)
        print("4Ô∏è‚É£  V√âRIFICATION DES COLONNES COD√âES EN DUR")
        print("="*60)
        
        # Lire le fichier update_node.py
        update_node_path = Path(__file__).parent.parent / "nodes" / "update_node.py"
        
        try:
            with open(update_node_path, 'r') as f:
                content = f.read()
            
            # Chercher les colonnes cod√©es en dur
            import re
            hardcoded_patterns = [
                (r'column_id\s*=\s*["\']lien_pr["\']', "lien_pr"),
                (r'column_id\s*=\s*["\']link_[a-z0-9_]+["\']', "link_*"),
                (r'column_id\s*=\s*["\']status["\']', "status (attention si ID a chang√©)"),
            ]
            
            found_issues = []
            for pattern, description in hardcoded_patterns:
                matches = re.finditer(pattern, content, re.IGNORECASE)
                for match in matches:
                    line_num = content[:match.start()].count('\n') + 1
                    found_issues.append((line_num, description, match.group(0)))
            
            if found_issues:
                print(f"\n‚ö†Ô∏è  {len(found_issues)} colonne(s) cod√©e(s) en dur trouv√©e(s):\n")
                for line_num, desc, code in found_issues:
                    print(f"   Ligne {line_num}: {desc}")
                    print(f"      Code: {code}")
                    self.warnings.append(f"Ligne {line_num}: colonne '{desc}' cod√©e en dur")
                
                print(f"\nüí° Recommandation: Utiliser settings.monday_repository_url_column_id")
                return False
            else:
                print(f"\n‚úÖ Aucune colonne cod√©e en dur trouv√©e")
                self.successes.append("Pas de colonnes en dur")
                return True
                
        except Exception as e:
            print(f"\n‚ùå Erreur lecture update_node.py: {e}")
            self.issues.append(f"Impossible de v√©rifier les colonnes en dur: {e}")
            return False
    
    def test_column_id_edge_cases(self):
        """Teste les cas limites du column_id."""
        print("\n" + "="*60)
        print("5Ô∏è‚É£  TEST DES CAS LIMITES")
        print("="*60)
        
        test_cases = [
            ("link", "Colonne nomm√©e simplement 'link'"),
            ("link_mkwg662v", "Ancien format avec pr√©fixe"),
            ("repository_url", "Nom descriptif"),
            ("url", "Nom court"),
            ("lien_pr", "Nom fran√ßais"),
        ]
        
        print(f"\nüß™ Tests de d√©tection pour diff√©rents noms:\n")
        
        all_pass = True
        for col_id, description in test_cases:
            col_id_lower = col_id.lower()
            is_detected = (
                col_id.startswith("link_") or
                "url" in col_id_lower or
                "lien" in col_id_lower or
                col_id_lower == "lien_pr" or
                col_id_lower == "link"
            )
            
            status = "‚úÖ" if is_detected else "‚ùå"
            print(f"   {status} '{col_id}': {description} - {'D√©tect√©' if is_detected else 'NON d√©tect√©'}")
            
            if not is_detected:
                all_pass = False
        
        if all_pass:
            print(f"\n‚úÖ Tous les cas limites sont g√©r√©s")
            self.successes.append("Tous les cas limites g√©r√©s")
        else:
            print(f"\n‚ö†Ô∏è  Certains cas ne sont pas d√©tect√©s")
            self.warnings.append("Certains noms de colonnes ne seraient pas d√©tect√©s")
        
        return all_pass
    
    def generate_fix_recommendations(self):
        """G√©n√®re les recommandations de correction."""
        print("\n" + "="*60)
        print("üìù RECOMMANDATIONS DE CORRECTION")
        print("="*60)
        
        if self.issues or self.warnings:
            print("\nüîß Corrections n√©cessaires:\n")
            
            # Correction 1: Am√©liorer la d√©tection de colonne link
            if any("non d√©tect√©e" in issue for issue in self.issues):
                print("1. Am√©liorer la d√©tection de colonne link dans monday_tool.py")
                print("   Ligne ~843: Ajouter le cas (column_id_lower == 'link')")
                print()
            
            # Correction 2: Remplacer les colonnes en dur
            if self.warnings:
                print("2. Remplacer les colonnes cod√©es en dur")
                print("   Utiliser: settings.monday_repository_url_column_id")
                print("   Au lieu de: column_id='lien_pr'")
                print()
            
            # Correction 3: Configuration .env
            if any("non configur√©" in issue for issue in self.issues):
                print("3. Configurer MONDAY_REPOSITORY_URL_COLUMN_ID dans .env")
                print(f"   MONDAY_REPOSITORY_URL_COLUMN_ID=link")
                print()
        else:
            print("\n‚úÖ Aucune correction n√©cessaire!")
    
    def print_summary(self):
        """Affiche le r√©sum√© des tests."""
        print("\n" + "="*60)
        print("üìä R√âSUM√â DES TESTS")
        print("="*60)
        
        if self.successes:
            print(f"\n‚úÖ SUCC√àS ({len(self.successes)}):")
            for success in self.successes:
                print(f"   ‚Ä¢ {success}")
        
        if self.warnings:
            print(f"\n‚ö†Ô∏è  AVERTISSEMENTS ({len(self.warnings)}):")
            for warning in self.warnings:
                print(f"   ‚Ä¢ {warning}")
        
        if self.issues:
            print(f"\n‚ùå ERREURS ({len(self.issues)}):")
            for issue in self.issues:
                print(f"   ‚Ä¢ {issue}")
        
        print("\n" + "="*60)
        
        if not self.issues and not self.warnings:
            print("‚úÖ TOUS LES TESTS R√âUSSIS!")
        elif not self.issues:
            print("‚ö†Ô∏è  Tests pass√©s avec des avertissements")
        else:
            print("‚ùå Tests √©chou√©s - corrections n√©cessaires")
        
        print("="*60)
    
    def run_all_tests(self):
        """Lance tous les tests."""
        print("\n" + "="*60)
        print("üß™ TEST COMPLET DE LA LOGIQUE DE MISE √Ä JOUR")
        print("="*60)
        
        # Test 1
        test1 = self.test_column_configuration()
        
        # Test 2
        test2 = self.test_column_detection_logic()
        
        # Test 3
        test3 = self.test_value_formatting()
        
        # Test 4
        test4 = self.check_hardcoded_columns()
        
        # Test 5
        test5 = self.test_column_id_edge_cases()
        
        # Recommandations
        self.generate_fix_recommendations()
        
        # R√©sum√©
        self.print_summary()
        
        return all([test1, test2, test3, test4, test5])


def main():
    """Point d'entr√©e principal."""
    tester = UpdateTriggerTester()
    success = tester.run_all_tests()
    
    sys.exit(0 if success and not tester.issues else 1)


if __name__ == "__main__":
    main()

