#!/usr/bin/env python3
"""
Script pour v√©rifier que les corrections de boucle infinie fonctionnent.
"""

from datetime import datetime
from graph.workflow_graph import _should_debug
from config.workflow_limits import WorkflowLimits
from utils.logger import get_logger

logger = get_logger(__name__)


def test_should_debug_logic():
    """Teste la logique de _should_debug avec diff√©rents sc√©narios."""
    
    print("\n" + "="*60)
    print("üß™ TEST DE LA LOGIQUE _should_debug")
    print("="*60)
    
    # Test 1: Aucun test trouv√© (0/0)
    print("\nüìã Test 1: Aucun test trouv√© (0/0)")
    state1 = {
        "results": {
            "test_results": {
                "success": True,
                "total_tests": 0,
                "passed_tests": 0,
                "failed_tests": 0,
                "no_tests_found": True
            }
        }
    }
    result1 = _should_debug(state1)
    print(f"   R√©sultat: {result1} (attendu: 'continue')")
    assert result1 == "continue", f"√âchec Test 1: {result1} != 'continue'"
    
    # Test 2: Tests qui passent
    print("\n‚úÖ Test 2: Tests qui passent")
    state2 = {
        "results": {
            "test_results": {
                "success": True,
                "total_tests": 5,
                "passed_tests": 5,
                "failed_tests": 0
            }
        }
    }
    result2 = _should_debug(state2)
    print(f"   R√©sultat: {result2} (attendu: 'continue')")
    assert result2 == "continue", f"√âchec Test 2: {result2} != 'continue'"
    
    # Test 3: Premier √©chec de test
    print("\n‚ùå Test 3: Premier √©chec de test")
    state3 = {
        "results": {
            "test_results": {
                "success": False,
                "total_tests": 5,
                "passed_tests": 3,
                "failed_tests": 2
            }
        }
    }
    result3 = _should_debug(state3)
    print(f"   R√©sultat: {result3} (attendu: 'debug')")
    print(f"   Compteur debug: {state3['results'].get('debug_attempts', 0)}")
    assert result3 == "debug", f"√âchec Test 3: {result3} != 'debug'"
    assert state3['results']['debug_attempts'] == 1, f"Compteur incorrect: {state3['results']['debug_attempts']}"
    
    # Test 4: Deuxi√®me tentative de debug
    print("\nüîß Test 4: Deuxi√®me tentative de debug")
    state4 = {
        "results": {
            "test_results": {
                "success": False,
                "total_tests": 5,
                "passed_tests": 3,
                "failed_tests": 2
            },
            "debug_attempts": 1  # D√©j√† une tentative
        }
    }
    result4 = _should_debug(state4)
    print(f"   R√©sultat: {result4} (attendu: 'debug')")
    print(f"   Compteur debug: {state4['results']['debug_attempts']}")
    assert result4 == "debug", f"√âchec Test 4: {result4} != 'debug'"
    assert state4['results']['debug_attempts'] == 2, f"Compteur incorrect: {state4['results']['debug_attempts']}"
    
    # Test 5: Limite atteinte apr√®s 2 tentatives - passage forc√© √† QA
    print("\n‚ö†Ô∏è Test 5: Limite atteinte apr√®s 2 tentatives - passage forc√© √† QA")
    state5 = {
        "results": {
            "test_results": {
                "success": False,
                "total_tests": 5,
                "passed_tests": 3,
                "failed_tests": 2
            },
            "debug_attempts": 2  # D√©j√† deux tentatives
        }
    }
    result5 = _should_debug(state5)
    print(f"   R√©sultat: {result5} (attendu: 'continue')")
    print(f"   Compteur debug: {state5['results']['debug_attempts']}")
    assert result5 == "continue", f"√âchec Test 5: {result5} != 'continue'"
    # Avec MAX_DEBUG_ATTEMPTS = 2, apr√®s 2 tentatives on passe √† QA
    
    # Test 5 couvre maintenant la limite atteinte avec MAX_DEBUG_ATTEMPTS = 2
    
    print("\n‚úÖ Tous les tests _should_debug passent !")


def test_workflow_limits():
    """Teste les limites de workflow configur√©es."""
    
    print("\n" + "="*60)
    print("‚öôÔ∏è TEST DES LIMITES DE WORKFLOW")
    print("="*60)
    
    print("üìä Limites actuelles:")
    print(f"   MAX_DEBUG_ATTEMPTS: {WorkflowLimits.MAX_DEBUG_ATTEMPTS}")
    print(f"   MAX_NODES_SAFETY_LIMIT: {WorkflowLimits.MAX_NODES_SAFETY_LIMIT}")
    print(f"   WORKFLOW_TIMEOUT: {WorkflowLimits.WORKFLOW_TIMEOUT}")
    print(f"   MAX_RETRY_ATTEMPTS: {WorkflowLimits.MAX_RETRY_ATTEMPTS}")
    
    # V√©rifier les valeurs r√©duites pour √©viter les boucles infinies
    assert WorkflowLimits.MAX_DEBUG_ATTEMPTS == 2, f"MAX_DEBUG_ATTEMPTS incorrect: {WorkflowLimits.MAX_DEBUG_ATTEMPTS}"
    assert WorkflowLimits.MAX_NODES_SAFETY_LIMIT == 15, f"MAX_NODES_SAFETY_LIMIT incorrect: {WorkflowLimits.MAX_NODES_SAFETY_LIMIT}"
    
    print("‚úÖ Toutes les limites sont correctement configur√©es !")


def simulate_debug_loop():
    """Simule une boucle de debug pour v√©rifier qu'elle s'arr√™te."""
    
    print("\n" + "="*60)
    print("üîÑ SIMULATION D'UNE BOUCLE DE DEBUG")
    print("="*60)
    
    # √âtat initial avec tests qui √©chouent
    state = {
        "results": {
            "test_results": {
                "success": False,
                "total_tests": 5,
                "passed_tests": 3,
                "failed_tests": 2
            }
        }
    }
    
    decisions = []
    max_iterations = 10  # Garde-fou pour le test
    
    for i in range(max_iterations):
        decision = _should_debug(state)
        decisions.append(decision)
        
        print(f"   It√©ration {i+1}: {decision} (debug_attempts: {state['results'].get('debug_attempts', 0)})")
        
        if decision == "continue":
            print(f"‚úÖ Boucle stopp√©e apr√®s {i+1} it√©rations")
            break
        elif decision == "debug":
            # Simuler que le debug n'a pas r√©solu le probl√®me
            # (les test_results restent en √©chec)
            continue
        else:
            print(f"‚ùå D√©cision inattendue: {decision}")
            break
    else:
        print(f"‚ùå La boucle n's'est pas arr√™t√©e apr√®s {max_iterations} it√©rations !")
        return False
    
    # V√©rifier que la boucle s'est bien arr√™t√©e
    assert decisions[-1] == "continue", f"Derni√®re d√©cision doit √™tre 'continue': {decisions[-1]}"
    assert len(decisions) <= WorkflowLimits.MAX_DEBUG_ATTEMPTS + 1, f"Trop d'it√©rations: {len(decisions)}"
    
    print(f"üìä S√©quence des d√©cisions: {' ‚Üí '.join(decisions)}")
    print("‚úÖ Simulation r√©ussie - la boucle s'arr√™te correctement !")
    
    return True


def main():
    """Fonction principale des tests."""
    
    print("üß™ V√âRIFICATION DES CORRECTIONS DE BOUCLE INFINIE")
    print(f"‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    try:
        # Test 1: Logique de base
        test_should_debug_logic()
        
        # Test 2: Configuration des limites
        test_workflow_limits()
        
        # Test 3: Simulation de boucle
        simulate_debug_loop()
        
        print("\n" + "="*60)
        print("üéâ TOUS LES TESTS PASSENT !")
        print("‚úÖ Les corrections de boucle infinie fonctionnent correctement")
        print("‚úÖ Le workflow respectera maintenant les limites configur√©es")
        print("="*60)
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå ERREUR LORS DES TESTS: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    success = main()
    exit(0 if success else 1) 