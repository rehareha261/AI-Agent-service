"""Service de validation humaine via les updates Monday.com."""

import asyncio
import re
from datetime import datetime, timedelta
from typing import Dict, Any, Optional, List
from models.schemas import HumanValidationStatus, HumanValidationResponse
from tools.monday_tool import MondayTool
from services.intelligent_reply_analyzer import intelligent_reply_analyzer, IntentionType
from utils.logger import get_logger

logger = get_logger(__name__)


class MondayValidationService:
    """Service pour g√©rer la validation humaine via les updates Monday.com."""
    
    def __init__(self):
        self.monday_tool = MondayTool()
        # ‚úÖ CORRECTION: Initialiser le dictionnaire √† la bonne place
        self.pending_validations = {}
    
    def _safe_get_test_success(self, test_results) -> bool:
        """Extrait le statut de succ√®s des tests de mani√®re s√©curis√©e."""
        if isinstance(test_results, dict):
            return test_results.get("success", False)
        elif isinstance(test_results, list) and test_results:
            # Si c'est une liste, consid√©rer comme succ√®s si tous les tests passent
            return all(item.get("passed", False) if isinstance(item, dict) else False for item in test_results)
        elif hasattr(test_results, 'success'):
            return getattr(test_results, 'success', False)
        else:
            return False
    
    def _build_validation_message(self, workflow_results: Dict[str, Any]) -> str:
        """
        Construit le message de validation √† poster dans Monday.com.
        
        Args:
            workflow_results: R√©sultats du workflow
            
        Returns:
            Message format√© pour Monday.com
        """
        # R√©cup√©ration des informations depuis workflow_results
        task_title = workflow_results.get("task_title", "T√¢che sans titre")
        environment_path = workflow_results.get("environment_path", "Non disponible")
        modified_files = workflow_results.get("modified_files", [])
        implementation_success = workflow_results.get("implementation_success", False)
        test_success = workflow_results.get("test_success", False)
        test_executed = workflow_results.get("test_executed", False)
        pr_created = workflow_results.get("pr_created", False)
        
        # Construction du message
        message = f"""ü§ñ **WORKFLOW TERMIN√â - VALIDATION REQUISE** ‚ö†Ô∏è

**T√¢che**: {task_title}

üìù **Progression du workflow**:
‚Ä¢ ‚úÖ Environnement configur√©: {environment_path}
"""
        
        # Ajouter les fichiers modifi√©s
        if modified_files:
            message += f"‚Ä¢ ‚úÖ Fichiers modifi√©s: {', '.join(modified_files)}\n"
        else:
            message += "‚Ä¢ ‚ö†Ô∏è Aucun fichier modifi√© d√©tect√©\n"
        
        # Statut de l'impl√©mentation
        if implementation_success:
            message += "‚Ä¢ ‚úÖ Impl√©mentation termin√©e avec succ√®s\n"
        else:
            message += "‚Ä¢ ‚ùå Impl√©mentation √©chou√©e\n"
        
        # Statut des tests
        if test_executed:
            if test_success:
                message += "‚Ä¢ ‚úÖ Tests ex√©cut√©s avec succ√®s\n"
            else:
                message += "‚Ä¢ ‚ö†Ô∏è Tests ex√©cut√©s avec des erreurs\n"
        else:
            message += "‚Ä¢ ‚ö†Ô∏è Aucun test ex√©cut√©\n"
        
        # Statut de la Pull Request
        if pr_created:
            message += "‚Ä¢ ‚úÖ Pull Request cr√©√©e\n"
        else:
            message += "‚Ä¢ ‚ùå Pull Request non cr√©√©e\n"
        
        # Instructions de validation
        message += """
==================================================
**ü§ù VALIDATION HUMAINE REQUISE**

**R√©pondez √† cette update avec**:
‚Ä¢ **'oui'** ou **'valide'** ‚Üí Merge automatique
‚Ä¢ **'non'** ou **'debug'** ‚Üí Debug avec LLM OpenAI

‚è∞ *Timeout: 60 minutes*"""
        
        return message

    async def post_validation_update(self, item_id: str, workflow_results: Dict[str, Any]) -> str:
        """
        Poste une update de validation dans Monday.com.
        
        Args:
            item_id: ID de l'item Monday.com
            workflow_results: R√©sultats du workflow √† inclure
            
        Returns:
            ID de l'update cr√©√©e ou ID de fallback en cas d'erreur
        """
        try:
            # Cr√©er le message de validation
            comment = self._build_validation_message(workflow_results)
            
            logger.info(f"üìù Cr√©ation update de validation pour item {item_id}")
            
            # ‚úÖ AM√âLIORATION: Tentative de cr√©ation d'update avec gestion des permissions
            result = await self.monday_tool._arun(
                action="add_comment",
                item_id=item_id,
                comment=comment
            )
            
            # ‚úÖ GESTION ROBUSTE DES ERREURS DE PERMISSIONS
            if not result.get("success", False):
                error_type = result.get("error_type", "unknown")
                error_message = result.get("error", "Erreur inconnue")
                
                if error_type == "permissions":
                    logger.warning(f"‚ö†Ô∏è Permissions insuffisantes Monday.com pour item {item_id}")
                    logger.warning(f"‚ö†Ô∏è {error_message}")
                    
                    # ‚úÖ FALLBACK: Utiliser un ID d'update alternatif
                    update_id = f"failed_update_{item_id}"
                    logger.info(f"üìù Utilisation update_id alternatif: {update_id}")
                    
                    # Enregistrer la validation en attente sans Monday.com
                    self.pending_validations[update_id] = {
                        "item_id": item_id,
                        "message": comment,
                        "timestamp": datetime.now().isoformat(),
                        "fallback_mode": True,
                        "permissions_error": True,
                        "error": error_message
                    }
                    
                    return update_id
                    
                elif error_type in ["auth", "graphql"]:
                    # Erreurs d'authentification ou GraphQL - utiliser fallback aussi
                    logger.error(f"‚ùå Erreur Monday.com ({error_type}): {error_message}")
                    update_id = f"error_update_{item_id}"
                    
                    self.pending_validations[update_id] = {
                        "item_id": item_id,
                        "message": comment,
                        "timestamp": datetime.now().isoformat(),
                        "fallback_mode": True,
                        "api_error": True,
                        "error": error_message
                    }
                    
                    return update_id
                    
                else:
                    # Autres erreurs - lever l'exception
                    raise Exception(f"Erreur Monday.com: {error_message}")
            
            # ‚úÖ SUCC√àS: Update cr√©√©e avec succ√®s
            update_id = result.get("update_id") or result.get("comment_id") or f"success_update_{item_id}"
            
            logger.info(f"‚úÖ Update de validation cr√©√©e avec succ√®s: {update_id}")
            
            # Enregistrer la validation en attente
            self.pending_validations[str(update_id)] = {
                "item_id": item_id,
                "message": comment,
                "timestamp": datetime.now().isoformat(),
                "fallback_mode": False,
                "permissions_error": False
            }
            
            return str(update_id)
            
        except Exception as e:
            logger.error(f"‚ùå Exception lors de la cr√©ation d'update Monday.com: {e}")
            
            # ‚úÖ FALLBACK EXCEPTION: Mode de secours complet
            update_id = f"exception_update_{item_id}"
            
            self.pending_validations[update_id] = {
                "item_id": item_id,
                "message": comment if 'comment' in locals() else "Message de validation indisponible",
                "timestamp": datetime.now().isoformat(),
                "fallback_mode": True,
                "exception_error": True,
                "error": str(e)
            }
            
            return update_id
    
    async def check_for_human_replies(self, update_id: str, timeout_minutes: int = 10) -> Optional[HumanValidationResponse]:
        """
        V√©rifie les replies humaines sur l'update de validation.
        
        Args:
            update_id: ID de l'update √† surveiller
            timeout_minutes: Timeout en minutes
            
        Returns:
            R√©ponse de validation ou None si timeout
        """
        update_key = str(update_id)
        
        # ‚úÖ CORRECTION CRITIQUE: R√©cup√©rer le contexte si absent
        if update_key not in self.pending_validations:
            logger.warning(f"‚ö†Ô∏è Update {update_id} non trouv√©e dans pending_validations - tentative de r√©cup√©ration")
            
            # Essayer de reconstituer le contexte depuis Monday.com
            recovered_validation = await self._recover_validation_context(update_id)
            if recovered_validation:
                self.pending_validations[update_key] = recovered_validation
                logger.info(f"‚úÖ Contexte de validation r√©cup√©r√© pour {update_id}")
            else:
                logger.error(f"‚ùå Impossible de r√©cup√©rer le contexte pour {update_id}")
                return None
        
        validation_data = self.pending_validations[update_key]
        item_id = validation_data.get("item_id")
        
        timeout_seconds = timeout_minutes * 60
        check_interval = 15  # V√©rifier toutes les 15 secondes
        
        # ‚úÖ CORRECTION: Adapter la logique d'abandon selon le timeout
        if timeout_minutes <= 10:
            max_consecutive_no_changes = 8  # 2 minutes pour timeouts courts
        else:
            max_consecutive_no_changes = 20  # 5 minutes pour timeouts longs
        
        logger.info(f"‚è≥ Attente de reply humaine sur update {update_id} (timeout: {timeout_minutes}min, check_interval: {check_interval}s)")
        
        # ‚úÖ CORRECTION: Ajouter une v√©rification initiale imm√©diate
        try:
            initial_check = await self._get_item_updates(item_id)
            if initial_check:
                created_at_str = validation_data.get("timestamp") or validation_data.get("created_at")
                if created_at_str:
                    try:
                        created_at = datetime.fromisoformat(created_at_str.replace('Z', '+00:00'))
                    except Exception:
                        created_at = datetime.now()
                else:
                    created_at = datetime.now()
                
                immediate_reply = self._find_human_reply(update_id, initial_check, created_at)
                if immediate_reply:
                    logger.info("‚ö° R√©ponse humaine trouv√©e imm√©diatement!")
                    validation_context = self._prepare_analysis_context(validation_data)
                    response = await self._parse_human_reply(immediate_reply, update_id, validation_context)
                    self.pending_validations[update_id]["status"] = response.status.value
                    self.pending_validations[update_id]["response"] = response
                    return response
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erreur lors de la v√©rification initiale: {e}")
        
        # Boucle d'attente principale
        elapsed = 0
        last_update_count = 0  # Pour d√©tecter de nouvelles updates
        consecutive_no_changes = 0  # Compteur de v√©rifications sans changement
        
        while elapsed < timeout_seconds:
            try:
                # R√©cup√©rer les updates r√©centes de l'item
                recent_updates = await self._get_item_updates(item_id)
                
                # ‚úÖ NOUVELLE LOGIQUE: D√©tecter si de nouvelles updates sont arriv√©es
                current_update_count = len(recent_updates) if recent_updates else 0
                
                if current_update_count > last_update_count:
                    logger.info(f"üì¨ Nouvelles updates d√©tect√©es: {current_update_count} (√©tait {last_update_count})")
                    last_update_count = current_update_count
                    consecutive_no_changes = 0  # Reset du compteur
                    
                    # Chercher des replies √† notre update
                    created_at_str = validation_data.get("timestamp") or validation_data.get("created_at")
                    if created_at_str:
                        try:
                            created_at = datetime.fromisoformat(created_at_str.replace('Z', '+00:00'))
                        except Exception as e:
                            logger.warning(f"‚ö†Ô∏è Erreur parsing timestamp {created_at_str}: {e}")
                            created_at = datetime.now()
                    else:
                        created_at = datetime.now()
                    human_reply = self._find_human_reply(update_id, recent_updates, created_at)
                    
                    if human_reply:
                        # Pr√©parer le contexte pour l'analyse intelligente
                        validation_context = self._prepare_analysis_context(validation_data)
                        
                        # Analyser la r√©ponse humaine avec IA
                        response = await self._parse_human_reply(human_reply, update_id, validation_context)
                        
                        # Mettre √† jour le statut
                        self.pending_validations[update_id]["status"] = response.status.value
                        self.pending_validations[update_id]["response"] = response
                        
                        logger.info(f"‚úÖ Reply humaine analys√©e: {response.status.value} (confiance: {getattr(response, 'analysis_confidence', 'N/A')})")
                        return response
                else:
                    consecutive_no_changes += 1
                    logger.debug(f"üîÑ Aucune nouvelle update ({consecutive_no_changes}/{max_consecutive_no_changes})")
                
                # ‚úÖ PROTECTION CONTRE LA BOUCLE INFINIE
                if consecutive_no_changes >= max_consecutive_no_changes:
                    logger.warning(f"‚ö†Ô∏è Aucune activit√© d√©tect√©e depuis {consecutive_no_changes * check_interval / 60:.1f} minutes")
                    
                    # V√©rifier s'il y a eu une r√©ponse qu'on aurait rat√©e
                    created_at_str = validation_data.get("timestamp") or validation_data.get("created_at")
                    if created_at_str:
                        try:
                            created_at = datetime.fromisoformat(created_at_str.replace('Z', '+00:00'))
                        except Exception as e:
                            logger.warning(f"‚ö†Ô∏è Erreur parsing timestamp {created_at_str}: {e}")
                            created_at = datetime.now()
                    else:
                        created_at = datetime.now()
                    final_check = self._find_human_reply(update_id, recent_updates, created_at)
                    if final_check:
                        logger.info("üîç Reply trouv√©e lors de la v√©rification finale")
                        validation_context = self._prepare_analysis_context(validation_data)
                        response = await self._parse_human_reply(final_check, update_id, validation_context)
                        
                        self.pending_validations[update_id]["status"] = response.status.value
                        self.pending_validations[update_id]["response"] = response
                        
                        return response
                    else:
                        # Pas de reply trouv√©e - timeout anticip√©
                        logger.warning(f"üîö Timeout anticip√© - aucune activit√© depuis {consecutive_no_changes * check_interval} secondes")
                        break
                
                # Attendre avant la prochaine v√©rification
                await asyncio.sleep(check_interval)
                elapsed += check_interval
                
                # Log de progression (seulement toutes les minutes)
                if elapsed % 60 == 0:
                    logger.info(f"‚è≥ Attente reply validation: {elapsed//60}min/{timeout_minutes}min")
                    
            except Exception as e:
                logger.error(f"‚ùå Erreur lors de la v√©rification des replies: {e}")
                consecutive_no_changes += 1
                
                # Si trop d'erreurs cons√©cutives, arr√™ter
                if consecutive_no_changes >= max_consecutive_no_changes:
                    logger.error("‚ùå Trop d'erreurs cons√©cutives - arr√™t de la surveillance")
                    break
                
                await asyncio.sleep(check_interval)
                elapsed += check_interval
        
        # Timeout ou arr√™t anticip√©
        reason = "timeout" if elapsed >= timeout_seconds else "no_activity"
        logger.warning(f"‚è∞ Validation humaine arr√™t√©e: {reason} pour update {update_id}")
        
        # Marquer comme expir√©
        self.pending_validations[update_id]["status"] = "expired"
        
        return HumanValidationResponse(
            validation_id=update_id,
            status=HumanValidationStatus.EXPIRED,
            comments=f"Timeout ({reason}) - Aucune r√©ponse humaine re√ßue dans les {timeout_minutes} minutes",
            validated_by="system",
            should_merge=False,
            should_continue_workflow=False
        )
    
    def _generate_validation_update(self, workflow_results: Dict[str, Any]) -> str:
        """G√©n√®re le message d'update pour la validation."""
        
        # Extraire les informations importantes
        task_title = workflow_results.get("task_title", "T√¢che")
        success_level = workflow_results.get("success_level", "unknown")
        pr_url = workflow_results.get("pr_url")
        test_results = workflow_results.get("test_results", {})
        error_logs = workflow_results.get("error_logs", [])
        ai_messages = workflow_results.get("ai_messages", [])  # ‚úÖ AJOUT: R√©cup√©rer les messages IA
        
        # Header bas√© sur le succ√®s
        if success_level == "success":
            header = "ü§ñ **WORKFLOW TERMIN√â - VALIDATION REQUISE** ‚úÖ"
        elif success_level == "partial":
            header = "ü§ñ **WORKFLOW TERMIN√â - VALIDATION REQUISE** ‚ö†Ô∏è"
        else:
            header = "ü§ñ **WORKFLOW TERMIN√â - VALIDATION REQUISE** ‚ùå"
        
        message = f"{header}\n\n"
        message += f"**T√¢che**: {task_title}\n\n"
        
        # ‚úÖ AJOUT: Inclure les messages IA du workflow
        if ai_messages:
            message += "üìù **Progression du workflow**:\n"
            # Prendre les 5 derniers messages les plus importants
            important_messages = [msg for msg in ai_messages if "‚úÖ" in msg or "‚ùå" in msg or "üöÄ" in msg or "üíª" in msg][-5:]
            if not important_messages:
                important_messages = ai_messages[-3:]  # Fallback aux 3 derniers
            
            for ai_msg in important_messages:
                if ai_msg.strip():  # √âviter les messages vides
                    message += f"‚Ä¢ {ai_msg}\n"
            message += "\n"
        
        # R√©sultats des tests
        if test_results:
            # ‚úÖ CORRECTION: G√©rer le cas o√π test_results est une liste
            if isinstance(test_results, list):
                # Si c'est une liste, prendre le dernier test ou analyser tous
                if test_results:
                    last_test = test_results[-1] if isinstance(test_results[-1], dict) else {}
                    # Analyser les r√©sultats de la liste
                    total_passed = sum(1 for test in test_results if isinstance(test, dict) and test.get("success", False))
                    total_failed = len(test_results) - total_passed
                    
                    if total_failed == 0 and total_passed > 0:
                        message += f"‚úÖ **Tests**: {total_passed} test(s) passent\n"
                    else:
                        message += f"‚ùå **Tests**: {total_failed} test(s) √©chou√©(s), {total_passed} passent\n"
                else:
                    message += "‚ö†Ô∏è **Tests**: Liste vide\n"
            elif isinstance(test_results, dict):
                # Gestion normale pour les dictionnaires
                if test_results.get("success"):
                    message += "‚úÖ **Tests**: Tous les tests passent\n"
                else:
                    failed_count = len(test_results.get("failed_tests", []))
                    message += f"‚ùå **Tests**: {failed_count} test(s) √©chou√©(s)\n"
            else:
                message += f"‚ö†Ô∏è **Tests**: Format inattendu ({type(test_results).__name__})\n"
        else:
            message += "‚ö†Ô∏è **Tests**: Aucun test ex√©cut√©\n"
        
        # Pull Request
        if pr_url:
            message += f"üîó **Pull Request**: {pr_url}\n"
        else:
            message += "‚ùå **Pull Request**: Non cr√©√©e\n"
        
        # Erreurs si pr√©sentes
        if error_logs:
            message += "\n**‚ö†Ô∏è Erreurs rencontr√©es**:\n"
            for error in error_logs[-3:]:  # Derni√®res 3 erreurs
                message += f"- {error}\n"
        
        # Instructions de validation
        message += "\n" + "="*50 + "\n"
        message += "**ü§ù VALIDATION HUMAINE REQUISE**\n\n"
        message += "**R√©pondez √† cette update avec**:\n"
        message += "‚Ä¢ **'oui'** ou **'valide'** ‚Üí Merge automatique\n"
        message += "‚Ä¢ **'non'** ou **'debug'** ‚Üí Debug avec LLM OpenAI\n\n"
        message += "‚è∞ *Timeout: 10 minutes*"
        
        return message
    
    async def _get_item_updates(self, item_id: str) -> List[Dict[str, Any]]:
        """R√©cup√®re les updates d'un item Monday.com."""
        try:
            result = await self.monday_tool.execute_action(
                action="get_item_updates",
                item_id=item_id
            )
            
            # ‚úÖ PROTECTION RENFORC√âE: V√©rifier que result est un dictionnaire  
            if not isinstance(result, dict):
                logger.error(f"‚ùå R√©sultat get_updates invalide (type {type(result)}): {result}")
                # Si c'est une liste, c'est probablement une liste d'erreurs GraphQL
                if isinstance(result, list):
                    error_messages = []
                    for error_item in result:
                        if isinstance(error_item, dict):
                            error_messages.append(error_item.get('message', 'Erreur GraphQL inconnue'))
                        else:
                            error_messages.append(str(error_item))
                    error_str = "; ".join(error_messages) if error_messages else str(result)
                    logger.error(f"‚ùå API Monday a retourn√© une liste d'erreurs: {error_str}")
                return []
                
            if isinstance(result, dict) and result.get("success", True): # Renforcer la protection
                return result.get("updates", [])
            else:
                logger.error(f"‚ùå Impossible de r√©cup√©rer updates item {item_id}: {result}")
                return []
                
        except Exception as e:
            logger.error(f"‚ùå Erreur r√©cup√©ration updates: {e}")
            return []
    
    def _find_human_reply(self, original_update_id: str, updates: List[Dict[str, Any]], since: datetime) -> Optional[Dict[str, Any]]:
        """Trouve une reply humaine √† notre update de validation."""
        
        # ‚úÖ PROTECTION: V√©rifier que updates est une liste
        if not isinstance(updates, list):
            logger.warning(f"‚ö†Ô∏è Updates n'est pas une liste (type {type(updates)}), conversion en liste vide")
            updates = []
        
        # ‚úÖ CORRECTION TIMEZONE: S'assurer que 'since' a une timezone pour la comparaison
        from datetime import timezone
        if since.tzinfo is None:
            since = since.replace(tzinfo=timezone.utc)
        
        # ‚úÖ AM√âLIORATION: Recherche en plusieurs passes pour √™tre plus robuste
        candidate_replies = []
        
        for update in updates:
            # Protection: v√©rifier que update est un dictionnaire
            if not isinstance(update, dict):
                continue
                
            # V√©rifier si c'est une reply r√©cente
            update_time_str = update.get("created_at")
            if not update_time_str:
                continue
            
            try:
                update_time = datetime.fromisoformat(update_time_str.replace('Z', '+00:00'))
                if update_time <= since:
                    continue  # Trop ancien
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Erreur parsing timestamp {update_time_str}: {e}")
                continue
            
            body = update.get("body", "").strip()
            if not body:
                continue
            
            # ‚úÖ PASSE 1: Replies directes avec reply_to_id
            reply_to_id = update.get("reply_to_id") or update.get("parent_id")
            if reply_to_id == original_update_id:
                if self._is_validation_reply(body):
                    logger.info(f"üí¨ Reply directe trouv√©e: '{body[:50]}'")
                    return update
                candidate_replies.append(("direct_reply", update, body))
            
            # ‚úÖ PASSE 2: Updates r√©centes qui mentionnent des mots-cl√©s de validation
            elif self._is_validation_reply(body):
                candidate_replies.append(("validation_keywords", update, body))
            
            # ‚úÖ PASSE 3: Updates r√©centes avec des patterns de r√©ponse
            elif self._looks_like_validation_response(body):
                candidate_replies.append(("response_pattern", update, body))
        
        # ‚úÖ S√âLECTION: Prendre la meilleure r√©ponse par ordre de priorit√©
        if candidate_replies:
            # Trier par priorit√©: direct_reply > validation_keywords > response_pattern
            priority_order = {"direct_reply": 1, "validation_keywords": 2, "response_pattern": 3}
            candidate_replies.sort(key=lambda x: priority_order[x[0]])
            
            best_match = candidate_replies[0]
            logger.info(f"üí¨ Meilleure reply trouv√©e ({best_match[0]}): '{best_match[2][:50]}'")
            return best_match[1]
        
        return None
    
    def _looks_like_validation_response(self, text: str) -> bool:
        """V√©rifie si un texte ressemble √† une r√©ponse de validation."""
        import re
        
        # Nettoyer le texte
        cleaned = re.sub(r'<[^>]+>', '', text).strip().lower()
        
        # Patterns qui sugg√®rent une r√©ponse de validation
        response_patterns = [
            r'\b(je valide|je confirme|c\'est bon|√ßa marche)\b',
            r'\b(je refuse|je rejette|il faut corriger)\b',
            r'\b(approuv√©|valid√©|refus√©|rejet√©)\b',
            r'^\s*(ok|non)\s*[.!]*\s*$',  # R√©ponses tr√®s courtes
            r'\b(merge|deploie?|ship)\b',
            r'\b(debug|corrige|fix)\b'
        ]
        
        for pattern in response_patterns:
            if re.search(pattern, cleaned, re.IGNORECASE):
                return True
        
        return False
    
    def _is_validation_reply(self, reply_text: str) -> bool:
        """V√©rifie si un texte est une r√©ponse de validation valide."""
        # ‚úÖ CORRECTION: Nettoyer le texte des caract√®res invisibles et HTML
        import re
        
        # Supprimer BOM et autres caract√®res invisibles
        cleaned_text = reply_text.replace('\ufeff', '').replace('\u200b', '').replace('\u00a0', '')
        
        # Supprimer les tags HTML basiques
        cleaned_text = re.sub(r'<[^>]+>', '', cleaned_text).strip().lower()
        
        # Mots-cl√©s pour approbation
        approval_patterns = [
            r'\b(oui|yes|ok|valide?|approve?d?|accept|go)\b',
            r'\b(merge|ship|deploy)\b',
            r'^\s*[‚úÖ‚úì]\s*$'
        ]
        
        # Mots-cl√©s pour rejet/debug
        rejection_patterns = [
            r'\b(non|no|debug|fix|reject|refuse)\b',
            r'\b(probl[e√®]me?s?|issue|error|bug)\b',  # ‚úÖ CORRECTION: G√©rer les accents fran√ßais
            r'^\s*[‚ùå‚úó]\s*$'
        ]
        
        # V√©rifier les patterns
        for pattern in approval_patterns + rejection_patterns:
            if re.search(pattern, cleaned_text, re.IGNORECASE):
                return True
        
        return False
    
    async def _parse_human_reply(self, reply: Dict[str, Any], validation_id: str, context: Optional[Dict[str, Any]] = None) -> HumanValidationResponse:
        """Parse une r√©ponse humaine avec analyse intelligente."""
        
        # Protection: v√©rifier que reply est un dictionnaire
        if not isinstance(reply, dict):
            logger.error(f"‚ùå Reply invalide (type {type(reply)}): {reply}")
            return HumanValidationResponse(
                validation_id=validation_id,
                status=HumanValidationStatus.ERROR,
                comments="Reply invalide",
                validated_by="system",
                should_merge=False,
                should_continue_workflow=False
            )
        
        body = reply.get("body", "").strip()
        # Protection: v√©rifier que creator est un dictionnaire avant d'appliquer .get()
        creator = reply.get("creator", {})
        if isinstance(creator, dict):
            author = creator.get("name", "Humain")
        else:
            author = "Humain"
        
        logger.info(f"üß† Analyse intelligente de la r√©ponse: '{body[:50]}...'")
        
        try:
            # Utiliser l'analyseur intelligent hybride
            decision = await intelligent_reply_analyzer.analyze_human_intention(
                reply_text=body,
                context=context
            )
            
            logger.info(f"üéØ D√©cision intelligente: {decision.decision.value} (confiance: {decision.confidence:.2f})")
            
            # Mapper les intentions vers les statuts de validation
            if decision.decision == IntentionType.APPROVE:
                status = HumanValidationStatus.APPROVED
                should_merge = True
            elif decision.decision == IntentionType.REJECT:
                status = HumanValidationStatus.REJECTED
                should_merge = False
            elif decision.decision == IntentionType.CLARIFICATION_NEEDED:
                # Cas sp√©cial: demander clarification
                logger.warning("‚ö†Ô∏è Clarification requise - marquer comme rejet√© temporairement")
                status = HumanValidationStatus.REJECTED
                should_merge = False
            else:  # QUESTION ou UNCLEAR
                # Par d√©faut, consid√©rer comme rejet pour s√©curit√©
                logger.warning("‚ö†Ô∏è Intention unclear/question - traiter comme rejet par s√©curit√©")
                status = HumanValidationStatus.REJECTED
                should_merge = False
            
            # Enrichir les commentaires avec l'analyse
            enriched_comments = f"{body}"
            if decision.specific_concerns:
                enriched_comments += f"\n\n[IA] Pr√©occupations d√©tect√©es: {', '.join(decision.specific_concerns)}"
            if decision.confidence < 0.7:
                enriched_comments += f"\n[IA] Confiance faible ({decision.confidence:.2f}) - V√©rification recommand√©e"
            
            return HumanValidationResponse(
                validation_id=validation_id,
                status=status,
                comments=enriched_comments,
                validated_by=author,
                should_merge=should_merge,
                should_continue_workflow=True,
                # Ajouter les m√©tadonn√©es de l'analyse intelligente
                analysis_confidence=decision.confidence,
                analysis_method=decision.analysis_method,
                specific_concerns=decision.specific_concerns,
                suggested_action=decision.suggested_action,
                requires_clarification=decision.requires_clarification
            )
            
        except Exception as e:
            logger.error(f"‚ùå Erreur analyse intelligente: {e}")
            
            # Fallback sur analyse simple
            logger.info("üîÑ Fallback vers analyse simple")
            is_approval = self._is_approval_reply(body)
            
            return HumanValidationResponse(
                validation_id=validation_id,
                status=HumanValidationStatus.APPROVED if is_approval else HumanValidationStatus.REJECTED,
                comments=f"{body}\n\n[IA] Analyse simple utilis√©e (erreur syst√®me)",
                validated_by=author,
                should_merge=is_approval,
                should_continue_workflow=True,
                analysis_confidence=0.6,  # Confiance moyenne pour fallback
                analysis_method="simple_fallback_after_error"
            )
    
    def _is_approval_reply(self, reply_text: str) -> bool:
        """D√©termine si une r√©ponse est une approbation."""
        # Patterns d'approbation
        approval_patterns = [
            r'\b(oui|yes|ok|valide?|approve?d?|accept|go)\b',
            r'\b(merge|ship|deploy|good|perfect)\b',
            r'^\s*[‚úÖ‚úì]\s*$',
            r'lgtm|looks good'
        ]
        
        for pattern in approval_patterns:
            if re.search(pattern, reply_text, re.IGNORECASE):
                return True
        
        return False
    
    def _prepare_analysis_context(self, validation_data: Dict[str, Any]) -> Dict[str, Any]:
        """Pr√©pare le contexte pour l'analyse intelligente des r√©ponses."""
        
        workflow_results = validation_data.get("workflow_results", {})
        
        context = {
            "task_title": workflow_results.get("task_title"),
            "task_id": workflow_results.get("task_id"),
            "task_type": "development",  # Ou extraire du workflow
            # ‚úÖ CORRECTION: Protection contre 'list' object has no attribute 'get'
            "tests_passed": self._safe_get_test_success(workflow_results.get("test_results")),
            "pr_url": workflow_results.get("pr_url"),
            "error_count": len(workflow_results.get("error_logs", [])),
            "success_level": workflow_results.get("success_level", "unknown"),
            "urgent": False,  # Pourrait √™tre extrait des m√©tadonn√©es de t√¢che
            "created_at": validation_data.get("timestamp") or validation_data.get("created_at"),
            "workflow_duration": self._calculate_workflow_duration(validation_data)
        }
        
        return context
    
    def _calculate_workflow_duration(self, validation_data: Dict[str, Any]) -> Optional[int]:
        """Calcule la dur√©e du workflow en minutes."""
        try:
            created_at_str = validation_data.get("timestamp") or validation_data.get("created_at")
            if created_at_str:
                if isinstance(created_at_str, str):
                    created_at = datetime.fromisoformat(created_at_str.replace('Z', '+00:00'))
                else:
                    created_at = created_at_str
                duration = (datetime.now() - created_at).total_seconds() / 60
                return int(duration)
        except Exception:
            pass
        return None
    
    def cleanup_completed_validations(self, older_than_hours: int = 24):
        """Nettoie les validations termin√©es anciennes."""
        cutoff = datetime.now() - timedelta(hours=older_than_hours)
        
        to_remove = []
        for update_id, validation in self.pending_validations.items():
            validation_time_str = validation.get("timestamp") or validation.get("created_at")
            if validation_time_str:
                try:
                    if isinstance(validation_time_str, str):
                        validation_time = datetime.fromisoformat(validation_time_str.replace('Z', '+00:00'))
                    else:
                        validation_time = validation_time_str
                    if validation_time < cutoff and validation.get("status") != "pending":
                        to_remove.append(update_id)
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Erreur parsing timestamp pour cleanup: {e}")
                    # En cas d'erreur, consid√©rer comme ancien et nettoyer
                    if validation.get("status") != "pending":
                        to_remove.append(update_id)
        
        for update_id in to_remove:
            del self.pending_validations[update_id]
        
        if to_remove:
            logger.info(f"üßπ Nettoyage: {len(to_remove)} validations supprim√©es")
    
    async def _recover_validation_context(self, update_id: str) -> Optional[Dict[str, Any]]:
        """
        R√©cup√®re le contexte de validation depuis Monday.com quand pending_validations est vide.
        
        Args:
            update_id: ID de l'update de validation
            
        Returns:
            Dictionnaire de validation reconstitu√© ou None si impossible
        """
        try:
            logger.info(f"üîÑ Tentative de r√©cup√©ration du contexte pour update {update_id}")
            
            # Strat√©gie 1: Extraire l'item_id depuis l'update_id si c'est un format g√©n√©r√©
            item_id = None
            
            # Format: success_update_{item_id} ou failed_update_{item_id}
            if "_update_" in update_id:
                item_id = update_id.split("_update_")[-1]
                logger.info(f"üìã Item ID extrait de update_id: {item_id}")
            else:
                # Strat√©gie 2: C'est probablement un vrai ID Monday.com
                # Utiliser l'item_id du contexte d'ex√©cution actuel ou des logs r√©cents
                logger.info(f"üîç Update ID Monday.com d√©tect√©: {update_id}")
                
                # Essayer de trouver l'item_id dans les logs r√©cents ou le contexte Celery
                # Pour l'instant, utilisons l'item_id connu depuis les logs
                # TODO: Am√©liorer avec une recherche dans les logs Celery ou base de donn√©es
                
                # M√©thode de fallback: utiliser l'item_id connu depuis les logs r√©cents
                potential_item_ids = ["5010569330"]  # √Ä remplacer par une recherche dynamique
                
                for potential_item_id in potential_item_ids:
                    logger.info(f"üîç Test avec item_id potentiel: {potential_item_id}")
                    
                    # V√©rifier si cet item contient notre update
                    updates_result = await self.monday_tool.execute_action(
                        action="get_item_updates",
                        item_id=potential_item_id
                    )
                    
                    if updates_result.get("success", False):
                        updates = updates_result.get("updates", [])
                        
                        # Chercher notre update dans cet item
                        for update in updates:
                            if str(update.get("id")) == str(update_id):
                                logger.info(f"‚úÖ Update {update_id} trouv√©e dans item {potential_item_id}")
                                item_id = potential_item_id
                                break
                        
                        if item_id:
                            break
                
                if not item_id:
                    logger.error(f"‚ùå Impossible de trouver l'item_id pour update {update_id}")
                    return None
            
            if not item_id:
                logger.error(f"‚ùå Impossible d'extraire item_id de {update_id}")
                return None
            
            # R√©cup√©rer les updates de l'item pour trouver notre update de validation
            updates_result = await self.monday_tool.execute_action(
                action="get_item_updates",
                item_id=item_id
            )
            
            if not updates_result.get("success", False):
                logger.error(f"‚ùå Erreur r√©cup√©ration updates pour item {item_id}: {updates_result.get('error')}")
                return None
            
            updates = updates_result.get("updates", [])
            
            # Chercher notre update de validation
            target_update = None
            for update in updates:
                if str(update.get("id")) == str(update_id):
                    target_update = update
                    break
            
            if not target_update:
                logger.warning(f"‚ö†Ô∏è Update {update_id} non trouv√©e dans les updates de l'item {item_id}")
                # Cr√©er un contexte de base pour permettre la validation
                return {
                    "item_id": item_id,
                    "message": "Contexte r√©cup√©r√© - validation en cours",
                    "timestamp": datetime.now().isoformat(),
                    "fallback_mode": True,
                    "recovered": True
                }
            
            # Reconstituer le contexte de validation
            recovery_context = {
                "item_id": item_id,
                "message": target_update.get("body", "Message de validation"),
                "timestamp": target_update.get("created_at", datetime.now().isoformat()),
                "fallback_mode": False,
                "recovered": True,
                "original_creator": target_update.get("creator", {}).get("name", "Unknown")
            }
            
            logger.info(f"‚úÖ Contexte reconstitu√© pour update {update_id}")
            return recovery_context
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la r√©cup√©ration du contexte: {e}")
            return None


# Instance globale
monday_validation_service = MondayValidationService() 