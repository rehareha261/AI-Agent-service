"""
Service de gestion robuste des Pull Requests.

Ce service centralise toute la logique de cr√©ation, mise √† jour et merge des PR
avec gestion d'erreurs, retry, et persistence des √©tats.
"""

import asyncio
import os
import time
from datetime import datetime, timedelta
from typing import Dict, Any, Optional, List
from dataclasses import dataclass
from enum import Enum
import os

from models.schemas import PullRequestInfo, TaskRequest
from tools.github_tool import GitHubTool
from utils.logger import get_logger
from utils.helpers import get_working_directory

logger = get_logger(__name__)


class PRStatus(Enum):
    """√âtats possibles d'une Pull Request dans notre syst√®me."""
    PENDING_CREATION = "pending_creation"
    CREATING = "creating"
    CREATED = "created"
    PENDING_MERGE = "pending_merge"
    MERGING = "merging" 
    MERGED = "merged"
    FAILED = "failed"
    CANCELLED = "cancelled"


@dataclass
class PROperationResult:
    """R√©sultat d'une op√©ration sur une PR."""
    success: bool
    pr_info: Optional[PullRequestInfo] = None
    error: Optional[str] = None
    retry_after: Optional[int] = None
    should_retry: bool = False


class PullRequestService:
    """Service centralis√© pour la gestion des Pull Requests."""
    
    def __init__(self):
        self.github_tool = GitHubTool()
        self._pr_cache: Dict[str, Dict[str, Any]] = {}
        
    async def ensure_pull_request_created(
        self, 
        state: Dict[str, Any], 
        force_recreate: bool = False
    ) -> PROperationResult:
        """
        S'assure qu'une Pull Request existe pour la t√¢che donn√©e.
        
        Cette m√©thode est idempotente et peut √™tre appel√©e plusieurs fois.
        
        Args:
            state: √âtat du workflow
            force_recreate: Forcer la recr√©ation m√™me si une PR existe
            
        Returns:
            R√©sultat de l'op√©ration avec les informations de la PR
        """
        try:
            task = state.get("task")
            if not task:
                return PROperationResult(
                    success=False, 
                    error="Aucune t√¢che trouv√©e dans l'√©tat"
                )
            
            task_id = str(task.task_id) if hasattr(task, 'task_id') else str(task.get('task_id', 'unknown'))
            
            # V√©rifier si une PR existe d√©j√† (en cache ou dans l'√©tat)
            existing_pr = await self._get_existing_pr_info(state, task_id)
            if existing_pr and not force_recreate:
                logger.info(f"‚úÖ PR existante trouv√©e: #{existing_pr.number}")
                return PROperationResult(success=True, pr_info=existing_pr)
            
            # V√©rifier les pr√©requis
            prereq_check = await self._check_pr_prerequisites(state)
            if not prereq_check.success:
                return prereq_check
            
            # Cr√©er la PR
            logger.info(f"üìù Cr√©ation de la Pull Request pour t√¢che {task_id}...")
            return await self._create_pull_request_with_retry(state, task_id)
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la cr√©ation de PR: {e}")
            return PROperationResult(
                success=False,
                error=f"Exception: {str(e)}",
                should_retry=True,
                retry_after=30
            )
    
    async def merge_pull_request(
        self, 
        state: Dict[str, Any], 
        pr_info: PullRequestInfo,
        merge_strategy: str = "squash"
    ) -> PROperationResult:
        """
        Effectue le merge d'une Pull Request.
        
        Args:
            state: √âtat du workflow
            pr_info: Informations de la PR √† merger
            merge_strategy: Strat√©gie de merge ("merge", "squash", "rebase")
            
        Returns:
            R√©sultat de l'op√©ration de merge
        """
        try:
            task = state.get("task")
            repo_url = self._extract_repository_url(task, state)
            
            if not repo_url:
                return PROperationResult(
                    success=False,
                    error="URL du repository non trouv√©e pour le merge"
                )
            
            logger.info(f"üîÄ Merge de la PR #{pr_info.number} avec strat√©gie '{merge_strategy}'")
            
            # Effectuer le merge via GitHubTool
            merge_result = await self.github_tool._arun(
                action="merge_pull_request",
                repo_url=repo_url,
                pr_number=pr_info.number,
                merge_method=merge_strategy,
                commit_title=f"feat: {task.title}",
                commit_message=f"Merge PR #{pr_info.number}\n\n{task.description[:200]}..."
            )
            
            if merge_result.get("success"):
                # Mettre √† jour le statut de la PR
                pr_info.status = "merged"
                
                # Nettoyer le cache
                task_id = str(task.task_id) if hasattr(task, 'task_id') else 'unknown'
                self._clear_pr_cache(task_id)
                
                logger.info(f"‚úÖ PR #{pr_info.number} merg√©e avec succ√®s")
                return PROperationResult(success=True, pr_info=pr_info)
            else:
                error_msg = merge_result.get("error", "Erreur inconnue lors du merge")
                logger.error(f"‚ùå √âchec merge PR: {error_msg}")
                return PROperationResult(
                    success=False,
                    error=error_msg,
                    should_retry=True,
                    retry_after=60
                )
                
        except Exception as e:
            logger.error(f"‚ùå Exception lors du merge: {e}")
            return PROperationResult(
                success=False,
                error=f"Exception: {str(e)}",
                should_retry=True,
                retry_after=30
            )
    
    async def _get_existing_pr_info(
        self, 
        state: Dict[str, Any], 
        task_id: str
    ) -> Optional[PullRequestInfo]:
        """R√©cup√®re les informations d'une PR existante."""
        
        # V√©rifier dans l'√©tat du workflow
        pr_info = state.get("results", {}).get("pr_info")
        if pr_info and isinstance(pr_info, PullRequestInfo):
            return pr_info
        
        # V√©rifier dans le cache
        cached_pr = self._pr_cache.get(task_id, {}).get("pr_info")
        if cached_pr:
            return cached_pr
        
        return None
    
    async def _check_pr_prerequisites(self, state: Dict[str, Any]) -> PROperationResult:
        """V√©rifie que tous les pr√©requis pour cr√©er une PR sont pr√©sents."""
        
        task = state.get("task")
        if not task:
            return PROperationResult(success=False, error="T√¢che manquante")
        
        # V√©rifier l'URL du repository
        repo_url = self._extract_repository_url(task, state)
        if not repo_url:
            return PROperationResult(
                success=False, 
                error="URL du repository non trouv√©e"
            )
        
        # V√©rifier le r√©pertoire de travail
        working_directory = get_working_directory(state)
        if not working_directory or not os.path.exists(working_directory):
            return PROperationResult(
                success=False,
                error="R√©pertoire de travail non trouv√©"
            )
        
        # V√©rifier les informations de branche
        branch_name = self._extract_branch_name(state)
        if not branch_name:
            return PROperationResult(
                success=False,
                error="Nom de branche non trouv√©"
            )
        
        return PROperationResult(success=True)
    
    async def _create_pull_request_with_retry(
        self, 
        state: Dict[str, Any], 
        task_id: str,
        max_retries: int = 3
    ) -> PROperationResult:
        """Cr√©e une PR avec logique de retry."""
        
        for attempt in range(1, max_retries + 1):
            try:
                logger.info(f"üîÑ Tentative {attempt}/{max_retries} de cr√©ation PR")
                
                result = await self._create_pull_request_internal(state)
                
                if result.success:
                    # Mettre en cache
                    self._cache_pr_info(task_id, result.pr_info)
                    return result
                
                if not result.should_retry or attempt == max_retries:
                    return result
                
                # Attendre avant le retry
                wait_time = result.retry_after or (attempt * 10)
                logger.info(f"‚è≥ Attente {wait_time}s avant retry...")
                await asyncio.sleep(wait_time)
                
            except Exception as e:
                if attempt == max_retries:
                    return PROperationResult(
                        success=False,
                        error=f"√âchec apr√®s {max_retries} tentatives: {str(e)}"
                    )
                
                wait_time = attempt * 15
                logger.warning(f"‚ö†Ô∏è Tentative {attempt} √©chou√©e: {e}. Retry dans {wait_time}s")
                await asyncio.sleep(wait_time)
        
        return PROperationResult(
            success=False,
            error=f"√âchec apr√®s {max_retries} tentatives"
        )
    
    async def _create_pull_request_internal(self, state: Dict[str, Any]) -> PROperationResult:
        """Logique interne de cr√©ation de PR."""
        
        task = state.get("task")
        repo_url = self._extract_repository_url(task, state)
        working_directory = get_working_directory(state)
        branch_name = self._extract_branch_name(state)
        
        # G√©n√©rer le contenu de la PR
        pr_title, pr_body = self._generate_pr_content(task, state)
        
        # Cr√©er la PR via GitHubTool
        pr_result = await self.github_tool._arun(
            action="create_pull_request",
            repo_url=repo_url,
            branch_name=branch_name,
            base_branch="main",
            title=pr_title,
            body=pr_body,
            working_directory=working_directory
        )
        
        if pr_result.get("success"):
            pr_info = PullRequestInfo(
                number=pr_result.get("pr_number"),
                title=pr_title,
                url=pr_result.get("pr_url", ""),
                branch=branch_name,
                base_branch="main",
                status="open",
                created_at=datetime.now()
            )
            
            return PROperationResult(success=True, pr_info=pr_info)
        else:
            error_msg = pr_result.get("error", "Erreur inconnue")
            should_retry = "rate limit" in error_msg.lower() or "timeout" in error_msg.lower()
            
            return PROperationResult(
                success=False,
                error=error_msg,
                should_retry=should_retry,
                retry_after=60 if should_retry else None
            )
    
    def _extract_repository_url(self, task: Any, state: Dict[str, Any]) -> Optional[str]:
        """Extrait l'URL du repository depuis diff√©rentes sources."""
        
        # Source 1: Attribut direct de la t√¢che
        if task and hasattr(task, 'repository_url') and task.repository_url:
            return task.repository_url
        
        # Source 2: √âtat du workflow
        repo_url = state.get("results", {}).get("repository_url")
        if repo_url:
            return repo_url
        
        # Source 3: Description de la t√¢che
        if task and hasattr(task, 'description') and task.description:
            from utils.github_parser import extract_github_url_from_description
            extracted_url = extract_github_url_from_description(task.description)
            if extracted_url:
                return extracted_url
        
        return None
    
    def _extract_branch_name(self, state: Dict[str, Any]) -> Optional[str]:
        """Extrait le nom de branche depuis l'√©tat."""
        
        # Source 1: git_result
        git_result = state.get("results", {}).get("git_result")
        if git_result:
            if hasattr(git_result, 'branch_name'):
                return git_result.branch_name
            elif isinstance(git_result, dict):
                return git_result.get('branch_name')
        
        # Source 2: prepare_result
        prepare_result = state.get("results", {}).get("prepare_result", {})
        if isinstance(prepare_result, dict):
            return prepare_result.get("branch_name")
        
        return None
    
    def _generate_pr_content(self, task: Any, state: Dict[str, Any]) -> tuple[str, str]:
        """G√©n√®re le titre et le corps de la PR de mani√®re robuste."""
        
        # Titre s√©curis√©
        title = f"feat: {task.title}" if hasattr(task, 'title') else "feat: Automated implementation"
        
        # Corps avec toutes les informations disponibles
        body_parts = [
            "## ü§ñ Pull Request g√©n√©r√©e automatiquement",
            "",
            "### üìã T√¢che"
        ]
        
        if hasattr(task, 'task_id'):
            body_parts.append(f"**ID**: {task.task_id}")
        if hasattr(task, 'title'):
            body_parts.append(f"**Titre**: {task.title}")
        if hasattr(task, 'priority'):
            body_parts.append(f"**Priorit√©**: {task.priority}")
        
        body_parts.extend(["", "### üìù Description"])
        if hasattr(task, 'description') and task.description:
            body_parts.append(task.description)
        else:
            body_parts.append("Description non disponible")
        
        # Ajouter les changements
        self._add_changes_info(body_parts, state)
        
        # Ajouter les r√©sultats de tests et QA
        self._add_quality_info(body_parts, state)
        
        body_parts.extend([
            "",
            "### ‚úÖ Validation",
            "‚úÖ Code valid√© et approuv√© par l'√©quipe",
            "",
            "---",
            "*PR cr√©√©e automatiquement par AI-Agent*"
        ])
        
        return title, "\n".join(body_parts)
    
    def _add_changes_info(self, body_parts: List[str], state: Dict[str, Any]) -> None:
        """Ajoute les informations sur les changements √† la PR."""
        
        body_parts.extend(["", "### üîß Changements apport√©s"])
        
        # Fichiers modifi√©s
        modified_files = state.get("results", {}).get("modified_files", [])
        if modified_files:
            body_parts.append("\n#### Fichiers modifi√©s:")
            for file_path in modified_files[:10]:  # Limiter √† 10 fichiers
                body_parts.append(f"- `{file_path}`")
            if len(modified_files) > 10:
                body_parts.append(f"... et {len(modified_files) - 10} autres fichiers")
        else:
            body_parts.append("Fichiers modifi√©s: Informations non disponibles")
    
    def _add_quality_info(self, body_parts: List[str], state: Dict[str, Any]) -> None:
        """Ajoute les informations de qualit√© √† la PR."""
        
        results = state.get("results", {})
        
        # Tests
        test_results = results.get("test_results")
        if test_results:
            body_parts.extend(["", "### üß™ Tests", "‚úÖ Tests pass√©s avec succ√®s"])
        
        # QA
        qa_results = results.get("qa_results")
        if qa_results and isinstance(qa_results, dict):
            score = qa_results.get("overall_score")
            if score:
                body_parts.extend([
                    "",
                    "### üìä Qualit√© du code",
                    f"‚úÖ Score qualit√©: {score}/100"
                ])
    
    def _cache_pr_info(self, task_id: str, pr_info: PullRequestInfo) -> None:
        """Met en cache les informations de PR."""
        
        self._pr_cache[task_id] = {
            "pr_info": pr_info,
            "cached_at": time.time(),
            "expires_at": time.time() + 3600  # 1 heure
        }
    
    def _clear_pr_cache(self, task_id: str) -> None:
        """Nettoie le cache pour une t√¢che."""
        
        if task_id in self._pr_cache:
            del self._pr_cache[task_id]
    
    def cleanup_expired_cache(self) -> None:
        """Nettoie le cache expir√©."""
        
        now = time.time()
        expired_keys = [
            task_id for task_id, cached_data in self._pr_cache.items()
            if cached_data.get("expires_at", 0) < now
        ]
        
        for key in expired_keys:
            del self._pr_cache[key]


# Instance globale du service
pr_service = PullRequestService() 