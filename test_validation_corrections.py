#!/usr/bin/env python3
"""
Test rapide pour valider les corrections appliqu√©es.
"""

import sys
import os

def test_workflow_limits():
    """Test des limites de workflow r√©duites."""
    print("üß™ Test des limites de workflow...")
    
    try:
        from config.workflow_limits import WorkflowLimits
        
        # V√©rifier les nouvelles limites
        assert WorkflowLimits.MAX_NODES_SAFETY_LIMIT == 15, f"MAX_NODES_SAFETY_LIMIT devrait √™tre 15, trouv√©: {WorkflowLimits.MAX_NODES_SAFETY_LIMIT}"
        assert WorkflowLimits.MAX_DEBUG_ATTEMPTS == 2, f"MAX_DEBUG_ATTEMPTS devrait √™tre 2, trouv√©: {WorkflowLimits.MAX_DEBUG_ATTEMPTS}"
        assert WorkflowLimits.WORKFLOW_TIMEOUT == 1200, f"WORKFLOW_TIMEOUT devrait √™tre 1200, trouv√©: {WorkflowLimits.WORKFLOW_TIMEOUT}"
        
        print("  ‚úÖ Limites workflow correctement r√©duites")
        return True
    except Exception as e:
        print(f"  ‚ùå Erreur test limites: {e}")
        return False

def test_qa_improvements():
    """Test des am√©liorations QA."""
    print("üß™ Test des crit√®res QA assouplis...")
    
    try:
        # Import direct de la fonction
        sys.path.append('.')
        from nodes.qa_node import _analyze_qa_results
        
        # Test avec des r√©sultats probl√©matiques qui devraient maintenant passer
        qa_results = {
            "pylint": {"passed": False, "issues_count": 10, "critical_issues": 4},
            "flake8": {"passed": False, "issues_count": 15, "critical_issues": 3},
            "syntax": {"passed": True, "issues_count": 0, "critical_issues": 0}
        }
        
        summary = _analyze_qa_results(qa_results)
        
        # Avec 7 probl√®mes critiques total et les nouveaux crit√®res (max 8), √ßa devrait passer
        assert summary["quality_gate_passed"], f"Quality gate devrait passer avec {summary['critical_issues']} probl√®mes critiques"
        assert summary["overall_score"] >= 45, f"Score devrait √™tre >= 45, trouv√©: {summary['overall_score']}"
        
        print(f"  ‚úÖ QA assouplie: Score {summary['overall_score']}/100, {summary['critical_issues']} critiques, Gate: {'PASS√â' if summary['quality_gate_passed'] else '√âCHOU√â'}")
        return True
    except Exception as e:
        print(f"  ‚ùå Erreur test QA: {e}")
        return False

def test_monday_protection():
    """Test de la protection Monday.com."""
    print("üß™ Test de la protection Monday.com...")
    
    try:
        # V√©rifier que les protections sont pr√©sentes dans le code
        with open('tools/monday_tool.py', 'r') as f:
            content = f.read()
        
        # V√©rifier les protections cl√©s
        assert "isinstance(result, dict)" in content, "Protection isinstance(result, dict) manquante"
        assert "isinstance(result, list)" in content, "Protection isinstance(result, list) manquante"
        assert "API Monday.com a retourn√©" in content, "Message d'erreur protection manquant"
        
        # V√©rifier aussi les protections dans webhook_service
        with open('services/webhook_service.py', 'r') as f:
            webhook_content = f.read()
        
        assert "isinstance(column_values, list)" in webhook_content, "Protection column_values manquante"
        assert "column_values n'est pas une liste" in webhook_content, "Message protection column_values manquant"
        
        print("  ‚úÖ Protection Monday.com active contre les r√©ponses non-dict")
        return True
    except Exception as e:
        print(f"  ‚ùå Erreur test Monday: {e}")
        return False

def test_testing_improvements():
    """Test des am√©liorations de l'infrastructure de tests."""
    print("üß™ Test des am√©liorations de tests...")
    
    try:
        from tools.testing_engine import TestingEngine
        
        # Cr√©er un engine de test
        engine = TestingEngine()
        
        # V√©rifier que les patterns de fichiers exclus sont bien dans la fonction
        import inspect
        discover_source = inspect.getsource(engine._discover_tests)
        
        # V√©rifier que les exclusions sont pr√©sentes
        assert "fix_" in discover_source, "Exclusion des fichiers fix_ manquante"
        assert "simple_fix.py" in discover_source, "Exclusion de simple_fix.py manquante"
        
        print("  ‚úÖ Infrastructure de tests am√©lior√©e avec exclusions")
        return True
    except Exception as e:
        print(f"  ‚ùå Erreur test infrastructure: {e}")
        return False

def test_celery_retry_logic():
    """Test de la logique de retry Celery am√©lior√©e."""
    print("üß™ Test de la logique de retry Celery...")
    
    try:
        # V√©rifier que le code contient la nouvelle logique
        with open('services/celery_app.py', 'r') as f:
            content = f.read()
        
        # V√©rifier la pr√©sence des am√©liorations
        assert "should_retry" in content, "Logique should_retry manquante"
        assert "√©chec m√©tier" in content, "Distinction √©chec m√©tier manquante"
        assert "infrastructure" in content, "Distinction erreur infrastructure manquante"
        
        print("  ‚úÖ Logique de retry Celery am√©lior√©e")
        return True
    except Exception as e:
        print(f"  ‚ùå Erreur test Celery: {e}")
        return False

def main():
    """Lance tous les tests de validation."""
    print("üöÄ Validation des corrections appliqu√©es")
    print("=" * 50)
    
    tests = [
        test_workflow_limits,
        test_qa_improvements, 
        test_monday_protection,
        test_testing_improvements,
        test_celery_retry_logic
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        try:
            if test():
                passed += 1
        except Exception as e:
            print(f"  ‚ùå Exception dans {test.__name__}: {e}")
    
    print("\n" + "=" * 50)
    print(f"üìä R√©sultats: {passed}/{total} tests pass√©s")
    
    if passed == total:
        print("‚úÖ Toutes les corrections ont √©t√© valid√©es avec succ√®s !")
        print("\nüìã R√©sum√© des corrections appliqu√©es :")
        print("1. ‚úÖ Limites workflow r√©duites (15 n≈ìuds max, 20min timeout)")
        print("2. ‚úÖ Crit√®res QA assouplis (score min 45, 8 probl√®mes critiques max)")
        print("3. ‚úÖ Protection Monday.com contre les r√©ponses non-dict")
        print("4. ‚úÖ Infrastructure de tests avec exclusion des scripts de correction")
        print("5. ‚úÖ Logique Celery √©vitant les retries sur les √©checs m√©tier")
        return True
    else:
        print("‚ùå Certaines corrections n√©cessitent une v√©rification suppl√©mentaire")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 