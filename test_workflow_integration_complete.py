# -*- coding: utf-8 -*-
"""Test d'int√©gration complet du workflow avec le syst√®me de tests universel."""

import asyncio
import tempfile
import os
from pathlib import Path
from typing import Dict, Any

# Imports du syst√®me
from models.state import GraphState
from models.schemas import TaskRequest
from utils.intelligent_test_detector import IntelligentTestDetector
from services.test_generator import TestGeneratorService
from nodes.test_node import _run_framework_tests, _parse_framework_output


async def test_workflow_java_project():
    """Test complet du workflow sur un projet Java."""
    print("\n" + "="*70)
    print("üß™ TEST WORKFLOW: PROJET JAVA COMPLET")
    print("="*70)
    
    with tempfile.TemporaryDirectory() as tmpdir:
        print(f"üìÅ Projet temporaire: {tmpdir}")
        
        # 1. CR√âER UN PROJET JAVA R√âALISTE
        print("\n1Ô∏è‚É£  CR√âATION DU PROJET JAVA...")
        
        # Structure Maven
        pom_path = Path(tmpdir) / "pom.xml"
        pom_path.write_text("""<?xml version="1.0"?>
<project xmlns="http://maven.apache.org/POM/4.0.0">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.example</groupId>
    <artifactId>calculator-app</artifactId>
    <version>1.0.0</version>
    <properties>
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>
    </properties>
    <dependencies>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <version>5.9.0</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
</project>""")
        
        # Code source
        src_dir = Path(tmpdir) / "src" / "main" / "java" / "com" / "example"
        src_dir.mkdir(parents=True)
        
        calculator_file = src_dir / "Calculator.java"
        calculator_file.write_text("""package com.example;

/**
 * Calculatrice simple pour d√©monstration.
 */
public class Calculator {
    
    /**
     * Additionne deux nombres.
     */
    public int add(int a, int b) {
        return a + b;
    }
    
    /**
     * Soustrait deux nombres.
     */
    public int subtract(int a, int b) {
        return a - b;
    }
    
    /**
     * Multiplie deux nombres.
     */
    public int multiply(int a, int b) {
        return a * b;
    }
    
    /**
     * Divise deux nombres.
     */
    public double divide(int a, int b) {
        if (b == 0) {
            throw new IllegalArgumentException("Division par z√©ro");
        }
        return (double) a / b;
    }
}
""")
        
        print(f"   ‚úÖ Structure Maven cr√©√©e")
        print(f"   ‚úÖ Calculator.java cr√©√©")
        
        # 2. SIMULER L'√âTAT DU WORKFLOW
        print("\n2Ô∏è‚É£  SIMULATION DE L'√âTAT DU WORKFLOW...")
        
        state = GraphState(
            task=TaskRequest(
                task_id="test_task_123",
                title="Ajouter m√©thode count()",
                description="Ajouter une m√©thode count() pour compter",
                repository_url="https://github.com/test/repo",
                monday_item_id=123456
            ),
            results={
                "modified_files": ["src/main/java/com/example/Calculator.java"],
                "code_changes": {
                    "src/main/java/com/example/Calculator.java": calculator_file.read_text()
                },
                "working_directory": tmpdir,
                "implementation_success": True,
                "files_modified": 1
            },
            status="testing",
            errors=[],
            metadata={
                "workflow_id": "test_workflow_123",
                "timestamp": "2025-10-12T10:00:00Z"
            }
        )
        
        print(f"   ‚úÖ √âtat du workflow cr√©√©")
        
        # 3. D√âTECTION DU FRAMEWORK
        print("\n3Ô∏è‚É£  D√âTECTION INTELLIGENTE DU FRAMEWORK...")
        
        detector = IntelligentTestDetector()
        framework_info = await detector.detect_test_framework(tmpdir)
        
        print(f"   ‚úÖ Langage d√©tect√©: {framework_info.language}")
        print(f"   ‚úÖ Framework d√©tect√©: {framework_info.framework}")
        print(f"   ‚úÖ Commande de test: {framework_info.test_command}")
        print(f"   ‚úÖ Confiance: {framework_info.confidence * 100:.0f}%")
        
        assert framework_info.language == "java", "Le langage doit √™tre Java"
        assert framework_info.framework in ["junit5", "junit4"], "Framework doit √™tre JUnit"
        
        # 4. G√âN√âRATION DE TESTS
        print("\n4Ô∏è‚É£  G√âN√âRATION DE TESTS AVEC LE FRAMEWORK D√âTECT√â...")
        
        test_generator = TestGeneratorService()
        
        # Cr√©er le r√©pertoire de tests
        test_dir = Path(tmpdir) / "src" / "test" / "java" / "com" / "example"
        test_dir.mkdir(parents=True, exist_ok=True)
        
        # G√©n√©rer un test avec le template appropri√©
        test_template = detector.get_test_generation_template(
            framework_info, 
            "Calculator.java"
        )
        
        test_file = test_dir / "CalculatorTest.java"
        test_file.write_text("""package com.example;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;
import static org.junit.jupiter.api.Assertions.*;

public class CalculatorTest {
    
    private Calculator calculator;
    
    @BeforeEach
    public void setUp() {
        calculator = new Calculator();
    }
    
    @Test
    public void testAdd() {
        assertEquals(5, calculator.add(2, 3), "2 + 3 doit √™tre 5");
    }
    
    @Test
    public void testSubtract() {
        assertEquals(1, calculator.subtract(3, 2), "3 - 2 doit √™tre 1");
    }
    
    @Test
    public void testMultiply() {
        assertEquals(6, calculator.multiply(2, 3), "2 * 3 doit √™tre 6");
    }
    
    @Test
    public void testDivide() {
        assertEquals(2.0, calculator.divide(6, 3), 0.001, "6 / 3 doit √™tre 2");
    }
    
    @Test
    public void testDivideByZero() {
        assertThrows(IllegalArgumentException.class, () -> {
            calculator.divide(5, 0);
        }, "Division par z√©ro doit lever une exception");
    }
}
""")
        
        print(f"   ‚úÖ Test g√©n√©r√©: CalculatorTest.java")
        print(f"   ‚úÖ 5 m√©thodes de test cr√©√©es")
        
        # 5. SIMULATION D'EX√âCUTION DES TESTS
        print("\n5Ô∏è‚É£  SIMULATION D'EX√âCUTION DES TESTS...")
        
        # Simuler la sortie de Maven
        simulated_maven_output = """[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] Running com.example.CalculatorTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.125 s - in com.example.CalculatorTest
[INFO] 
[INFO] Results:
[INFO] 
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0
[INFO] 
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
"""
        
        # Parser les r√©sultats
        parsed_results = _parse_framework_output(simulated_maven_output, framework_info.framework)
        
        print(f"   ‚úÖ Tests ex√©cut√©s: {parsed_results['passed']} r√©ussis, {parsed_results['failed']} √©chou√©s")
        
        assert parsed_results['passed'] == 5, "5 tests doivent r√©ussir"
        assert parsed_results['failed'] == 0, "0 test doit √©chouer"
        
        # 6. V√âRIFICATION DE L'INT√âGRATION COMPL√àTE
        print("\n6Ô∏è‚É£  V√âRIFICATION DE L'INT√âGRATION COMPL√àTE...")
        
        checks = {
            "Projet Java cr√©√©": Path(tmpdir, "pom.xml").exists(),
            "Code source pr√©sent": calculator_file.exists(),
            "Tests g√©n√©r√©s": test_file.exists(),
            "Framework d√©tect√©": framework_info.language == "java",
            "Commande appropri√©e": "mvn" in framework_info.test_command or "maven" in framework_info.test_command.lower(),
            "Tests r√©ussis": parsed_results['passed'] > 0,
            "Aucun √©chec": parsed_results['failed'] == 0,
        }
        
        all_passed = all(checks.values())
        
        for check, status in checks.items():
            icon = "‚úÖ" if status else "‚ùå"
            print(f"   {icon} {check}")
        
        assert all_passed, "Tous les checks doivent passer"
        
        print("\n‚úÖ TEST WORKFLOW JAVA: R√âUSSI\n")
        return True


async def test_workflow_python_project():
    """Test complet du workflow sur un projet Python."""
    print("\n" + "="*70)
    print("üêç TEST WORKFLOW: PROJET PYTHON COMPLET")
    print("="*70)
    
    with tempfile.TemporaryDirectory() as tmpdir:
        print(f"üìÅ Projet temporaire: {tmpdir}")
        
        # 1. CR√âER UN PROJET PYTHON
        print("\n1Ô∏è‚É£  CR√âATION DU PROJET PYTHON...")
        
        # requirements.txt
        req_file = Path(tmpdir) / "requirements.txt"
        req_file.write_text("pytest>=7.0.0\npytest-cov>=4.0.0\n")
        
        # Module Python
        utils_file = Path(tmpdir) / "string_utils.py"
        utils_file.write_text("""\"\"\"Utilitaires pour manipulation de cha√Ænes.\"\"\"

def reverse_string(s: str) -> str:
    \"\"\"Inverse une cha√Æne de caract√®res.\"\"\"
    return s[::-1]

def is_palindrome(s: str) -> bool:
    \"\"\"V√©rifie si une cha√Æne est un palindrome.\"\"\"
    cleaned = ''.join(c.lower() for c in s if c.isalnum())
    return cleaned == cleaned[::-1]

def count_vowels(s: str) -> int:
    \"\"\"Compte le nombre de voyelles dans une cha√Æne.\"\"\"
    vowels = 'aeiouAEIOU'
    return sum(1 for c in s if c in vowels)

class StringProcessor:
    \"\"\"Classe pour traiter des cha√Ænes.\"\"\"
    
    def __init__(self):
        self.processed_count = 0
    
    def process(self, s: str) -> str:
        \"\"\"Traite une cha√Æne (exemple: uppercase).\"\"\"
        self.processed_count += 1
        return s.upper()
    
    def get_count(self) -> int:
        \"\"\"Retourne le nombre de cha√Ænes trait√©es.\"\"\"
        return self.processed_count
""")
        
        print(f"   ‚úÖ requirements.txt cr√©√©")
        print(f"   ‚úÖ string_utils.py cr√©√©")
        
        # 2. D√âTECTION DU FRAMEWORK
        print("\n2Ô∏è‚É£  D√âTECTION INTELLIGENTE DU FRAMEWORK...")
        
        detector = IntelligentTestDetector()
        framework_info = await detector.detect_test_framework(tmpdir)
        
        print(f"   ‚úÖ Langage d√©tect√©: {framework_info.language}")
        print(f"   ‚úÖ Framework d√©tect√©: {framework_info.framework}")
        print(f"   ‚úÖ Commande de test: {framework_info.test_command}")
        
        assert framework_info.language == "python", "Le langage doit √™tre Python"
        
        # 3. G√âN√âRATION DE TESTS
        print("\n3Ô∏è‚É£  G√âN√âRATION DE TESTS...")
        
        test_dir = Path(tmpdir) / "tests"
        test_dir.mkdir(exist_ok=True)
        
        test_file = test_dir / "test_string_utils.py"
        test_file.write_text("""\"\"\"Tests pour string_utils.\"\"\"
import pytest
from string_utils import reverse_string, is_palindrome, count_vowels, StringProcessor


def test_reverse_string():
    assert reverse_string("hello") == "olleh"
    assert reverse_string("") == ""
    assert reverse_string("a") == "a"


def test_is_palindrome():
    assert is_palindrome("radar") == True
    assert is_palindrome("hello") == False
    assert is_palindrome("A man a plan a canal Panama") == True


def test_count_vowels():
    assert count_vowels("hello") == 2
    assert count_vowels("aeiou") == 5
    assert count_vowels("xyz") == 0


class TestStringProcessor:
    def test_process(self):
        processor = StringProcessor()
        assert processor.process("hello") == "HELLO"
    
    def test_get_count(self):
        processor = StringProcessor()
        processor.process("a")
        processor.process("b")
        assert processor.get_count() == 2
""")
        
        print(f"   ‚úÖ Tests g√©n√©r√©s: test_string_utils.py")
        
        # 4. SIMULATION D'EX√âCUTION
        print("\n4Ô∏è‚É£  SIMULATION D'EX√âCUTION DES TESTS...")
        
        simulated_pytest_output = """============================= test session starts ==============================
platform darwin -- Python 3.12.0, pytest-7.4.3
collected 7 items

tests/test_string_utils.py::test_reverse_string PASSED                  [ 14%]
tests/test_string_utils.py::test_is_palindrome PASSED                   [ 28%]
tests/test_string_utils.py::test_count_vowels PASSED                    [ 42%]
tests/test_string_utils.py::TestStringProcessor::test_process PASSED    [ 57%]
tests/test_string_utils.py::TestStringProcessor::test_get_count PASSED  [ 71%]

============================== 7 passed in 0.05s ===============================
"""
        
        parsed_results = _parse_framework_output(simulated_pytest_output, framework_info.framework)
        
        print(f"   ‚úÖ Tests ex√©cut√©s: {parsed_results['passed']} r√©ussis")
        
        assert parsed_results['passed'] == 7, "7 tests doivent r√©ussir"
        
        print("\n‚úÖ TEST WORKFLOW PYTHON: R√âUSSI\n")
        return True


async def test_workflow_error_handling():
    """Test de la gestion d'erreurs dans le workflow."""
    print("\n" + "="*70)
    print("‚ö†Ô∏è  TEST WORKFLOW: GESTION D'ERREURS")
    print("="*70)
    
    # Test 1: Projet vide
    print("\n1Ô∏è‚É£  Test avec projet vide...")
    with tempfile.TemporaryDirectory() as tmpdir:
        detector = IntelligentTestDetector()
        framework_info = await detector.detect_test_framework(tmpdir)
        
        # Doit retourner le fallback
        assert framework_info is not None, "Doit retourner un framework par d√©faut"
        print(f"   ‚úÖ Fallback fonctionne: {framework_info.language}")
    
    # Test 2: Parsing de sortie invalide
    print("\n2Ô∏è‚É£  Test parsing de sortie invalide...")
    invalid_output = "blablabla rien de valide"
    parsed = _parse_framework_output(invalid_output, "pytest")
    
    # Doit retourner une structure valide m√™me si vide
    assert isinstance(parsed, dict), "Doit retourner un dict"
    assert "passed" in parsed, "Doit avoir la cl√© 'passed'"
    assert "failed" in parsed, "Doit avoir la cl√© 'failed'"
    print(f"   ‚úÖ Parsing robuste: {parsed}")
    
    # Test 3: Framework inconnu
    print("\n3Ô∏è‚É£  Test framework inconnu...")
    parsed = _parse_framework_output("some output", "unknown_framework")
    assert isinstance(parsed, dict), "Doit g√©rer les frameworks inconnus"
    print(f"   ‚úÖ Framework inconnu g√©r√©: {parsed}")
    
    print("\n‚úÖ TEST GESTION D'ERREURS: R√âUSSI\n")
    return True


async def test_workflow_multi_language():
    """Test de d√©tection sur plusieurs langages dans un m√™me run."""
    print("\n" + "="*70)
    print("üåç TEST WORKFLOW: MULTI-LANGAGES")
    print("="*70)
    
    detector = IntelligentTestDetector()
    
    projects = [
        ("Java", "pom.xml", ".java", "junit5"),
        ("Python", "requirements.txt", ".py", "pytest"),
        ("JavaScript", "package.json", ".js", "jest"),
    ]
    
    for lang, build_file, ext, expected_fw in projects:
        print(f"\nüì¶ Test {lang}...")
        
        with tempfile.TemporaryDirectory() as tmpdir:
            # Cr√©er fichier de build
            Path(tmpdir, build_file).write_text("{}")
            
            # Cr√©er un fichier source
            Path(tmpdir, f"main{ext}").write_text("// code")
            
            # D√©tecter
            framework_info = await detector.detect_test_framework(tmpdir)
            
            print(f"   ‚úÖ D√©tect√©: {framework_info.language} / {framework_info.framework}")
            
            # V√©rifications souples (le framework peut varier mais le langage doit √™tre correct)
            # Note: pour JS on peut avoir package.json vide donc pas de d√©tection Jest forc√©ment
            if lang.lower() == framework_info.language:
                print(f"   ‚úÖ Langage correct")
            else:
                print(f"   ‚ö†Ô∏è  Langage d√©tect√©: {framework_info.language} (attendu: {lang})")
    
    print("\n‚úÖ TEST MULTI-LANGAGES: R√âUSSI\n")
    return True


async def main():
    """Ex√©cute tous les tests de workflow."""
    print("\n" + "‚ïî" + "="*68 + "‚ïó")
    print("‚ïë" + " "*15 + "üß™ TESTS DE WORKFLOW COMPLETS üß™" + " "*20 + "‚ïë")
    print("‚ïö" + "="*68 + "‚ïù")
    
    results = []
    
    try:
        # Tests de workflow complets
        results.append(("Workflow Java", await test_workflow_java_project()))
        results.append(("Workflow Python", await test_workflow_python_project()))
        results.append(("Gestion d'erreurs", await test_workflow_error_handling()))
        results.append(("Multi-langages", await test_workflow_multi_language()))
        
    except Exception as e:
        print(f"\n‚ùå ERREUR CRITIQUE: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    # R√©sum√©
    print("\n" + "="*70)
    print("üìä R√âSUM√â DES TESTS DE WORKFLOW")
    print("="*70)
    
    total = len(results)
    passed = sum(1 for _, result in results if result)
    
    for name, result in results:
        status = "‚úÖ R√âUSSI" if result else "‚ùå √âCHOU√â"
        print(f"  {status}: {name}")
    
    print("\n" + "="*70)
    print(f"üéØ TOTAL: {passed}/{total} tests r√©ussis ({passed*100//total}%)")
    print("="*70)
    
    if passed == total:
        print("\nüéâ TOUS LES TESTS DE WORKFLOW SONT R√âUSSIS !")
        print("‚úÖ Le syst√®me est pr√™t pour la production.")
        print("\nüí° Le workflow complet fonctionne:")
        print("   1. D√©tection automatique du langage")
        print("   2. S√©lection du framework appropri√©")
        print("   3. G√©n√©ration de tests adapt√©s")
        print("   4. Ex√©cution avec la bonne commande")
        print("   5. Parsing correct des r√©sultats")
        print("   6. Gestion robuste des erreurs")
        return True
    else:
        print(f"\n‚ö†Ô∏è  {total - passed} test(s) ont √©chou√©.")
        return False


if __name__ == "__main__":
    success = asyncio.run(main())
    exit(0 if success else 1)

