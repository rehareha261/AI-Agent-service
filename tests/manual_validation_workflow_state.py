"""
Script de validation manuelle pour la correction de persistence du workflow.

Ce script valide que la correction apport√©e r√©sout les probl√®mes identifi√©s
dans les logs Celery sans n√©cessiter pytest.
"""

import sys
sys.path.insert(0, '/Users/rehareharanaivo/Desktop/AI-Agent')

from datetime import datetime
from graph.workflow_graph import _create_initial_state_with_recovery
from models.schemas import TaskRequest, TaskPriority


def validate_state_structure():
    """Valide que l'√©tat cr√©√© a la bonne structure."""
    print("üîç Test 1: Validation de la structure de l'√©tat")
    print("=" * 80)
    
    # Cr√©er un TaskRequest de test
    task_request = TaskRequest(
        task_id="5027535188",
        title="Ajouter un fichier main",
        description="Test de validation",
        priority=TaskPriority.MEDIUM,
        repository_url="https://github.com/rehareha261/S2-GenericDAO",
        base_branch="main"
    )
    
    # Cr√©er l'√©tat comme dans le workflow r√©el
    workflow_id = "workflow_5027535188_1759664143"
    task_db_id = 25
    actual_task_run_id = 25
    uuid_task_run_id = "run_95f6c0a41acc_1759664144"
    
    state = _create_initial_state_with_recovery(
        task_request,
        workflow_id,
        task_db_id,
        actual_task_run_id,
        uuid_task_run_id
    )
    
    # V√©rifications critiques
    errors = []
    warnings = []
    
    # 1. V√©rifier db_task_id
    if "db_task_id" not in state:
        errors.append("‚ùå ERREUR CRITIQUE: 'db_task_id' manquant dans l'√©tat")
    elif state["db_task_id"] != task_db_id:
        errors.append(f"‚ùå ERREUR: db_task_id devrait √™tre {task_db_id}, obtenu {state['db_task_id']}")
    elif state["db_task_id"] is None:
        errors.append("‚ùå ERREUR CRITIQUE: db_task_id est None (bug identifi√© ligne 258 logs)")
    else:
        print(f"‚úÖ db_task_id correctement d√©fini: {state['db_task_id']}")
    
    # 2. V√©rifier db_run_id
    if "db_run_id" not in state:
        errors.append("‚ùå ERREUR CRITIQUE: 'db_run_id' manquant dans l'√©tat")
    elif state["db_run_id"] != actual_task_run_id:
        errors.append(f"‚ùå ERREUR: db_run_id devrait √™tre {actual_task_run_id}, obtenu {state['db_run_id']}")
    elif state["db_run_id"] is None:
        errors.append("‚ùå ERREUR CRITIQUE: db_run_id est None (bug identifi√© ligne 258-259 logs)")
    else:
        print(f"‚úÖ db_run_id correctement d√©fini: {state['db_run_id']}")
    
    # 3. V√©rifier les champs requis par GraphState
    required_fields = [
        "workflow_id", "status", "current_node", "completed_nodes", "task",
        "results", "error", "started_at", "completed_at", "langsmith_session"
    ]
    
    for field in required_fields:
        if field not in state:
            errors.append(f"‚ùå ERREUR: Champ requis '{field}' manquant")
        else:
            print(f"‚úÖ Champ '{field}' pr√©sent")
    
    # 4. V√©rifier la structure results
    if "results" in state:
        results_fields = ["ai_messages", "error_logs", "modified_files", "test_results", "debug_attempts"]
        for field in results_fields:
            if field not in state["results"]:
                errors.append(f"‚ùå ERREUR: Champ 'results.{field}' manquant")
            else:
                print(f"‚úÖ results.{field} pr√©sent et initialis√©")
    
    # 5. V√©rifier les champs de r√©cup√©ration
    recovery_fields = ["node_retry_count", "recovery_mode", "checkpoint_data"]
    for field in recovery_fields:
        if field not in state:
            warnings.append(f"‚ö†Ô∏è Champ de r√©cup√©ration '{field}' manquant")
        else:
            print(f"‚úÖ Champ de r√©cup√©ration '{field}' pr√©sent")
    
    print("\n" + "=" * 80)
    
    if errors:
        print("‚ùå √âCHEC DU TEST")
        for error in errors:
            print(error)
        return False
    elif warnings:
        print("‚ö†Ô∏è TEST PASS√â AVEC AVERTISSEMENTS")
        for warning in warnings:
            print(warning)
        return True
    else:
        print("‚úÖ TOUS LES TESTS PASS√âS")
        return True


def validate_persistence_scenario():
    """Valide le sc√©nario de persistence identifi√© dans les logs."""
    print("\n\nüîç Test 2: Validation du sc√©nario de persistence (logs Celery)")
    print("=" * 80)
    
    # Reproduire le sc√©nario des logs
    task_request = TaskRequest(
        task_id="5027535188",
        title="Ajouter un fichier main",
        description="Ajouter un fichier main.txt qui est le resume du projet",
        priority=TaskPriority.MEDIUM,
        repository_url="https://github.com/rehareha261/S2-GenericDAO"
    )
    
    workflow_id = "workflow_5027535188_1759664143"
    task_db_id = 25  # Ligne 71 des logs
    actual_task_run_id = 25  # Ligne 84 des logs
    uuid_task_run_id = "run_95f6c0a41acc_1759664144"
    
    state = _create_initial_state_with_recovery(
        task_request,
        workflow_id,
        task_db_id,
        actual_task_run_id,
        uuid_task_run_id
    )
    
    # Simuler le n≈ìud finalize_pr
    state["results"]["pr_info"] = {
        "number": 3,
        "url": "https://github.com/rehareha261/S2-GenericDAO/pull/3"
    }
    
    # Test 1: Sauvegarde de la PR (ligne 306-322 de finalize_node.py)
    print("\nüìù Test: Sauvegarde de la PR en base de donn√©es")
    task_id_for_pr = state.get("db_task_id")
    task_run_id_for_pr = state.get("db_run_id")
    
    print(f"   task_id extrait: {task_id_for_pr}")
    print(f"   task_run_id extrait: {task_run_id_for_pr}")
    
    # AVANT la correction : task_run_id=None (ligne 258 des logs)
    # APR√àS la correction : task_run_id=25
    if task_id_for_pr is None or task_run_id_for_pr is None:
        print("   ‚ùå ERREUR: IDs None - PR ne peut pas √™tre sauvegard√©e (bug ligne 258)")
        print("   ‚ö†Ô∏è Warning qui serait affich√©: \"Impossible de sauvegarder la PR en base\"")
        return False
    else:
        print("   ‚úÖ IDs pr√©sents - PR peut √™tre sauvegard√©e")
        print("   ‚úÖ BUG CORRIG√â: Le warning ligne 258 ne sera plus affich√©")
    
    # Test 2: Enregistrement des m√©triques (ligne 346-397 de finalize_node.py)
    print("\nüìä Test: Enregistrement des m√©triques de performance")
    task_id_for_metrics = state.get("db_task_id")
    task_run_id_for_metrics = state.get("db_run_id")
    
    print(f"   task_id extrait: {task_id_for_metrics}")
    print(f"   task_run_id extrait: {task_run_id_for_metrics}")
    
    # AVANT la correction : task_run_id=None (ligne 259 des logs)
    # APR√àS la correction : task_run_id=25
    if task_id_for_metrics is None or task_run_id_for_metrics is None:
        print("   ‚ùå ERREUR: IDs None - M√©triques ne peuvent pas √™tre enregistr√©es (bug ligne 259)")
        print("   ‚ö†Ô∏è Warning qui serait affich√©: \"Impossible d'enregistrer les m√©triques\"")
        return False
    else:
        print("   ‚úÖ IDs pr√©sents - M√©triques peuvent √™tre enregistr√©es")
        print("   ‚úÖ BUG CORRIG√â: Le warning ligne 259 ne sera plus affich√©")
    
    print("\n" + "=" * 80)
    print("‚úÖ SC√âNARIO DE PERSISTENCE VALID√â")
    print("‚úÖ Les donn√©es seront maintenant correctement enregistr√©es en base")
    return True


def validate_state_propagation():
    """Valide que l'√©tat se propage correctement √† travers les n≈ìuds."""
    print("\n\nüîç Test 3: Propagation de l'√©tat √† travers les n≈ìuds")
    print("=" * 80)
    
    task_request = TaskRequest(
        task_id="test_propagation",
        title="Test de propagation",
        description="Test",
        priority=TaskPriority.LOW
    )
    
    state = _create_initial_state_with_recovery(
        task_request,
        "workflow_test",
        100,
        200,
        "run_test"
    )
    
    # Simuler le passage √† travers les n≈ìuds
    nodes = [
        "prepare_environment",
        "analyze_requirements",
        "implement_task",
        "run_tests",
        "quality_assurance_automation",
        "finalize_pr",
        "monday_validation",
        "merge_after_validation",
        "update_monday"
    ]
    
    all_passed = True
    for node_name in nodes:
        state["current_node"] = node_name
        state["completed_nodes"].append(node_name)
        
        # V√©rifier que les IDs persistent
        if state.get("db_task_id") != 100:
            print(f"   ‚ùå db_task_id perdu au n≈ìud {node_name}")
            all_passed = False
        elif state.get("db_run_id") != 200:
            print(f"   ‚ùå db_run_id perdu au n≈ìud {node_name}")
            all_passed = False
        else:
            print(f"   ‚úÖ {node_name}: IDs pr√©serv√©s")
    
    print("\n" + "=" * 80)
    if all_passed:
        print("‚úÖ PROPAGATION DE L'√âTAT VALID√âE")
        return True
    else:
        print("‚ùå PROBL√àME DE PROPAGATION D√âTECT√â")
        return False


def main():
    """Fonction principale de validation."""
    print("\n" + "=" * 80)
    print("üß™ VALIDATION MANUELLE DE LA CORRECTION DE PERSISTENCE")
    print("=" * 80)
    print("\nCe script valide que la correction apport√©e √†")
    print("_create_initial_state_with_recovery r√©sout les probl√®mes")
    print("identifi√©s dans les logs Celery.\n")
    
    results = []
    
    # Test 1: Structure de l'√©tat
    results.append(("Structure de l'√©tat", validate_state_structure()))
    
    # Test 2: Sc√©nario de persistence
    results.append(("Sc√©nario de persistence", validate_persistence_scenario()))
    
    # Test 3: Propagation de l'√©tat
    results.append(("Propagation de l'√©tat", validate_state_propagation()))
    
    # R√©sum√©
    print("\n\n" + "=" * 80)
    print("üìä R√âSUM√â DES TESTS")
    print("=" * 80)
    
    passed = 0
    failed = 0
    
    for test_name, result in results:
        status = "‚úÖ PASS√â" if result else "‚ùå √âCHOU√â"
        print(f"{status}: {test_name}")
        if result:
            passed += 1
        else:
            failed += 1
    
    print("\n" + "=" * 80)
    print(f"R√©sultats: {passed} tests pass√©s, {failed} tests √©chou√©s")
    
    if failed == 0:
        print("\n‚úÖ TOUS LES TESTS SONT PASS√âS")
        print("‚úÖ La correction est valid√©e et pr√™te pour production")
        return 0
    else:
        print("\n‚ùå CERTAINS TESTS ONT √âCHOU√â")
        print("‚ö†Ô∏è Veuillez corriger les probl√®mes avant de d√©ployer")
        return 1


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
