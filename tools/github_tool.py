"""Outil GitHub pour la gestion des Pull Requests."""

import os
import subprocess
from datetime import datetime
from typing import Any, Dict, Optional
from github import Github, GithubException
from pydantic import Field

from .base_tool import BaseTool
from models.schemas import GitOperationResult, PullRequestInfo
from config.langsmith_config import langsmith_config


class GitHubTool(BaseTool):
    """Outil pour interagir avec l'API GitHub."""

    name: str = "github_tool"
    description: str = """
    Outil pour interagir avec GitHub.

    Fonctionnalit√©s:
    - Cr√©er des Pull Requests
    - Pousser des branches
    - Ajouter des commentaires
    - G√©rer les labels et assignations
    """

    github_client: Optional[Github] = Field(default=None)
    repository: Optional[Any] = Field(default=None)

    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.github_client = Github(self.settings.github_token)

    async def _arun(self, action: str, **kwargs) -> Dict[str, Any]:
        """Ex√©cute une action GitHub."""
        try:
            if action == "create_pull_request":
                return await self._create_pull_request(
                    repo_url=kwargs.get("repo_url"),
                    title=kwargs.get("title"),
                    body=kwargs.get("body"),
                    head_branch=kwargs.get("head_branch"),
                    base_branch=kwargs.get("base_branch", "main")
                )
            elif action == "push_branch":
                git_result = await self._push_branch(
                    working_directory=kwargs.get("working_directory"),
                    branch=kwargs.get("branch"),
                    repository_url=kwargs.get("repo_url")  # Param√®tre optionnel
                )
                # Convertir GitOperationResult en dictionnaire
                return {
                    "success": git_result.success,
                    "message": git_result.message,
                    "branch": git_result.branch,
                    "commit_hash": git_result.commit_hash,
                    "error": git_result.error
                }
            elif action == "add_comment":
                return await self._add_comment(
                    repo_url=kwargs.get("repo_url"),
                    pr_number=kwargs.get("pr_number"),
                    comment=kwargs.get("comment")
                )
            elif action == "merge_pull_request":
                return await self._merge_pull_request(
                    repo_url=kwargs.get("repo_url"),
                    pr_number=kwargs.get("pr_number"),
                    commit_message=kwargs.get("commit_message"),
                    merge_method=kwargs.get("merge_method", "merge")
                )
            elif action == "delete_branch":
                return await self._delete_branch(
                    repo_url=kwargs.get("repo_url"),
                    branch=kwargs.get("branch")
                )
            else:
                raise ValueError(f"Action non support√©e: {action}")

        except Exception as e:
            return self.handle_error(e, f"github_tool.{action}")

    async def _create_pull_request(self, repo_url: str, title: str, body: str,
                                   head_branch: str, base_branch: str = "main") -> Dict[str, Any]:
        """Cr√©e une Pull Request sur GitHub."""
        try:
            # Extraire le nom du repository depuis l'URL
            repo_name = self._extract_repo_name(repo_url)
            self.logger.info(f"üîç Tentative d'acc√®s au repository: {repo_name}")

            # V√©rifier l'acc√®s au repository
            try:
                repo = self.github_client.get_repo(repo_name)
            except GithubException as e:
                if e.status == 404:
                    return {
                        "success": False,
                        "error": f"Repository {repo_name} non trouv√© ou token sans permissions (404). V√©rifiez GITHUB_TOKEN et permissions."
                    }
                elif e.status == 401:
                    return {
                        "success": False,
                        "error": "Token GitHub invalide ou expir√© (401). V√©rifiez GITHUB_TOKEN."
                    }
                raise

            self.logger.info(f"‚úÖ Repository accessible: {repo_name}")

            # V√©rifier que la branche base existe
            try:
                repo.get_branch(base_branch)
            except GithubException as e:
                if e.status == 404:
                    # Essayer avec 'master' si 'main' n'existe pas
                    if base_branch == "main":
                        try:
                            repo.get_branch("master")
                            base_branch = "master"
                            self.logger.info(f"‚úÖ Branche 'master' trouv√©e, utilisation comme base")
                        except GithubException:
                            return {
                                "success": False,
                                "error": f"Aucune branche base trouv√©e ('main' ou 'master')"
                            }
                    else:
                        return {
                            "success": False,
                            "error": f"Branche de base '{base_branch}' inexistante. V√©rifiez DEFAULT_BASE_BRANCH."
                        }
                else:
                    raise

            # V√©rifier que la branche head existe - avec retry et attente
            max_retries = 3
            retry_delay = 5  # secondes
            
            for attempt in range(max_retries):
                try:
                    repo.get_branch(head_branch)
                    self.logger.info(f"‚úÖ Branche {head_branch} trouv√©e sur GitHub")
                    break
                except GithubException as e:
                    if e.status == 404:
                        if attempt < max_retries - 1:
                            self.logger.warning(f"‚ö†Ô∏è Branche {head_branch} pas encore visible (tentative {attempt + 1}/{max_retries}), attente {retry_delay}s...")
                            import asyncio
                            await asyncio.sleep(retry_delay)
                            continue
                        else:
                            return {
                                "success": False,
                                "error": f"La branche {head_branch} n'existe pas sur GitHub apr√®s {max_retries} tentatives. V√©rifiez que le push a r√©ussi."
                            }
                    else:
                        raise

            # Construire la r√©f√©rence de branche correcte
            # Pour les PR, la branche head doit √™tre au format "owner:branch" si c'est un fork
            # ou juste "branch" si c'est le m√™me repository
            head_ref = head_branch
            
            # Cr√©er la Pull Request
            self.logger.info(f"üî® Cr√©ation PR: {head_ref} ‚Üí {base_branch}")
            pr = repo.create_pull(
                title=title,
                body=body,
                head=head_ref,
                base=base_branch
            )

            pr_info = PullRequestInfo(
                number=pr.number,
                title=pr.title,
                url=pr.html_url,
                branch=head_branch,
                base_branch=base_branch,
                status="open",
                created_at=datetime.now()
            )

            self.log_operation(f"Cr√©ation PR #{pr.number}", True, pr.html_url)

            # Tracer avec LangSmith si configur√©
            if langsmith_config.client:
                try:
                    langsmith_config.client.create_run(
                        name=f"github_create_pr_{pr.number}",
                        run_type="tool",
                        inputs={
                            "repo_url": repo_url,
                            "title": title,
                            "head_branch": head_branch,
                            "base_branch": base_branch
                        },
                        outputs={
                            "success": True,
                            "number": pr.number,
                            "url": pr.html_url
                        },
                        extra={
                            "tool": "github",
                            "operation": "create_pull_request",
                            "repo_name": repo_name
                        }
                    )
                except Exception as e:
                    self.logger.warning(f"‚ö†Ô∏è Erreur LangSmith tracing: {e}")

            return {
                "success": True,
                "pr_info": pr_info.dict(),
                "url": pr.html_url,
                "number": pr.number
            }

        except GithubException as e:
            if e.status == 422 and "pull request already exists" in str(e):
                # PR existe d√©j√†, essayer de la r√©cup√©rer
                try:
                    existing_prs = repo.get_pulls(
                        state="open",
                        head=f"{repo.owner.login}:{head_branch}",
                        base=base_branch
                    )
                    if existing_prs.totalCount > 0:
                        existing_pr = existing_prs[0]
                        pr_info = PullRequestInfo(
                            number=existing_pr.number,
                            title=existing_pr.title,
                            url=existing_pr.html_url,
                            branch=head_branch,
                            base_branch=base_branch,
                            status=existing_pr.state,
                            created_at=datetime.now()
                        )

                        self.log_operation(f"PR existante trouv√©e #{existing_pr.number}", True)
                        return {
                            "success": True,
                            "pr_info": pr_info.dict(),
                            "url": existing_pr.html_url,
                            "number": existing_pr.number,
                            "message": "Pull Request existante utilis√©e"
                        }
                except Exception:
                    pass
            elif e.status == 404:
                # Erreur 404 sp√©cifique avec contexte d√©taill√©
                return {
                    "success": False,
                    "error": f"Erreur 404 lors de cr√©ation PR: {str(e)}. V√©rifiez que la branche '{head_branch}' existe sur GitHub et que vous avez les permissions pour cr√©er une PR sur ce repository.",
                    "operation": "cr√©ation de la Pull Request",
                    "details": {
                        "repo_url": repo_url,
                        "head_branch": head_branch,
                        "base_branch": base_branch,
                        "status_code": 404
                    }
                }

            return self.handle_error(e, "cr√©ation de la Pull Request")
        except Exception as e:
            return self.handle_error(e, "cr√©ation de la Pull Request")

    async def _push_branch(self, working_directory: str, branch: str, repository_url: str = None) -> GitOperationResult:
        """
        Pousse une branche vers GitHub.
        
        Args:
            working_directory: R√©pertoire de travail Git
            branch: Nom de la branche √† pousser
            repository_url: URL du repository GitHub (optionnel, utilis√© si remote origin n'existe pas)
        """
        try:
            # Validation des param√®tres
            if not working_directory or not os.path.exists(working_directory):
                error_msg = f"R√©pertoire de travail invalide: {working_directory}"
                self.logger.error(f"‚ùå {error_msg}")
                return GitOperationResult(
                    success=False,
                    message=error_msg,
                    branch=branch,
                    error=error_msg
                )

            if not branch:
                error_msg = "Nom de branche manquant"
                self.logger.error(f"‚ùå {error_msg}")
                return GitOperationResult(
                    success=False,
                    message=error_msg,
                    branch=branch,
                    error=error_msg
                )

            # V√©rifier que c'est un d√©p√¥t Git
            git_dir = os.path.join(working_directory, '.git')
            if not os.path.exists(git_dir):
                error_msg = f"Le r√©pertoire {working_directory} n'est pas un d√©p√¥t Git (pas de .git)"
                self.logger.error(f"‚ùå {error_msg}")
                return GitOperationResult(
                    success=False,
                    message=error_msg,
                    branch=branch,
                    error=error_msg
                )

            # Changer vers le r√©pertoire de travail
            original_cwd = os.getcwd()
            self.logger.info(f"üîÑ Changement de r√©pertoire: {original_cwd} ‚Üí {working_directory}")
            os.chdir(working_directory)

            try:
                # R√©cup√©rer le token GitHub pour l'authentification
                github_token = self.settings.github_token
                
                # ‚úÖ S√âCURIT√â: Pas besoin de credential.helper car on utilise l'URL avec token
                
                # V√©rifier le statut git avant de commencer
                status_result = subprocess.run(
                    ["git", "status", "--porcelain"],
                    capture_output=True,
                    text=True,
                    check=True
                )
                
                has_changes = bool(status_result.stdout.strip())
                if not has_changes:
                    self.logger.warning("‚ö†Ô∏è Aucun changement d√©tect√© dans le repository")
                    # ‚úÖ AM√âLIORATION: Retourner une erreur explicite au lieu de continuer
                    return GitOperationResult(
                        success=False,
                        message="Aucun fichier modifi√© √† pousser - v√©rifiez que l'impl√©mentation a cr√©√© des fichiers",
                        branch=branch,
                        error="√âchec impl√©mentation: Aucun changement d√©tect√© par git status. L'IA n'a probablement pas cr√©√©/modifi√© de fichiers."
                    )
                
                # Ajouter tous les fichiers modifi√©s
                add_result = subprocess.run(
                    ["git", "add", "."],
                    capture_output=True,
                    text=True,
                    check=True
                )

                # V√©rifier s'il y a quelque chose √† committer
                status_after_add = subprocess.run(
                    ["git", "diff", "--cached", "--name-only"],
                    capture_output=True,
                    text=True,
                    check=True
                )
                
                files_to_commit = status_after_add.stdout.strip()
                if not files_to_commit:
                    self.logger.error("‚ùå Aucun fichier √† committer apr√®s git add")
                    return GitOperationResult(
                        success=False,
                        message="Aucun fichier √† committer",
                        branch=branch,
                        error="Aucun fichier modifi√© apr√®s 'git add .' - l'impl√©mentation a √©chou√©"
                    )
                
                self.logger.info(f"üìù Fichiers √† committer:\n{files_to_commit}")

                # Committer les changements
                commit_result = subprocess.run(
                    ["git", "commit", "-m", f"Impl√©mentation automatique - {branch}", "--allow-empty"],
                    capture_output=True,
                    text=True,
                    check=True
                )

                # Pousser la branche avec authentification
                push_command = ["git", "push", "origin", branch]
                
                # ‚úÖ CORRECTION: V√©rifier si le remote origin existe avant de l'utiliser
                remote_check = subprocess.run(
                    ["git", "remote", "get-url", "origin"],
                    capture_output=True,
                    text=True
                )
                
                if remote_check.returncode != 0:
                    # Le remote origin n'existe pas, il faut le cr√©er
                    self.logger.warning("‚ö†Ô∏è Aucun remote 'origin' configur√© - cr√©ation impossible sans URL repository")
                    
                    # V√©rifier si on a l'URL du repository dans le state ou les param√®tres
                    if hasattr(self, 'repository_url') and self.repository_url:
                        repo_url = self.repository_url
                    elif repository_url:
                        repo_url = repository_url
                    else:
                        return GitOperationResult(
                            success=False,
                            message="Impossible de pousser : pas de remote 'origin' et pas d'URL repository disponible",
                            branch=branch,
                            error="No such remote 'origin'"
                        )
                    
                    # Ajouter le remote origin
                    self.logger.info(f"üìç Ajout du remote origin: {repo_url}")
                    add_remote_result = subprocess.run(
                        ["git", "remote", "add", "origin", repo_url],
                        capture_output=True,
                        text=True
                    )
                    
                    if add_remote_result.returncode != 0:
                        return GitOperationResult(
                            success=False,
                            message=f"Erreur lors de l'ajout du remote origin: {add_remote_result.stderr}",
                            branch=branch,
                            error=add_remote_result.stderr
                        )
                    
                    self.logger.info("‚úÖ Remote origin ajout√© avec succ√®s")
                
                # ‚úÖ CORRECTION: Format correct pour l'authentification GitHub avec token
                if github_token:
                    # R√©cup√©rer l'URL remote actuelle (maintenant qu'elle existe)
                    remote_result = subprocess.run(
                        ["git", "remote", "get-url", "origin"],
                        capture_output=True,
                        text=True,
                        check=True
                    )
                    
                    remote_url = remote_result.stdout.strip()
                    if remote_url.startswith("https://github.com/"):
                        # ‚úÖ Format correct: https://x-access-token:TOKEN@github.com/...
                        # C'est le format officiel recommand√© par GitHub pour les PAT
                        auth_url = remote_url.replace("https://github.com/", f"https://x-access-token:{github_token}@github.com/")
                        subprocess.run(
                            ["git", "remote", "set-url", "origin", auth_url],
                            capture_output=True,
                            text=True,
                            check=True
                        )
                        self.logger.info("‚úÖ URL remote configur√©e avec authentification")
                    elif remote_url.startswith("git@github.com:"):
                        # Convertir SSH en HTTPS avec token
                        https_url = remote_url.replace("git@github.com:", "https://x-access-token:"+github_token+"@github.com/")
                        subprocess.run(
                            ["git", "remote", "set-url", "origin", https_url],
                            capture_output=True,
                            text=True,
                            check=True
                        )
                        self.logger.info("‚úÖ URL remote convertie de SSH vers HTTPS avec authentification")
                
                push_result = subprocess.run(
                    push_command,
                    capture_output=True,
                    text=True
                )
                
                # ‚úÖ GESTION D'ERREUR: V√©rifier le r√©sultat du push
                if push_result.returncode != 0:
                    error_output = push_result.stderr or push_result.stdout
                    
                    # Analyser l'erreur pour fournir des conseils
                    if "403" in error_output or "Permission" in error_output or "denied" in error_output:
                        detailed_error = f"""‚ùå Erreur de permissions GitHub (403):

{error_output}

üîß Solutions possibles:
1. V√©rifiez que votre GITHUB_TOKEN est valide et n'a pas expir√©
2. Assurez-vous que le token a les permissions suivantes:
   - repo (acc√®s complet aux repositories priv√©s)
   - workflow (si vous modifiez des workflows)
3. Pour g√©n√©rer un nouveau token: https://github.com/settings/tokens
   - S√©lectionnez "Personal access tokens" > "Tokens (classic)"
   - Cochez au minimum: repo, workflow
4. Mettez √† jour GITHUB_TOKEN dans votre fichier .env

üìã Repository concern√©: {remote_url}
"""
                        self.logger.error(detailed_error)
                        
                        return GitOperationResult(
                            success=False,
                            message="Erreur de permissions GitHub",
                            branch=branch,
                            error=detailed_error
                        )
                    
                    # Autres erreurs Git
                    self.logger.error(f"‚ùå Erreur Git: {error_output}")
                    return GitOperationResult(
                        success=False,
                        message=f"Erreur lors du push",
                        branch=branch,
                        error=f"Erreur Git: {error_output}"
                    )

                # R√©cup√©rer le hash du commit
                commit_hash_result = subprocess.run(
                    ["git", "rev-parse", "HEAD"],
                    capture_output=True,
                    text=True,
                    check=True
                )
                commit_hash = commit_hash_result.stdout.strip()

                git_result = GitOperationResult(
                    success=True,
                    message=f"Branche {branch} pouss√©e avec succ√®s",
                    branch=branch,
                    commit_hash=commit_hash
                )

                self.log_operation(f"Push branche {branch}", True, commit_hash)
                return git_result

            finally:
                os.chdir(original_cwd)

        except subprocess.CalledProcessError as e:
            error_msg = f"Erreur Git: {e.stderr if e.stderr else e.stdout}"
            self.logger.error(f"‚ùå {error_msg}")
            self.logger.error(f"‚ùå Commande √©chou√©e: {' '.join(e.cmd)}")
            return GitOperationResult(
                success=False,
                message=error_msg,
                branch=branch,
                error=error_msg
            )
        except Exception as e:
            error_msg = str(e)
            self.logger.error(f"‚ùå Erreur inattendue lors du push: {error_msg}")
            return GitOperationResult(
                success=False,
                message=error_msg,
                branch=branch,
                error=error_msg
            )

    async def _add_comment(self, repo_url: str, pr_number: int, comment: str) -> Dict[str, Any]:
        """Ajoute un commentaire √† une Pull Request."""
        try:
            repo_name = self._extract_repo_name(repo_url)
            repo = self.github_client.get_repo(repo_name)
            pr = repo.get_pull(pr_number)

            comment_obj = pr.create_issue_comment(comment)

            self.log_operation(f"Commentaire ajout√© PR #{pr_number}", True)

            return {
                "success": True,
                "comment_id": comment_obj.id,
                "comment_url": comment_obj.html_url
            }

        except Exception as e:
            return self.handle_error(e, f"ajout de commentaire √† la PR #{pr_number}")

    async def _merge_pull_request(self, repo_url: str, pr_number: int, 
                                   commit_message: Optional[str] = None,
                                   merge_method: str = "merge") -> Dict[str, Any]:
        """
        Merge une Pull Request sur GitHub.
        
        Args:
            repo_url: URL du repository GitHub
            pr_number: Num√©ro de la PR √† merger
            commit_message: Message de commit pour le merge (optionnel)
            merge_method: M√©thode de merge ("merge", "squash", ou "rebase")
        
        Returns:
            Dictionnaire avec le r√©sultat du merge
        """
        try:
            # Extraire le nom du repository
            repo_name = self._extract_repo_name(repo_url)
            self.logger.info(f"üîÄ Tentative de merge PR #{pr_number} sur {repo_name}")
            
            # Acc√©der au repository
            repo = self.github_client.get_repo(repo_name)
            
            # R√©cup√©rer la PR
            pr = repo.get_pull(pr_number)
            
            # V√©rifier que la PR est mergeable
            if pr.mergeable is False:
                return {
                    "success": False,
                    "error": f"La PR #{pr_number} a des conflits et ne peut pas √™tre merg√©e automatiquement",
                    "mergeable_state": pr.mergeable_state
                }
            
            if pr.merged:
                return {
                    "success": False,
                    "error": f"La PR #{pr_number} est d√©j√† merg√©e",
                    "merged_at": pr.merged_at.isoformat() if pr.merged_at else None
                }
            
            if pr.state == "closed":
                return {
                    "success": False,
                    "error": f"La PR #{pr_number} est ferm√©e sans √™tre merg√©e"
                }
            
            # Pr√©parer le message de commit
            if not commit_message:
                commit_message = f"Merge pull request #{pr_number}: {pr.title}"
            
            # Valider la m√©thode de merge
            valid_methods = ["merge", "squash", "rebase"]
            if merge_method not in valid_methods:
                self.logger.warning(f"‚ö†Ô∏è M√©thode de merge invalide '{merge_method}', utilisation de 'merge'")
                merge_method = "merge"
            
            # Effectuer le merge
            self.logger.info(f"üîÄ Merge PR #{pr_number} avec m√©thode: {merge_method}")
            merge_result = pr.merge(
                commit_message=commit_message,
                merge_method=merge_method
            )
            
            if merge_result.merged:
                self.logger.info(f"‚úÖ PR #{pr_number} merg√©e avec succ√®s - SHA: {merge_result.sha}")
                self.log_operation(f"PR #{pr_number} merg√©e", True)
                
                return {
                    "success": True,
                    "merged": True,
                    "sha": merge_result.sha,
                    "message": merge_result.message,
                    "pr_number": pr_number,
                    "pr_title": pr.title
                }
            else:
                error_msg = merge_result.message or "Merge √©chou√© sans raison sp√©cifique"
                self.logger.error(f"‚ùå √âchec du merge PR #{pr_number}: {error_msg}")
                return {
                    "success": False,
                    "merged": False,
                    "error": error_msg
                }
        
        except GithubException as e:
            error_details = {
                "status_code": e.status,
                "message": str(e),
                "pr_number": pr_number
            }
            
            if e.status == 404:
                error_msg = f"PR #{pr_number} non trouv√©e ou repository inaccessible"
            elif e.status == 405:
                error_msg = f"PR #{pr_number} ne peut pas √™tre merg√©e (conflits ou restrictions de branche)"
            elif e.status == 409:
                error_msg = f"PR #{pr_number} a des conflits de merge"
            else:
                error_msg = f"Erreur GitHub lors du merge: {str(e)}"
            
            self.logger.error(f"‚ùå {error_msg}")
            return {
                "success": False,
                "error": error_msg,
                "details": error_details
            }
        
        except Exception as e:
            return self.handle_error(e, f"merge de la PR #{pr_number}")

    async def _delete_branch(self, repo_url: str, branch: str) -> Dict[str, Any]:
        """
        Supprime une branche sur GitHub.
        
        Args:
            repo_url: URL du repository GitHub
            branch: Nom de la branche √† supprimer
        
        Returns:
            Dictionnaire avec le r√©sultat de la suppression
        """
        try:
            # Extraire le nom du repository
            repo_name = self._extract_repo_name(repo_url)
            self.logger.info(f"üßπ Tentative de suppression de la branche '{branch}' sur {repo_name}")
            
            # Acc√©der au repository
            repo = self.github_client.get_repo(repo_name)
            
            # R√©cup√©rer la r√©f√©rence de la branche
            ref_name = f"heads/{branch}"
            
            try:
                ref = repo.get_git_ref(ref_name)
                
                # Supprimer la branche
                ref.delete()
                
                self.logger.info(f"‚úÖ Branche '{branch}' supprim√©e avec succ√®s")
                self.log_operation(f"Branche '{branch}' supprim√©e", True)
                
                return {
                    "success": True,
                    "message": f"Branche '{branch}' supprim√©e avec succ√®s",
                    "branch": branch
                }
                
            except GithubException as ref_error:
                if ref_error.status == 404:
                    # La branche n'existe pas (peut-√™tre d√©j√† supprim√©e)
                    self.logger.warning(f"‚ö†Ô∏è Branche '{branch}' non trouv√©e (peut-√™tre d√©j√† supprim√©e)")
                    return {
                        "success": True,  # Consid√©r√© comme succ√®s car objectif atteint
                        "message": f"Branche '{branch}' non trouv√©e (d√©j√† supprim√©e?)",
                        "branch": branch,
                        "already_deleted": True
                    }
                else:
                    raise ref_error
        
        except GithubException as e:
            error_details = {
                "status_code": e.status,
                "message": str(e),
                "branch": branch
            }
            
            if e.status == 404:
                error_msg = f"Repository ou branche '{branch}' non trouv√©(e)"
            elif e.status == 403:
                error_msg = f"Permissions insuffisantes pour supprimer la branche '{branch}'"
            elif e.status == 422:
                error_msg = f"Impossible de supprimer la branche '{branch}' (peut-√™tre la branche par d√©faut?)"
            else:
                error_msg = f"Erreur GitHub lors de la suppression de la branche: {str(e)}"
            
            self.logger.error(f"‚ùå {error_msg}")
            return {
                "success": False,
                "error": error_msg,
                "details": error_details
            }
        
        except Exception as e:
            return self.handle_error(e, f"suppression de la branche '{branch}'")

    def _extract_repo_name(self, repo_url: str) -> str:
        """Extrait le nom du repository depuis une URL GitHub."""
        # G√©rer diff√©rents formats d'URL
        if repo_url.endswith('.git'):
            repo_url = repo_url[:-4]

        if 'github.com/' in repo_url:
            # Extraire la partie apr√®s github.com/
            parts = repo_url.split('github.com/')[-1]
            return parts
        else:
            raise ValueError(f"URL de repository invalide: {repo_url}")

    def cleanup(self):
        """Nettoie les ressources."""
        if hasattr(self, 'github_client'):
            # GitHub API n'a pas besoin de nettoyage explicite
            pass
