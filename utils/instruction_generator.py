"""
G√©n√©rateur d'instructions adaptatif pour la g√©n√©ration de code.

Ce module g√©n√®re automatiquement des instructions sp√©cifiques au langage
d√©tect√©, sans avoir besoin de les coder en dur pour chaque langage.
"""

from typing import Dict, Optional
from dataclasses import dataclass

from utils.language_detector import LanguageInfo
from utils.logger import get_logger

logger = get_logger(__name__)


@dataclass
class CodeInstructions:
    """Instructions de g√©n√©ration de code pour un langage."""
    critical_rules: str          # R√®gles critiques (DOIS/NE DOIS PAS)
    file_structure: str          # Structure des fichiers attendue
    naming_conventions: str      # Conventions de nommage
    best_practices: str          # Bonnes pratiques
    common_pitfalls: str         # Pi√®ges courants √† √©viter
    example_structure: str       # Exemple de structure de fichier


class AdaptiveInstructionGenerator:
    """
    G√©n√©rateur adaptatif d'instructions de g√©n√©ration de code.
    
    G√©n√®re automatiquement des instructions pertinentes bas√©es sur:
    - Le langage d√©tect√©
    - Les conventions du langage
    - La structure du projet
    - Les bonnes pratiques universelles
    """
    
    def generate_instructions(self, language_info: LanguageInfo) -> CodeInstructions:
        """
        G√©n√®re des instructions adapt√©es au langage d√©tect√©.
        
        Args:
            language_info: Informations sur le langage d√©tect√©
            
        Returns:
            CodeInstructions compl√®tes pour ce langage
        """
        logger.info(f"üìù G√©n√©ration instructions pour: {language_info.name}")
        
        # G√©n√©rer chaque section
        critical_rules = self._generate_critical_rules(language_info)
        file_structure = self._generate_file_structure(language_info)
        naming_conventions = self._generate_naming_conventions(language_info)
        best_practices = self._generate_best_practices(language_info)
        common_pitfalls = self._generate_common_pitfalls(language_info)
        example_structure = self._generate_example_structure(language_info)
        
        return CodeInstructions(
            critical_rules=critical_rules,
            file_structure=file_structure,
            naming_conventions=naming_conventions,
            best_practices=best_practices,
            common_pitfalls=common_pitfalls,
            example_structure=example_structure
        )
    
    def _generate_critical_rules(self, lang_info: LanguageInfo) -> str:
        """G√©n√®re les r√®gles critiques."""
        extensions = ", ".join([f"`*{ext}`" for ext in lang_info.primary_extensions])
        
        rules = f"""‚ö†Ô∏è R√àGLES CRITIQUES POUR {lang_info.name.upper()}:

1. **LANGAGE**: Tu DOIS g√©n√©rer UNIQUEMENT du code {lang_info.name}
   - NE g√©n√®re JAMAIS de code dans un autre langage
   - Types de fichiers attendus: {extensions}

2. **EXTENSIONS**: Utilise UNIQUEMENT les extensions correctes
   - Extensions valides: {extensions}
   - ‚ùå NE PAS utiliser d'autres extensions

3. **STRUCTURE**: Respecte la structure de projet {lang_info.typical_structure}
"""
        
        # Ajouter build files si pr√©sents
        if lang_info.build_files:
            build_files = ", ".join([f"`{bf}`" for bf in lang_info.build_files])
            rules += f"""   - Fichiers de build d√©tect√©s: {build_files}
   - Respecte la configuration de build existante

"""
        
        return rules.strip()
    
    def _generate_file_structure(self, lang_info: LanguageInfo) -> str:
        """G√©n√®re la structure de fichiers attendue."""
        structure = f"""üìÅ STRUCTURE DE FICHIERS {lang_info.name.upper()}:

Type de structure d√©tect√©e: **{lang_info.typical_structure}**

"""
        
        # Instructions sp√©cifiques selon le type d√©tect√©
        if "src/main" in lang_info.typical_structure or "src/test" in lang_info.typical_structure:
            # Structure Java/Maven/Gradle
            structure += """Structure Maven/Gradle standard:
```
src/
  ‚îú‚îÄ‚îÄ main/
  ‚îÇ   ‚îî‚îÄ‚îÄ [langage]/    # Code principal
  ‚îî‚îÄ‚îÄ test/
      ‚îî‚îÄ‚îÄ [langage]/    # Tests
```

"""
        elif "src" in lang_info.typical_structure:
            # Structure g√©n√©rique avec src/
            structure += """Structure avec src/:
```
src/              # Code source
tests/ ou test/  # Tests (si applicable)
```

"""
        else:
            # Structure plate
            structure += """Structure plate d√©tect√©e:
- Fichiers √† la racine du projet
- Tests possiblement dans un dossier `tests/` ou `test/`

"""
        
        return structure.strip()
    
    def _generate_naming_conventions(self, lang_info: LanguageInfo) -> str:
        """G√©n√®re les conventions de nommage."""
        conventions = f"""üìù CONVENTIONS DE NOMMAGE {lang_info.name.upper()}:

"""
        
        # Utiliser les conventions d√©tect√©es
        if lang_info.conventions:
            for key, value in lang_info.conventions.items():
                conventions += f"- **{key.replace('_', ' ').title()}**: {value}\n"
        else:
            # Conventions g√©n√©riques
            conventions += """- Analyse le code existant pour identifier les conventions
- Reste coh√©rent avec les patterns du projet
- Utilise des noms descriptifs et clairs

"""
        
        return conventions.strip()
    
    def _generate_best_practices(self, lang_info: LanguageInfo) -> str:
        """G√©n√®re les bonnes pratiques."""
        practices = f"""‚úÖ BONNES PRATIQUES {lang_info.name.upper()}:

1. **Coh√©rence**: Analyse le code existant et respecte son style
2. **Clart√©**: Utilise des noms de variables/fonctions/classes descriptifs
3. **Documentation**: Ajoute des commentaires pour la logique complexe
4. **Tests**: Cr√©e des tests si des fichiers de test existent dans le projet
5. **Build**: Ne modifie PAS les fichiers de build sans n√©cessit√© explicite
"""
        
        # Ajouter des pratiques sp√©cifiques si build files d√©tect√©s
        if lang_info.build_files:
            practices += f"""6. **Configuration**: Fichiers de build d√©tect√©s ({', '.join(lang_info.build_files[:2])})
   - Respecte la configuration existante
   - Ne modifie que si explicitement requis

"""
        
        return practices.strip()
    
    def _generate_common_pitfalls(self, lang_info: LanguageInfo) -> str:
        """G√©n√®re les pi√®ges courants √† √©viter."""
        pitfalls = f"""‚ö†Ô∏è PI√àGES √Ä √âVITER {lang_info.name.upper()}:

‚ùå **NE PAS**:
1. G√©n√©rer du code dans un autre langage que {lang_info.name}
2. Utiliser des extensions incorrectes (seulement {', '.join(lang_info.primary_extensions)})
3. Ignorer la structure de projet existante ({lang_info.typical_structure})
4. M√©langer les conventions de nommage (reste coh√©rent)
5. Cr√©er des fichiers dans des emplacements non-standard sans raison
"""
        
        # Avertissement sp√©cifique pour confiance faible
        if lang_info.confidence < 0.7:
            pitfalls += f"""
‚ö†Ô∏è **ATTENTION**: Confiance de d√©tection = {lang_info.confidence:.2f} (< 0.7)
- V√©rifie doublement le langage en analysant les fichiers existants
- En cas de doute, demande des clarifications
"""
        
        return pitfalls.strip()
    
    def _generate_example_structure(self, lang_info: LanguageInfo) -> str:
        """G√©n√®re un exemple de structure de fichier."""
        ext = lang_info.primary_extensions[0] if lang_info.primary_extensions else ".txt"
        
        example = f"""üìÑ EXEMPLE DE STRUCTURE DE FICHIER {lang_info.name.upper()}:

Pour un fichier `Example{ext}`:

"""
        
        # Exemples adapt√©s selon structure typique
        if "src/main" in lang_info.typical_structure:
            example += f"""```
src/main/{lang_info.type_id}/com/example/Example{ext}
src/test/{lang_info.type_id}/com/example/ExampleTest{ext}
```

Avec packages/namespaces appropri√©s.
"""
        elif "src" in lang_info.typical_structure:
            example += f"""```
src/example{ext}
tests/test_example{ext}  (ou test/ExampleTest{ext})
```

Selon les conventions du projet.
"""
        else:
            example += f"""```
example{ext}           # Code principal
test_example{ext}      # Test correspondant
```

Structure plate, fichiers √† la racine.
"""
        
        return example.strip()


def generate_instructions_for_language(language_info: LanguageInfo) -> str:
    """
    Fonction utilitaire pour g√©n√©rer des instructions format√©es en texte.
    
    Args:
        language_info: Informations sur le langage d√©tect√©
        
    Returns:
        Instructions compl√®tes format√©es en texte
        
    Example:
        >>> from utils.language_detector import detect_language
        >>> lang_info = detect_language(["Main.java", "pom.xml"])
        >>> instructions = generate_instructions_for_language(lang_info)
        >>> print(instructions)
    """
    generator = AdaptiveInstructionGenerator()
    instructions = generator.generate_instructions(language_info)
    
    # Formater en texte complet
    text = f"""
# INSTRUCTIONS DE G√âN√âRATION DE CODE - {language_info.name.upper()}

**Langage d√©tect√©**: {language_info.name} (confiance: {language_info.confidence:.2f})
**Extensions**: {', '.join(language_info.primary_extensions)}
**Structure**: {language_info.typical_structure}

---

{instructions.critical_rules}

---

{instructions.file_structure}

---

{instructions.naming_conventions}

---

{instructions.best_practices}

---

{instructions.common_pitfalls}

---

{instructions.example_structure}

---

## üéØ OBJECTIF PRINCIPAL

G√©n√®re du code {language_info.name} de haute qualit√© qui:
1. Respecte STRICTEMENT toutes les r√®gles ci-dessus
2. S'int√®gre naturellement dans le projet existant
3. Suit les conventions et bonnes pratiques du langage
4. Est maintenable et compr√©hensible

**RAPPEL FINAL**: Tout le code doit √™tre en **{language_info.name}** avec les extensions **{', '.join(language_info.primary_extensions)}** UNIQUEMENT.
"""
    
    return text.strip()


def get_adaptive_prompt_supplement(language_info: LanguageInfo) -> str:
    """
    G√©n√®re un suppl√©ment de prompt adaptatif pour l'impl√©mentation.
    
    Version condens√©e pour inclusion dans les prompts d'impl√©mentation.
    
    Args:
        language_info: Informations sur le langage d√©tect√©
        
    Returns:
        Texte condens√© pour suppl√©ment de prompt
    """
    extensions_str = ", ".join([f"`*{ext}`" for ext in language_info.primary_extensions])
    
    supplement = f"""
## ‚ö†Ô∏è TYPE DE PROJET D√âTECT√â

**Langage**: {language_info.name} (confiance: {language_info.confidence:.1%})
**Extensions valides**: {extensions_str}
**Structure**: {language_info.typical_structure}

### R√àGLES IMP√âRATIVES:
1. ‚úÖ G√©n√®re UNIQUEMENT du code **{language_info.name}**
2. ‚úÖ Utilise UNIQUEMENT les extensions: {extensions_str}
3. ‚úÖ Respecte la structure: {language_info.typical_structure}
4. ‚ùå NE g√©n√®re JAMAIS de code dans un autre langage
"""
    
    if language_info.build_files:
        supplement += f"""5. ‚ÑπÔ∏è  Fichiers de build d√©tect√©s: {', '.join([f"`{bf}`" for bf in language_info.build_files[:3]])}
"""
    
    if language_info.conventions:
        conv_summary = ", ".join([f"{k}={v}" for k, v in list(language_info.conventions.items())[:2]])
        supplement += f"""6. üìù Conventions: {conv_summary}
"""
    
    supplement += f"""
### V√âRIFICATION AVANT G√âN√âRATION:
Avant de g√©n√©rer du code, demande-toi:
- ‚ùì Est-ce que je g√©n√®re bien du **{language_info.name}** ?
- ‚ùì Les extensions sont-elles correctes ({extensions_str}) ?
- ‚ùì La structure respecte-t-elle le projet ({language_info.typical_structure}) ?

Si la r√©ponse √† l'une de ces questions est NON, ARR√äTE et corrige.
"""
    
    return supplement.strip()

